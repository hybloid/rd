{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 5,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 3,
        "length": 3,
        "offset": 37,
        "surroundingCode": "public class NewFile\n{\n  static void Foo()\n  {\n    int a = 42;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "8704c5c2997f7cf7d61a580d43b5857efde3ab594a311be98104a7ab559e5db6"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 5,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 3,
        "length": 3,
        "offset": 37,
        "surroundingCode": "public class NewFile\n{\n  static void Foo()\n  {\n    int a = 42;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "d465c8b531dcc9813d77ad15459c2e2e42aec5163f88a7e65eef4c2d9a14ae7c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use explicit or implicit modifier definition for type members",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Inconsistent modifiers style: missing 'private' modifier",
  "detailsInfo": "'private' modifier can be safely added/removed from type members without changing code semantics [Learn more...](https://www.jetbrains.com/help/rider/ArrangeTypeMemberModifiers.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 5,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 3,
        "length": 3,
        "offset": 37,
        "surroundingCode": "public class NewFile\n{\n  static void Foo()\n  {\n    int a = 42;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "ArrangeTypeMemberModifiers"
  },
  "hash": "373c5cc4a07176536ecfcb26b25825ba6277a85449af659f002c510a38ea3f47"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Unused local variable",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "High",
  "comment": "Local variable 'foo' is never used",
  "detailsInfo": "Local variable is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedVariable.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/LineEndingUtil.cs",
      "language": "C#",
      "line": 13,
      "offset": 22,
      "length": 3,
      "code": {
        "startLine": 11,
        "length": 3,
        "offset": 73,
        "surroundingCode": "            {\n                char prevChar = '\\0';\n                char foo = prevChar;\n                for (int i = 0; i < 4000; i++)\n                {"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "UnusedVariable"
  },
  "hash": "9fb73dd89b630e4d092c57147dab9937820efdd03e0d66264f7bb6625e5dafb7"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETCoreApp 3.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Scripts/LineEndingUtil.cs",
      "language": "C#",
      "line": 12,
      "offset": 17,
      "length": 4,
      "code": {
        "startLine": 10,
        "length": 4,
        "offset": 87,
        "surroundingCode": "            using (var fileStream = File.OpenRead(path))\n            {\n                char prevChar = '\\0';\n                char foo = prevChar;\n                for (int i = 0; i < 4000; i++)"
      }
    }
  ],
  "attributes": {
    "module": "Scripts",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "7085a5162223189e950cb0cfaf91ca949ee99ce104265a46e0d166a40997533c"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 7,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 5,
        "length": 3,
        "offset": 28,
        "surroundingCode": "  static void Foo()\n  {\n    int a = 42;\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "6db4676a3b0ccc4b739d5bd234606310312b56064589959e3fb3faa262ac1836"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 7,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 5,
        "length": 3,
        "offset": 28,
        "surroundingCode": "  static void Foo()\n  {\n    int a = 42;\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "fa44ced22e519b3ac8931cf3d8f8771a4f14c36cdce0b409ccf0cb2ad6a7decf"
},{
  "tool": "Code Inspection",
  "category": "Syntax Style",
  "type": "Use preferred 'var' style (for built-in types)",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Moderate",
  "comment": "Use 'var' (built-in types)",
  "detailsInfo": "Convert if declaration is of a built-in type (e.g. string) [Learn more...](https://www.jetbrains.com/help/rider/SuggestVarOrType_BuiltInTypes.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 7,
      "offset": 5,
      "length": 3,
      "code": {
        "startLine": 5,
        "length": 3,
        "offset": 28,
        "surroundingCode": "  static void Foo()\n  {\n    int a = 42;\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "SuggestVarOrType_BuiltInTypes"
  },
  "hash": "ddb8fb9615f47c0a55b877adff4234550499074c875062fe6a45b8fdb3f54d15"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "High",
  "comment": "Method 'Foo' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 5,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 3,
        "length": 3,
        "offset": 37,
        "surroundingCode": "public class NewFile\n{\n  static void Foo()\n  {\n    int a = 42;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "e3e926790c09e80c420fe5f09654fdf10419ab8c1146b04fc91d7cd04c718955"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "High",
  "comment": "Method 'Foo' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 5,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 3,
        "length": 3,
        "offset": 37,
        "surroundingCode": "public class NewFile\n{\n  static void Foo()\n  {\n    int a = 42;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "b3717a194931aabb83ce146c0f7d78db986cca341c30966fd74edb3196baa4db"
},{
  "tool": "Code Inspection",
  "category": "Redundancies in Symbol Declarations",
  "type": "Type member is never used (private accessibility)",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "High",
  "comment": "Method 'Foo' is never used",
  "detailsInfo": "Type member is never used [Learn more...](https://www.jetbrains.com/help/rider/UnusedMember.Local.html)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 5,
      "offset": 15,
      "length": 3,
      "code": {
        "startLine": 3,
        "length": 3,
        "offset": 37,
        "surroundingCode": "public class NewFile\n{\n  static void Foo()\n  {\n    int a = 42;"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "UnusedMember.Local"
  },
  "hash": "a36562d81650e458abe867e8280c4763663d6d00caa5f967f254869609638878"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Non-accessed local variable",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Critical",
  "comment": "Local variable 'a' is only assigned but its value is never used",
  "detailsInfo": "Local variable is assigned but its value is never used (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Maybe.cs",
      "language": "C#",
      "line": 53,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 51,
        "length": 1,
        "offset": 60,
        "surroundingCode": "    public override bool Equals(object obj)\n    {\n      var a = 5;\n      if (!(obj is Maybe<T>)) return false;\n      return Equals((Maybe<T>)obj);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NotAccessedVariable.Compiler"
  },
  "hash": "58ef0a96b90d40e0b30741af5fd09da10d683eab41cde57e47e49f51b1012b61"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Non-accessed local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Critical",
  "comment": "Local variable 'a' is only assigned but its value is never used",
  "detailsInfo": "Local variable is assigned but its value is never used (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Maybe.cs",
      "language": "C#",
      "line": 53,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 51,
        "length": 1,
        "offset": 60,
        "surroundingCode": "    public override bool Equals(object obj)\n    {\n      var a = 5;\n      if (!(obj is Maybe<T>)) return false;\n      return Equals((Maybe<T>)obj);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NotAccessedVariable.Compiler"
  },
  "hash": "e4ff2298c11e1b7ce45996a3f207bd12e69ed914b38d3739a3a047e9bb217c3d"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Non-accessed local variable",
  "tags": [
    "C#",
    ".NETFramework 4.6.1"
  ],
  "severity": "Critical",
  "comment": "Local variable 'a' is only assigned but its value is never used",
  "detailsInfo": "Local variable is assigned but its value is never used (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 7,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 32,
        "surroundingCode": "  static void Foo()\n  {\n    int a = 42;\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NotAccessedVariable.Compiler"
  },
  "hash": "f22a7ebeb9db0053e9cfd43ac17931aadcb14177f1f7502b0e98f4def072b8ad"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Non-accessed local variable",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Critical",
  "comment": "Local variable 'a' is only assigned but its value is never used",
  "detailsInfo": "Local variable is assigned but its value is never used (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/Maybe.cs",
      "language": "C#",
      "line": 53,
      "offset": 11,
      "length": 1,
      "code": {
        "startLine": 51,
        "length": 1,
        "offset": 60,
        "surroundingCode": "    public override bool Equals(object obj)\n    {\n      var a = 5;\n      if (!(obj is Maybe<T>)) return false;\n      return Equals((Maybe<T>)obj);"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NotAccessedVariable.Compiler"
  },
  "hash": "7766371aa0ef80a222f437ca91ccc890422b9361980ce63484b5437d84a48a95"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Non-accessed local variable",
  "tags": [
    "C#",
    ".NETFramework 3.5"
  ],
  "severity": "Critical",
  "comment": "Local variable 'a' is only assigned but its value is never used",
  "detailsInfo": "Local variable is assigned but its value is never used (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 7,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 32,
        "surroundingCode": "  static void Foo()\n  {\n    int a = 42;\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NotAccessedVariable.Compiler"
  },
  "hash": "99698be8cf7e13a224eb63176cb7f2c9e3680031ec7b0bec2745ab15a67339cb"
},{
  "tool": "Code Inspection",
  "category": "Compiler Warnings",
  "type": "Non-accessed local variable",
  "tags": [
    "C#",
    ".NETStandard 2.0"
  ],
  "severity": "Critical",
  "comment": "Local variable 'a' is only assigned but its value is never used",
  "detailsInfo": "Local variable is assigned but its value is never used (compiler warning)",
  "sources": [
    {
      "type": "file",
      "path": "Lifetimes/Core/NewFile.cs",
      "language": "C#",
      "line": 7,
      "offset": 9,
      "length": 1,
      "code": {
        "startLine": 5,
        "length": 1,
        "offset": 32,
        "surroundingCode": "  static void Foo()\n  {\n    int a = 42;\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "Lifetimes",
    "inspectionName": "NotAccessedVariable.Compiler"
  },
  "hash": "105400376e3bdc27814315a3d986bd206d44150aaebc41bb0995827c6e649843"
}]}