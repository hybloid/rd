{
  "profile": "Default",
  "groups": [
    {
      "name": "Potential Code Quality Issues",
      "inspections": [
        {
          "shortName": "SwitchStatementHandlesSomeKnownEnumValuesWithDefault",
          "displayName": "Some values of the enum are not processed inside 'switch' statement and are handled via default section",
          "enabled": true
        },
        {
          "shortName": "UseConfigureAwaitFalseForAsyncDisposable",
          "displayName": "Missing '.ConfigureAwait(false)' for async disposable in library code",
          "enabled": false
        },
        {
          "shortName": "CppAssignedValueIsNeverUsed",
          "displayName": "Assigned value is never used",
          "enabled": true
        },
        {
          "shortName": "CppCVQualifierCanNotBeAppliedToReference",
          "displayName": "Adding cv-qualifiers to references has no effect",
          "enabled": true
        },
        {
          "shortName": "CppClassNeedsConstructorBecauseOfUninitializedMember",
          "displayName": "Class should have a user-defined constructor because of an uninitialized data member",
          "enabled": true
        },
        {
          "shortName": "CoVariantArrayConversion",
          "displayName": "Co-variant array conversion",
          "enabled": true
        },
        {
          "shortName": "CollectionNeverUpdated.Global",
          "displayName": "Collection is never updated (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "CppFunctionDoesntReturnValue",
          "displayName": "No return statement in a function or a lambda returning non-void",
          "enabled": true
        },
        {
          "shortName": "CompareNonConstrainedGenericWithNull",
          "displayName": "Possible comparison of value type with 'null'",
          "enabled": false
        },
        {
          "shortName": "CppDoxygenUndocumentedParameter",
          "displayName": "Missing function parameter description in a documentation comment",
          "enabled": true
        },
        {
          "shortName": "EventUnsubscriptionViaAnonymousDelegate",
          "displayName": "Event unsubscription via anonymous delegate",
          "enabled": true
        },
        {
          "shortName": "UseNullableAnnotationInsteadOfAttribute",
          "displayName": "Use nullable annotation instead of an attribute",
          "enabled": true
        },
        {
          "shortName": "CppMissingIncludeGuard",
          "displayName": "Missing include guard",
          "enabled": true
        },
        {
          "shortName": "CppDeprecatedRegisterStorageClassSpecifier",
          "displayName": "Deprecated 'register' storage class specifier",
          "enabled": true
        },
        {
          "shortName": "Blazor.EditorRequired",
          "displayName": "Missed value for required attribute",
          "enabled": true
        },
        {
          "shortName": "CollectionNeverUpdated.Local",
          "displayName": "Collection is never updated (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "Xaml.XKeyAttributeDisallowed",
          "displayName": "x:Key is allowed for resources and dictionary elements only",
          "enabled": true
        },
        {
          "shortName": "CppDeletingVoidPointer",
          "displayName": "Deleting a void pointer",
          "enabled": true
        },
        {
          "shortName": "Xaml.XamlMismatchedDeviceFamilyViewClrNameHighlighting",
          "displayName": "DeviceFamily-specific view type name does not match generic type name",
          "enabled": true
        },
        {
          "shortName": "CppRangeBasedForIncompatibleReference",
          "displayName": "Possibly unintended incompatible reference type in range declaration",
          "enabled": true
        },
        {
          "shortName": "Html.AttributeValueNotResolved",
          "displayName": "Unknown attribute value",
          "enabled": true
        },
        {
          "shortName": "CppPrintfExtraArg",
          "displayName": "Too many arguments in a call to printf",
          "enabled": true
        },
        {
          "shortName": "BaseObjectGetHashCodeCallInGetHashCode",
          "displayName": "Overridden GetHashCode calls base 'Object.GetHashCode()'",
          "enabled": true
        },
        {
          "shortName": "CppIdenticalOperandsInBinaryExpression",
          "displayName": "Binary operator acts on identical operands",
          "enabled": true
        },
        {
          "shortName": "ShiftExpressionResultEqualsZero",
          "displayName": "Constant shift expression with non-zero operands results in a zero value",
          "enabled": true
        },
        {
          "shortName": "CppAbstractClassWithoutSpecifier",
          "displayName": "Class is abstract but not explicitly declared as such",
          "enabled": true
        },
        {
          "shortName": "CppBoostFormatBadCode",
          "displayName": "Incorrect format directive in boost::format",
          "enabled": true
        },
        {
          "shortName": "PossibleInterfaceMemberAmbiguity",
          "displayName": "Possible ambiguity while accessing member by interface",
          "enabled": true
        },
        {
          "shortName": "CppPrivateSpecialMemberFunctionIsNotImplemented",
          "displayName": "Private special member function is not implemented",
          "enabled": true
        },
        {
          "shortName": "CppIntegralToPointerConversion",
          "displayName": "Implicit integer to pointer conversion",
          "enabled": true
        },
        {
          "shortName": "Xaml.XamlRelativeSourceDefaultModeWarningHighlighting",
          "displayName": "RelativeSourceMode is not set explicitly",
          "enabled": true
        },
        {
          "shortName": "NotAssignedOutParameter",
          "displayName": "'out' parameter is not assigned upon exit",
          "enabled": true
        },
        {
          "shortName": "Asp.Warning",
          "displayName": "ASP.NET Warning",
          "enabled": true
        },
        {
          "shortName": "ConvertTypeCheckToNullCheck",
          "displayName": "Use null check instead of a type check succeeding on any not-null value",
          "enabled": true
        },
        {
          "shortName": "CppDefaultCaseNotHandledInSwitchStatement",
          "displayName": "Default case is not handled in a switch statement",
          "enabled": true
        },
        {
          "shortName": "NotOverriddenInSpecificCulture",
          "displayName": "Resource is not overridden in specific culture",
          "enabled": true
        },
        {
          "shortName": "NonReadonlyMemberInGetHashCode",
          "displayName": "Non-readonly type member referenced in 'GetHashCode()'",
          "enabled": true
        },
        {
          "shortName": "LocalFunctionHidesMethod",
          "displayName": "Local function hides method",
          "enabled": true
        },
        {
          "shortName": "ReturnTypeCanBeNotNullable",
          "displayName": "Return type of a function can be non-nullable",
          "enabled": true
        },
        {
          "shortName": "Html.TagShouldNotBeSelfClosed",
          "displayName": "Wrong self-closed tag",
          "enabled": true
        },
        {
          "shortName": "ReturnValueOfPureMethodIsNotUsed",
          "displayName": "Return value of pure method is not used",
          "enabled": true
        },
        {
          "shortName": "NotAccessedPositionalProperty.Local",
          "displayName": "Non-accessed positional property (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "CppDeclarationSpecifierWithoutDeclarators",
          "displayName": "Declaration specifier with no declarators",
          "enabled": true
        },
        {
          "shortName": "WebConfig.ModuleQualificationResolve",
          "displayName": "Module qualification required",
          "enabled": true
        },
        {
          "shortName": "PossibleInvalidCastExceptionInForeachLoop",
          "displayName": "Possible 'System.InvalidCastException' in foreach loop",
          "enabled": true
        },
        {
          "shortName": "PossiblyImpureMethodCallOnReadonlyVariable",
          "displayName": "Possibly impure struct method is called on readonly variable: struct value always copied before invocation",
          "enabled": true
        },
        {
          "shortName": "PossibleInvalidOperationException",
          "displayName": "Possible 'System.InvalidOperationException'",
          "enabled": true
        },
        {
          "shortName": "UseCollectionCountProperty",
          "displayName": "Use collection's count property",
          "enabled": true
        },
        {
          "shortName": "CppEmptyDeclaration",
          "displayName": "Declaration does not declare anything",
          "enabled": true
        },
        {
          "shortName": "CppIncompatiblePointerConversion",
          "displayName": "Implicit conversion to incompatible pointer type",
          "enabled": true
        },
        {
          "shortName": "DlTagContainsNonDtOrDdElements",
          "displayName": "Elements not allowed in context (<dl> contains elements other than <dt> or <dd> or they are unclosed)",
          "enabled": true
        },
        {
          "shortName": "OneWayOperationContractWithReturnType",
          "displayName": "One way operations must not return values",
          "enabled": true
        },
        {
          "shortName": "SimplifyStringInterpolation",
          "displayName": "Use format specifier in interpolated strings",
          "enabled": true
        },
        {
          "shortName": "ReferenceEqualsWithValueType",
          "displayName": "'Object.ReferenceEquals' is always false because it is called with value type",
          "enabled": true
        },
        {
          "shortName": "Mvc.AreaNotResolved",
          "displayName": "MVC (unknown area)",
          "enabled": true
        },
        {
          "shortName": "Asp.ResolveWarning",
          "displayName": "ASP.NET Resolve Warning",
          "enabled": true
        },
        {
          "shortName": "IsExpressionAlwaysFalse",
          "displayName": "The expression of 'is' operator is never of the provided type",
          "enabled": true
        },
        {
          "shortName": "CppDefaultIsUsedAsIdentifier",
          "displayName": "Keyword 'default' is used as identifier",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantXamarinFormsClassDeclaration",
          "displayName": "Resource cannot be accessed by class name because of x:Key attribute",
          "enabled": true
        },
        {
          "shortName": "ReadAccessInDoubleCheckLocking",
          "displayName": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field.",
          "enabled": true
        },
        {
          "shortName": "AspOdsMethodReferenceResolveError",
          "displayName": "Object data source method resolve problem",
          "enabled": true
        },
        {
          "shortName": "CppIncompleteSwitchStatement",
          "displayName": "Possibly erroneous incomplete switch-statement",
          "enabled": true
        },
        {
          "shortName": "AssignmentInConditionalExpression",
          "displayName": "Assignment in conditional expression",
          "enabled": true
        },
        {
          "shortName": "WebConfig.TypeNotResolved",
          "displayName": "Cannot resolve symbol",
          "enabled": true
        },
        {
          "shortName": "VirtualMemberCallInConstructor",
          "displayName": "Virtual member call in constructor",
          "enabled": true
        },
        {
          "shortName": "AddressOfMarshalByRefObject",
          "displayName": "Captured field reference of a marshal-by-reference class may cause a runtime exception",
          "enabled": true
        },
        {
          "shortName": "OperationContractWithoutServiceContract",
          "displayName": "Method is marked as OperationContract but containing type is not marked as ServiceContract",
          "enabled": true
        },
        {
          "shortName": "UnreachableSwitchArmDueToIntegerAnalysis",
          "displayName": "Heuristically unreachable switch arm according to integer analysis",
          "enabled": true
        },
        {
          "shortName": "FunctionComplexityOverflow",
          "displayName": "Function body is too complex to analyze",
          "enabled": false
        },
        {
          "shortName": "PolymorphicFieldLikeEventInvocation",
          "displayName": "Invocation of polymorphic field-like event",
          "enabled": true
        },
        {
          "shortName": "RedundantWithExpression",
          "displayName": "Empty 'with' expression is redundant",
          "enabled": true
        },
        {
          "shortName": "CppMissingKeywordThrow",
          "displayName": "May be missing keyword 'throw'",
          "enabled": true
        },
        {
          "shortName": "CppNonInlineFunctionDefinitionInHeaderFile",
          "displayName": "Non-inline function definition in a header file",
          "enabled": true
        },
        {
          "shortName": "CppPrintfRiskyFormat",
          "displayName": "Possibly invalid printf format specifier",
          "enabled": true
        },
        {
          "shortName": "NonAtomicCompoundOperator",
          "displayName": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead.",
          "enabled": true
        },
        {
          "shortName": "Asxx.PathError",
          "displayName": "Path error",
          "enabled": true
        },
        {
          "shortName": "Html.EventNotResolved",
          "displayName": "Unknown event",
          "enabled": true
        },
        {
          "shortName": "CppTypeAliasNeverUsed",
          "displayName": "Type alias is never used",
          "enabled": true
        },
        {
          "shortName": "SwitchStatementMissingSomeEnumCasesNoDefault",
          "displayName": "Some values of the enum are not processed inside 'switch' statement",
          "enabled": true
        },
        {
          "shortName": "CppDoxygenSyntaxError",
          "displayName": "Syntax error in doxygen comment",
          "enabled": true
        },
        {
          "shortName": "StaticMemberInGenericType",
          "displayName": "Static field or auto-property in generic type",
          "enabled": true
        },
        {
          "shortName": "CppRedundantComplexityInComparison",
          "displayName": "Expression can be simplified",
          "enabled": true
        },
        {
          "shortName": "EventNeverInvoked",
          "displayName": "Event never invoked",
          "enabled": true
        },
        {
          "shortName": "Asp.NotResolved",
          "displayName": "Unknown symbol",
          "enabled": true
        },
        {
          "shortName": "IntDivisionByZero",
          "displayName": "Division by zero in at least one execution path",
          "enabled": true
        },
        {
          "shortName": "StaticProblemInText",
          "displayName": "Cannot access static symbol in text argument",
          "enabled": true
        },
        {
          "shortName": "InterpolatedStringExpressionIsNotIFormattable",
          "displayName": "Formatting is specified, but interpolated string expression is not IFormattable",
          "enabled": true
        },
        {
          "shortName": "ObjectCreationAsStatement",
          "displayName": "Possible unassigned object created by 'new' expression",
          "enabled": true
        },
        {
          "shortName": "IntVariableOverflowInUncheckedContext",
          "displayName": "Possible overflow in unchecked context",
          "enabled": true
        },
        {
          "shortName": "Xaml.PathError",
          "displayName": "Path error",
          "enabled": true
        },
        {
          "shortName": "ConstructorInitializerLoop",
          "displayName": "Possible cyclic constructor call",
          "enabled": true
        },
        {
          "shortName": "AccessRightsInText",
          "displayName": "Cannot access symbol in text argument",
          "enabled": true
        },
        {
          "shortName": "WithExpressionInsteadOfInitializer",
          "displayName": "'with' expression is used instead of object initializer",
          "enabled": true
        },
        {
          "shortName": "UseFormatSpecifierInFormatString",
          "displayName": "Use format specifier in format strings",
          "enabled": true
        },
        {
          "shortName": "NotAccessedPositionalProperty.Global",
          "displayName": "Non-accessed positional property (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "Mvc.ViewNotResolved",
          "displayName": "MVC (unknown view)",
          "enabled": true
        },
        {
          "shortName": "CppBoostFormatMixedArgs",
          "displayName": "Positional and non-positional arguments in the same boost::format call",
          "enabled": true
        },
        {
          "shortName": "CppMsExtReinterpretCastFromNullptr",
          "displayName": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension",
          "enabled": true
        },
        {
          "shortName": "UnreachableSwitchCaseDueToIntegerAnalysis",
          "displayName": "Heuristically unreachable case according to integer analysis",
          "enabled": true
        },
        {
          "shortName": "OtherTagsInsideScript1",
          "displayName": "Script tag errors (other tags inside <script> - possibly unclosed <script>)",
          "enabled": true
        },
        {
          "shortName": "OtherTagsInsideScript2",
          "displayName": "Script tag errors (other tags inside <script> - possibly unclosed <script>)",
          "enabled": true
        },
        {
          "shortName": "CppUninitializedNonStaticDataMember",
          "displayName": "Non-static data member is uninitialized",
          "enabled": true
        },
        {
          "shortName": "InvalidXmlDocComment",
          "displayName": "Invalid XML documentation comment",
          "enabled": true
        },
        {
          "shortName": "TailRecursiveCall",
          "displayName": "Tail recursive call can be replaced with loop",
          "enabled": true
        },
        {
          "shortName": "OptionalParameterRefOut",
          "displayName": "'ref' or 'out' parameter with [Optional] attribute",
          "enabled": true
        },
        {
          "shortName": "CppUnusedIncludeDirective",
          "displayName": "Possibly unused #include directive",
          "enabled": true
        },
        {
          "shortName": "CppBooleanIncrementExpression",
          "displayName": "Incrementing expression of type bool",
          "enabled": true
        },
        {
          "shortName": "FunctionNeverReturns",
          "displayName": "Function never returns",
          "enabled": true
        },
        {
          "shortName": "CppParameterNeverUsed",
          "displayName": "Parameter is never used",
          "enabled": true
        },
        {
          "shortName": "CppLocalVariableMightNotBeInitialized",
          "displayName": "Local variable might not be initialized",
          "enabled": true
        },
        {
          "shortName": "CppInvalidLineContinuation",
          "displayName": "Backslash and newline are separated by space",
          "enabled": true
        },
        {
          "shortName": "CppMsExtBindingRValueToLvalueReference",
          "displayName": "Binding r-value to l-value reference is non-standard Microsoft C++ extension",
          "enabled": true
        },
        {
          "shortName": "InconsistentlySynchronizedField",
          "displayName": "Inconsistent synchronization on field",
          "enabled": true
        },
        {
          "shortName": "UseConfigureAwaitFalse",
          "displayName": "Missing '.ConfigureAwait(false)' in library code",
          "enabled": true
        },
        {
          "shortName": "CppImplicitDefaultConstructorNotAvailable",
          "displayName": "Implicit default constructor is not available",
          "enabled": true
        },
        {
          "shortName": "CppMustBePublicVirtualToImplementInterface",
          "displayName": "Method must be public and virtual to implement a C++/CLI interface member",
          "enabled": true
        },
        {
          "shortName": "CppDeclaratorNeverUsed",
          "displayName": "Declarator is never used",
          "enabled": true
        },
        {
          "shortName": "CppPossiblyErroneousEmptyStatements",
          "displayName": "Possibly erroneous empty statement",
          "enabled": true
        },
        {
          "shortName": "Asp.SkinNotResolved",
          "displayName": "Unknown skin",
          "enabled": true
        },
        {
          "shortName": "ConfusingCharAsIntegerInConstructor",
          "displayName": "Char is possibly unintentionally used as integer",
          "enabled": true
        },
        {
          "shortName": "PossibleUnintendedQueryableAsEnumerable",
          "displayName": "IQueryable is possibly unintentionally used as IEnumerable",
          "enabled": true
        },
        {
          "shortName": "Html.TagShouldBeSelfClosed",
          "displayName": "Wrong closed tag",
          "enabled": true
        },
        {
          "shortName": "SimilarAnonymousTypeNearby",
          "displayName": "Similar anonymous type detected nearby",
          "enabled": true
        },
        {
          "shortName": "NotAccessedField.Global",
          "displayName": "Non-accessed field (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "WebConfig.ModuleNotResolved",
          "displayName": "Cannot resolve module",
          "enabled": true
        },
        {
          "shortName": "ConditionalTernaryEqualBranch",
          "displayName": "'?:' expression has identical true and false branches",
          "enabled": true
        },
        {
          "shortName": "CppDeprecatedEntity",
          "displayName": "Entity is deprecated",
          "enabled": true
        },
        {
          "shortName": "Asp.InvalidControlType",
          "displayName": "Invalid control type",
          "enabled": true
        },
        {
          "shortName": "PossibleIntendedRethrow",
          "displayName": "Exception rethrow possibly intended",
          "enabled": true
        },
        {
          "shortName": "Mvc.TemplateNotResolved",
          "displayName": "MVC (unknown template)",
          "enabled": true
        },
        {
          "shortName": "Xaml.IndexOutOfGridDefinition",
          "displayName": "Grid element column/row index is out of grid definition range",
          "enabled": true
        },
        {
          "shortName": "Html.TagNotResolved",
          "displayName": "Unknown tag",
          "enabled": true
        },
        {
          "shortName": "InheritdocConsiderUsage",
          "displayName": "Use <inheritdoc /> on root level to inherit documentation from base candidate",
          "enabled": false
        },
        {
          "shortName": "PropertyFieldKeywordIsNeverAssigned",
          "displayName": "Backing field is used but never assigned",
          "enabled": true
        },
        {
          "shortName": "AccessToDisposedClosure",
          "displayName": "Access to disposed captured variable",
          "enabled": true
        },
        {
          "shortName": "CppFunctionIsNotImplemented",
          "displayName": "Function is not implemented",
          "enabled": true
        },
        {
          "shortName": "CppDeclarationHidesLocal",
          "displayName": "Hiding local declaration",
          "enabled": true
        },
        {
          "shortName": "FormatStringProblem",
          "displayName": "String formatting method problems",
          "enabled": true
        },
        {
          "shortName": "CppMismatchedClassTags",
          "displayName": "Mismatched class tags",
          "enabled": true
        },
        {
          "shortName": "EnumerableSumInExplicitUncheckedContext",
          "displayName": "'Enumerable.Sum' invocation in explicit unchecked context",
          "enabled": true
        },
        {
          "shortName": "MathClampMinGreaterThanMax",
          "displayName": "Inconsistent arguments passed to 'Math.Clamp()' method",
          "enabled": true
        },
        {
          "shortName": "UnassignedField.Global",
          "displayName": "Unassigned field (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "DuplicateResource",
          "displayName": "Duplicate resource name",
          "enabled": false
        },
        {
          "shortName": "EventNeverSubscribedTo.Local",
          "displayName": "Event is never subscribed to (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "PossiblyMissingIndexerInitializerComma",
          "displayName": "Possibly missing comma before indexer initializer",
          "enabled": true
        },
        {
          "shortName": "OverriddenWithEmptyValue",
          "displayName": "Resource overrides base resource with empty value",
          "enabled": true
        },
        {
          "shortName": "NotDeclaredInParentCulture",
          "displayName": "Resource is not declared in base culture",
          "enabled": true
        },
        {
          "shortName": "Mvc.MasterpageNotResolved",
          "displayName": "MVC (unknown masterpage)",
          "enabled": true
        },
        {
          "shortName": "ServiceContractWithoutOperations",
          "displayName": "Interfaces marked as ServiceContract should declare at least one OperationContract",
          "enabled": true
        },
        {
          "shortName": "PropertyNotResolved",
          "displayName": "Cannot resolve property",
          "enabled": true
        },
        {
          "shortName": "CppDeclaratorUsedBeforeInitialization",
          "displayName": "Local variable is used without being initialized",
          "enabled": true
        },
        {
          "shortName": "Xaml.StyleInvalidTargetType",
          "displayName": "Style target type is not convertible to base type",
          "enabled": true
        },
        {
          "shortName": "SafeCastIsUsedAsTypeCheck",
          "displayName": "Try cast and check for null can be replaced with a type check",
          "enabled": true
        },
        {
          "shortName": "InconsistentOrderOfLocks",
          "displayName": "Inconsistent order of taken locks",
          "enabled": true
        },
        {
          "shortName": "CppEnumeratorNeverUsed",
          "displayName": "Enumerator is never used",
          "enabled": true
        },
        {
          "shortName": "CppSomeObjectMembersMightNotBeInitialized",
          "displayName": "Some object members might not be initialized",
          "enabled": true
        },
        {
          "shortName": "CppHiddenFunction",
          "displayName": "Non-virtual class member function hidden in a derived class",
          "enabled": true
        },
        {
          "shortName": "MemberHidesStaticFromOuterClass",
          "displayName": "Member hides static member from outer class",
          "enabled": true
        },
        {
          "shortName": "WebConfig.WrongModule",
          "displayName": "Wrong module",
          "enabled": true
        },
        {
          "shortName": "UseSwitchCasePatternVariable",
          "displayName": "Type pattern and casts can be merged",
          "enabled": true
        },
        {
          "shortName": "FormatStringPlaceholdersMismatch",
          "displayName": "Format string placeholders mismatch",
          "enabled": true
        },
        {
          "shortName": "CppDoxygenUnresolvedReference",
          "displayName": "Unresolved reference in doxygen comment",
          "enabled": true
        },
        {
          "shortName": "CppParameterValueIsReassigned",
          "displayName": "Parameter is always rewritten in function body before being read",
          "enabled": true
        },
        {
          "shortName": "CppZeroValuedExpressionUsedAsNullPointer",
          "displayName": "Expression that evaluates to zero is used as a null pointer constant",
          "enabled": true
        },
        {
          "shortName": "CppObjectMemberMightNotBeInitialized",
          "displayName": "Object member might not be initialized",
          "enabled": true
        },
        {
          "shortName": "Html.IdDuplication",
          "displayName": "Ids duplication",
          "enabled": true
        },
        {
          "shortName": "CppBoostFormatTooFewArgs",
          "displayName": "Not enough arguments in a call to boost::format",
          "enabled": true
        },
        {
          "shortName": "NotAccessedField.Local",
          "displayName": "Non-accessed field (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "EventNeverInvoked.Global",
          "displayName": "Abstract or virtual (overridable) event is never invoked",
          "enabled": true
        },
        {
          "shortName": "CollectionNeverQueried.Local",
          "displayName": "Collection content is never queried (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "SuspiciousTypeConversion.Global",
          "displayName": "Suspicious type conversion or check",
          "enabled": true
        },
        {
          "shortName": "CppDependentTemplateWithoutTemplateKeyword",
          "displayName": "Dependent template without 'template' keyword",
          "enabled": true
        },
        {
          "shortName": "Asp.Image",
          "displayName": "Wrong image size",
          "enabled": true
        },
        {
          "shortName": "NullableWarningSuppressionIsUsed",
          "displayName": "A suppressed nullable warning might hide an underlying problem",
          "enabled": false
        },
        {
          "shortName": "FieldHidesInterfacePropertyWithDefaultImplementation",
          "displayName": "Field hides property with default implementation in interface",
          "enabled": true
        },
        {
          "shortName": "ResourceItemNotResolved",
          "displayName": "Cannot resolve resource item",
          "enabled": true
        },
        {
          "shortName": "InheritdocInvalidUsage",
          "displayName": "Usage of <inheritdoc /> is invalid",
          "enabled": true
        },
        {
          "shortName": "Html.PathError",
          "displayName": "Path error",
          "enabled": true
        },
        {
          "shortName": "ExplicitCallerInfoArgument",
          "displayName": "Explicit argument passed to parameter with caller info attribute",
          "enabled": true
        },
        {
          "shortName": "CppHidingFunction",
          "displayName": "Class member function hiding a non-virtual function from a base class",
          "enabled": true
        },
        {
          "shortName": "SymbolFromNotCopiedLocallyReferenceUsedWarning",
          "displayName": "Symbol from module that might be missing at runtime",
          "enabled": true
        },
        {
          "shortName": "CppVirtualFunctionCallInsideCtor",
          "displayName": "Call to a virtual function inside a constructor/destructor is resolved at compile time",
          "enabled": true
        },
        {
          "shortName": "PossibleStructMemberModificationOfNonVariableStruct",
          "displayName": "Value assigned to a property of non-variable qualifier expression can be lost",
          "enabled": true
        },
        {
          "shortName": "CppNonExceptionSafeResourceAcquisition",
          "displayName": "Non-safe resource acquisition",
          "enabled": true
        },
        {
          "shortName": "CppMsExtDoubleUserConversionInCopyInit",
          "displayName": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension.",
          "enabled": true
        },
        {
          "shortName": "AngularHtml.Banana",
          "displayName": "'Banana in a box' [()] violation in Angular 2 binding",
          "enabled": true
        },
        {
          "shortName": "Html.DeadCode",
          "displayName": "HTML Dead Code",
          "enabled": true
        },
        {
          "shortName": "IteratorMethodResultIsIgnored",
          "displayName": "Return value of iterator is not used",
          "enabled": true
        },
        {
          "shortName": "PossibleInfiniteInheritance",
          "displayName": "Possible infinite inheritance",
          "enabled": true
        },
        {
          "shortName": "ShiftExpressionZeroLeftOperand",
          "displayName": "Shift expression with zero left operand equals zero",
          "enabled": true
        },
        {
          "shortName": "AsyncIteratorInvocationWithoutAwaitForeach",
          "displayName": "Async iterator invocation without 'await foreach'",
          "enabled": true
        },
        {
          "shortName": "MustUseReturnValue",
          "displayName": "Return value of [MustUseReturnValue] annotated method is not used",
          "enabled": true
        },
        {
          "shortName": "BaseMethodCallWithDefaultParameter",
          "displayName": "Call to base member with implicit default parameters",
          "enabled": true
        },
        {
          "shortName": "AsyncVoidLambda",
          "displayName": "Avoid using 'async' lambda when delegate type returns 'void'",
          "enabled": true
        },
        {
          "shortName": "ThreadStaticAtInstanceField",
          "displayName": "[ThreadStatic] does not work with instance fields",
          "enabled": true
        },
        {
          "shortName": "Html.TagNotClosed",
          "displayName": "Unclosed tag",
          "enabled": true
        },
        {
          "shortName": "CppPointerConversionDropsQualifiers",
          "displayName": "Implicit conversion to pointer type with loss of qualifiers",
          "enabled": true
        },
        {
          "shortName": "Xaml.MissingGridIndex",
          "displayName": "Missing grid column/row setter for non-first child",
          "enabled": true
        },
        {
          "shortName": "EventNeverSubscribedTo.Global",
          "displayName": "Event is never subscribed to (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "CppBoostFormatTooManyArgs",
          "displayName": "Too many arguments in a call to boost::format",
          "enabled": true
        },
        {
          "shortName": "LoopVariableIsNeverChangedInsideLoop",
          "displayName": "Loop control variable is never changed inside loop",
          "enabled": true
        },
        {
          "shortName": "Razor.LayoutNotResolved",
          "displayName": "Unknown Razor layout",
          "enabled": true
        },
        {
          "shortName": "CppNonInlineVariableDefinitionInHeaderFile",
          "displayName": "Non-inline variable definition in a header file",
          "enabled": true
        },
        {
          "shortName": "CppMsExtCopyElisionInCopyInitDeclarator",
          "displayName": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension.",
          "enabled": true
        },
        {
          "shortName": "ResourceNotResolved",
          "displayName": "Cannot resolve resource",
          "enabled": true
        },
        {
          "shortName": "CppRedefinitionOfDefaultArgumentInOverrideFunction",
          "displayName": "Override function redefines a default parameter argument",
          "enabled": true
        },
        {
          "shortName": "Asp.ThemeNotResolved",
          "displayName": "Unknown theme",
          "enabled": true
        },
        {
          "shortName": "Xaml.XamlUnknownDeviceFamilyTypeHighlighting",
          "displayName": "Unknown DeviceFamily",
          "enabled": true
        },
        {
          "shortName": "UselessBinaryOperation",
          "displayName": "Useless arithmetical operation",
          "enabled": true
        },
        {
          "shortName": "WithExpressionModifiesAllMembers",
          "displayName": "'with' expression modifies all accessible instance members",
          "enabled": true
        },
        {
          "shortName": "CppBoostFormatLegacyCode",
          "displayName": "Outdated format directive in boost::format",
          "enabled": true
        },
        {
          "shortName": "VariableHidesOuterVariable",
          "displayName": "Variable in local function hides variable from outer scope",
          "enabled": true
        },
        {
          "shortName": "Razor.SectionNotResolved",
          "displayName": "Unknown Razor section",
          "enabled": true
        },
        {
          "shortName": "Mvc.PartialViewNotResolved",
          "displayName": "MVC (unknown partial view)",
          "enabled": true
        },
        {
          "shortName": "Xaml.UnexpectedElement",
          "displayName": "Unexpected element error",
          "enabled": true
        },
        {
          "shortName": "SuspiciousParameterNameInArgumentNullException",
          "displayName": "Suspicious parameter name in ArgumentNullException",
          "enabled": true
        },
        {
          "shortName": "ParameterHidesMember",
          "displayName": "Parameter hides member",
          "enabled": true
        },
        {
          "shortName": "UnassignedReadonlyField",
          "displayName": "Unassigned readonly field",
          "enabled": true
        },
        {
          "shortName": "ScriptTagWithContentBeforeIncludes",
          "displayName": "Script tag errors (<script> with content before included <script>)",
          "enabled": true
        },
        {
          "shortName": "CppPrintfBadFormat",
          "displayName": "Invalid printf format specifier",
          "enabled": true
        },
        {
          "shortName": "CppUnnamedNamespaceInHeaderFile",
          "displayName": "Unnamed namespace in a header file",
          "enabled": true
        },
        {
          "shortName": "CppMsExtNotInitializedStaticConstLocalVar",
          "displayName": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension.",
          "enabled": true
        },
        {
          "shortName": "IndexingByInvalidRange",
          "displayName": "Possible 'System.ArgumentOutOfRangeException'. Start index must be less than or equal to end index.",
          "enabled": true
        },
        {
          "shortName": "Xaml.XamlDuplicateDeviceFamilyTypeViewHighlighting",
          "displayName": "Duplicate device family view",
          "enabled": true
        },
        {
          "shortName": "CppVirtualFunctionInFinalClass",
          "displayName": "Declaration of a non-overriding virtual function in a final or sealed class",
          "enabled": true
        },
        {
          "shortName": "Xaml.DuplicateStyleSetter",
          "displayName": "Duplicate style property/event setter",
          "enabled": true
        },
        {
          "shortName": "LocalVariableHidesMember",
          "displayName": "Local variable hides member",
          "enabled": true
        },
        {
          "shortName": "PossibleNullReferenceException",
          "displayName": "Possible 'System.NullReferenceException'",
          "enabled": true
        },
        {
          "shortName": "ZeroIndexFromEnd",
          "displayName": "Index from end must be greater than zero; use '^1' to refer to the last element",
          "enabled": true
        },
        {
          "shortName": "ClassNeverInstantiated.Global",
          "displayName": "Class is never instantiated (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "Html.AttributesQuotes",
          "displayName": "Wrong attribute quotes",
          "enabled": true
        },
        {
          "shortName": "ScriptTagHasBothSrcAndContentAttributes",
          "displayName": "Script tag errors (<script> with both src and content)",
          "enabled": true
        },
        {
          "shortName": "CppInitializedValueIsAlwaysRewritten",
          "displayName": "Declarator is reassigned in all paths before being read",
          "enabled": true
        },
        {
          "shortName": "PartialMethodParameterNameMismatch",
          "displayName": "Parameter name differs in partial method declaration",
          "enabled": true
        },
        {
          "shortName": "CppSpecialFunctionWithoutNoexceptSpecification",
          "displayName": "Special function without noexcept specification",
          "enabled": true
        },
        {
          "shortName": "CppStaticDataMemberInUnnamedStruct",
          "displayName": "Static data member in an anonymous class is not allowed by the C++ standard",
          "enabled": true
        },
        {
          "shortName": "OperatorWithoutMatchedCheckedOperator",
          "displayName": "Operator without matching checked operator",
          "enabled": true
        },
        {
          "shortName": "ValueParameterNotUsed",
          "displayName": "'value' parameter is not used",
          "enabled": true
        },
        {
          "shortName": "BitwiseOperatorOnEnumWithoutFlags",
          "displayName": "Bitwise operation on enum is not marked by [Flags] attribute",
          "enabled": true
        },
        {
          "shortName": "Asp.ContentPlaceholderNotResolved",
          "displayName": "Unknown content placeholder",
          "enabled": true
        },
        {
          "shortName": "PatternAlwaysMatches",
          "displayName": "The source expression always matches the provided pattern",
          "enabled": true
        },
        {
          "shortName": "CppLambdaCaptureNeverUsed",
          "displayName": "Lambda capture is never used",
          "enabled": true
        },
        {
          "shortName": "CppMsExtAddressOfClassRValue",
          "displayName": "Taking an address of class r-value is non-standard Microsoft C++ extension",
          "enabled": true
        },
        {
          "shortName": "MergeCastWithTypeCheck",
          "displayName": "Type check and casts can be merged",
          "enabled": true
        },
        {
          "shortName": "IntVariableOverflow",
          "displayName": "Possible overflow",
          "enabled": true
        },
        {
          "shortName": "SuspiciousLockOverSynchronizationPrimitive",
          "displayName": "Suspicious locking over synchronization primitive",
          "enabled": true
        },
        {
          "shortName": "WebConfig.WebConfigPathWarning",
          "displayName": "Referenced path cannot be found in the website",
          "enabled": true
        },
        {
          "shortName": "MultipleResolveCandidatesInText",
          "displayName": "Ambiguous symbols in text argument",
          "enabled": true
        },
        {
          "shortName": "CppDeclarationHidesUncapturedLocal",
          "displayName": "Hiding an uncaptured local declaration",
          "enabled": true
        },
        {
          "shortName": "Xaml.XamlXamarinFormsDataTypeAndBindingContextTypeMismatchedHighlighting",
          "displayName": "Types in x:DataType and BindingContext mismatch",
          "enabled": true
        },
        {
          "shortName": "CppEqualOperandsInBinaryExpression",
          "displayName": "Binary operator acts on equal operands",
          "enabled": true
        },
        {
          "shortName": "CppParameterNamesMismatch",
          "displayName": "Parameter names do not match",
          "enabled": true
        },
        {
          "shortName": "ConvertTypeCheckPatternToNullCheck",
          "displayName": "Use null check pattern instead of a type check succeeding on any not-null value",
          "enabled": true
        },
        {
          "shortName": "AsyncVoidMethod",
          "displayName": "Avoid using 'async' methods with the 'void' return type",
          "enabled": false
        },
        {
          "shortName": "CppPolymorphicClassWithNonVirtualPublicDestructor",
          "displayName": "Polymorphic class with non-virtual public destructor",
          "enabled": true
        },
        {
          "shortName": "CppClassNeverUsed",
          "displayName": "Class is never used",
          "enabled": true
        },
        {
          "shortName": "Mvc.ActionNotResolved",
          "displayName": "MVC (unknown action)",
          "enabled": true
        },
        {
          "shortName": "VoidMethodWithMustUseReturnValueAttribute",
          "displayName": "'void' method is annotated by [MustUseReturnValue] attribute",
          "enabled": true
        },
        {
          "shortName": "MethodOverloadWithOptionalParameter",
          "displayName": "Method with optional or 'params' parameter is hidden by overload",
          "enabled": true
        },
        {
          "shortName": "ThreadStaticFieldHasInitializer",
          "displayName": "Thread static field has initializer",
          "enabled": true
        },
        {
          "shortName": "Html.IdNotResolved",
          "displayName": "Unknown ID",
          "enabled": true
        },
        {
          "shortName": "CppDeclaratorDisambiguatedAsFunction",
          "displayName": "Declarator disambiguated as a function declaration",
          "enabled": true
        },
        {
          "shortName": "Xaml.PossibleNullReferenceException",
          "displayName": "Possible 'null' value in the path of binding without fallback value",
          "enabled": true
        },
        {
          "shortName": "PossibleMultipleWriteAccessInDoubleCheckLocking",
          "displayName": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field.",
          "enabled": true
        },
        {
          "shortName": "UnusedAutoPropertyAccessor.Local",
          "displayName": "Auto-property accessor is never used (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "ClassNeverInstantiated.Local",
          "displayName": "Class is never instantiated (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "Asp.DeadCode",
          "displayName": "ASP.NET Dead Code",
          "enabled": true
        },
        {
          "shortName": "Html.Obsolete",
          "displayName": "Obsolete or nonstandard element",
          "enabled": true
        },
        {
          "shortName": "GCSuppressFinalizeForTypeWithoutDestructor",
          "displayName": "'GC.SuppressFinalize' is invoked for type without destructor",
          "enabled": true
        },
        {
          "shortName": "PropertyFieldKeywordIsNeverUsed",
          "displayName": "Backing field is assigned but never used",
          "enabled": true
        },
        {
          "shortName": "PossibleUnintendedReferenceComparison",
          "displayName": "Possible unintended reference comparison",
          "enabled": true
        },
        {
          "shortName": "CppLongFloat",
          "displayName": "'long' floats are not allowed by the C++ standard",
          "enabled": true
        },
        {
          "shortName": "CppPossiblyUninitializedMember",
          "displayName": "Possibly uninitialized class member",
          "enabled": true
        },
        {
          "shortName": "Xaml.UnexpectedTextToken",
          "displayName": "Unexpected text token error",
          "enabled": true
        },
        {
          "shortName": "SpinLockInReadonlyField",
          "displayName": "Do not store SpinLock in readonly field",
          "enabled": true
        },
        {
          "shortName": "MemberHidesInterfaceMemberWithDefaultImplementation",
          "displayName": "Non-public member in implementation  class hides default implementation in interface",
          "enabled": true
        },
        {
          "shortName": "CppPointerToIntegralConversion",
          "displayName": "Implicit pointer to integer conversion",
          "enabled": true
        },
        {
          "shortName": "VariableCanBeNotNullable",
          "displayName": "Variable can be declared as non-nullable",
          "enabled": true
        },
        {
          "shortName": "ShiftExpressionRealShiftCountIsZero",
          "displayName": "Actual shift count equals zero",
          "enabled": true
        },
        {
          "shortName": "ResxNotResolved",
          "displayName": "Cannot resolve symbol",
          "enabled": true
        },
        {
          "shortName": "OptionalParameterHierarchyMismatch",
          "displayName": "Mismatch of optional parameter value in overridden method",
          "enabled": true
        },
        {
          "shortName": "StackAllocInsideLoop",
          "displayName": "Using stackalloc inside loop",
          "enabled": true
        },
        {
          "shortName": "CDeclarationWithImplicitIntType",
          "displayName": "Type-specifier missing, defaults to int",
          "enabled": true
        },
        {
          "shortName": "CppStringLiteralToCharPointerConversion",
          "displayName": "String literal to char pointer conversion",
          "enabled": true
        },
        {
          "shortName": "CppNotAllPathsReturnValue",
          "displayName": "Not all control paths return a value",
          "enabled": true
        },
        {
          "shortName": "MultipleOrderBy",
          "displayName": "Multiple sequential 'OrderBy' invocation",
          "enabled": true
        },
        {
          "shortName": "CppReturnNoValueInNonVoidFunction",
          "displayName": "A function or a lambda with non-void return type should return a value",
          "enabled": true
        },
        {
          "shortName": "LocalizableElement",
          "displayName": "Element is localizable",
          "enabled": true
        },
        {
          "shortName": "CppLocalVariableWithNonTrivialDtorIsNeverUsed",
          "displayName": "Local variable is never used, but may have side-effects in its destructor",
          "enabled": false
        },
        {
          "shortName": "CppAbstractFinalClass",
          "displayName": "Abstract final class",
          "enabled": true
        },
        {
          "shortName": "StaticMemberInitializerReferesToMemberBelow",
          "displayName": "Static member initializer refers to static member below or in other part",
          "enabled": true
        },
        {
          "shortName": "CppUsingResultOfAssignmentAsCondition",
          "displayName": "Result of assignment is used as condition",
          "enabled": true
        },
        {
          "shortName": "EqualExpressionComparison",
          "displayName": "Similar expressions comparison",
          "enabled": true
        },
        {
          "shortName": "IntVariableOverflowInCheckedContext",
          "displayName": "Possible overflow in checked context",
          "enabled": true
        },
        {
          "shortName": "FunctionRecursiveOnAllPaths",
          "displayName": "Function is recursive on all execution paths",
          "enabled": true
        },
        {
          "shortName": "CppNoDiscardExpression",
          "displayName": "Result of nodiscard function is not used",
          "enabled": true
        },
        {
          "shortName": "CompareOfFloatsByEqualityOperator",
          "displayName": "Equality comparison of floating point numbers",
          "enabled": true
        },
        {
          "shortName": "MemberInitializerValueIgnored",
          "displayName": "Member initialized value ignored",
          "enabled": true
        },
        {
          "shortName": "EmptyGeneralCatchClause",
          "displayName": "Empty general catch clause",
          "enabled": true
        },
        {
          "shortName": "PossibleMultipleEnumeration",
          "displayName": "Possible multiple enumeration",
          "enabled": true
        },
        {
          "shortName": "UlTagContainsNonLiElements",
          "displayName": "Elements not allowed in context (<ul> contains elements other than <li> or <li> is unclosed)",
          "enabled": true
        },
        {
          "shortName": "CppNodiscardFunctionWithoutReturnValue",
          "displayName": "[[nodiscard]] cannot be applied to functions without a return value",
          "enabled": true
        },
        {
          "shortName": "CppEntityUsedOnlyInUnevaluatedContext",
          "displayName": "Declarator is used only in unevaluated context",
          "enabled": true
        },
        {
          "shortName": "Html.Warning",
          "displayName": "HTML Warning",
          "enabled": true
        },
        {
          "shortName": "OperatorIsCanBeUsed",
          "displayName": "Operator 'is'/'Type Of ... Is ...' can be used",
          "enabled": true
        },
        {
          "shortName": "SuppressNullableWarningExpressionAsInvertedIsExpression",
          "displayName": "Nullable warning suppression operator might be confused with inverted 'is' expression",
          "enabled": true
        },
        {
          "shortName": "CollectionNeverQueried.Global",
          "displayName": "Collection content is never queried (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "AnnotationConflictInHierarchy",
          "displayName": "Annotation conflict in hierarchy",
          "enabled": true
        },
        {
          "shortName": "Mvc.InvalidModelType",
          "displayName": "MVC (mismatch Model Type)",
          "enabled": true
        },
        {
          "shortName": "IsExpressionAlwaysTrue",
          "displayName": "The given expression of 'is' operator is always of the provided type",
          "enabled": true
        },
        {
          "shortName": "CppPrintfMissedArg",
          "displayName": "Not enough arguments in a call to printf",
          "enabled": true
        },
        {
          "shortName": "AccessToModifiedClosure",
          "displayName": "Access to modified captured variable",
          "enabled": true
        },
        {
          "shortName": "PossibleUnintendedLinearSearchInSet",
          "displayName": "Possibly unintended linear search in set",
          "enabled": true
        },
        {
          "shortName": "CppEntityAssignedButNoRead",
          "displayName": "Declarator is only assigned but never accessed",
          "enabled": true
        },
        {
          "shortName": "DefaultValueAttributeForOptionalParameter",
          "displayName": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value",
          "enabled": true
        },
        {
          "shortName": "UnusedAutoPropertyAccessor.Global",
          "displayName": "Auto-property accessor is never used (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "Mvc.ViewComponentNotResolved",
          "displayName": "MVC (unknown view component)",
          "enabled": true
        },
        {
          "shortName": "OtherTagsInsideUnclosedScript",
          "displayName": "Script tag errors (unclosed <script> with other tags inside)",
          "enabled": true
        },
        {
          "shortName": "Html.AttributeNotResolved",
          "displayName": "Unknown attribute",
          "enabled": true
        },
        {
          "shortName": "StructuredMessageTemplateProblem",
          "displayName": "Structured message template problems",
          "enabled": true
        },
        {
          "shortName": "Mvc.ControllerNotResolved",
          "displayName": "MVC (unknown controller)",
          "enabled": true
        },
        {
          "shortName": "NegativeIndex",
          "displayName": "Possible 'System.ArgumentOutOfRangeException'. Index must be a non-negative integer.",
          "enabled": true
        },
        {
          "shortName": "Asp.CustomPageParserFilterType",
          "displayName": "Unsupported pageParserFilterType",
          "enabled": true
        },
        {
          "shortName": "NotResolvedInText",
          "displayName": "Cannot resolve symbol in text argument",
          "enabled": true
        },
        {
          "shortName": "Asp.Entity",
          "displayName": "Unknown HTML entity",
          "enabled": true
        },
        {
          "shortName": "PossibleWriteToMe",
          "displayName": "Possible write to 'Me'",
          "enabled": true
        },
        {
          "shortName": "ByRefArgumentIsVolatileField",
          "displayName": "Captured reference to 'volatile' field will not be treated as 'volatile'",
          "enabled": true
        },
        {
          "shortName": "OlTagContainsNonLiElements",
          "displayName": "Elements not allowed in context (<ol> contains elements other than <li> or <li> is unclosed)",
          "enabled": true
        },
        {
          "shortName": "CppAbstractVirtualFunctionCallInCtor",
          "displayName": "Call to a virtual function inside a constructor/destructor will result in a pure virtual function call",
          "enabled": true
        },
        {
          "shortName": "InvalidValueType",
          "displayName": "Resource value type is invalid",
          "enabled": true
        },
        {
          "shortName": "TryCastAlwaysSucceeds",
          "displayName": "Safe cast expression always succeeds",
          "enabled": true
        },
        {
          "shortName": "GenericEnumeratorNotDisposed",
          "displayName": "Instance of IEnumerator is never disposed",
          "enabled": true
        },
        {
          "shortName": "PossibleInvalidCastException",
          "displayName": "Possible 'System.InvalidCastException'",
          "enabled": true
        },
        {
          "shortName": "CppDereferenceOperatorLimitExceeded",
          "displayName": "Dereference operator limit is exceeded",
          "enabled": true
        },
        {
          "shortName": "IteratorNeverReturns",
          "displayName": "Iterator never returns",
          "enabled": true
        },
        {
          "shortName": "PossiblyMistakenUseOfInterpolatedStringInsert",
          "displayName": "Possibly unintended string interpolation instead of format string template",
          "enabled": true
        },
        {
          "shortName": "LongLiteralEndingLowerL",
          "displayName": "The 'l' suffix is easily confused with the digit '1'",
          "enabled": true
        },
        {
          "shortName": "UnclosedScript",
          "displayName": "Script tag errors (unclosed <script>)",
          "enabled": true
        },
        {
          "shortName": "CppDefaultedSpecialMemberFunctionIsImplicitlyDeleted",
          "displayName": "Defaulted special member function is implicitly deleted",
          "enabled": true
        },
        {
          "shortName": "Mvc.ViewComponentViewNotResolved",
          "displayName": "MVC (unknown view component view)",
          "enabled": true
        },
        {
          "shortName": "CppPossiblyUnintendedObjectSlicing",
          "displayName": "Possibly unintended object slicing",
          "enabled": true
        },
        {
          "shortName": "CppUnsignedZeroComparison",
          "displayName": "Comparison of unsigned expression with 0",
          "enabled": true
        },
        {
          "shortName": "BaseObjectEqualsIsObjectEquals",
          "displayName": "Call to 'base.Equals(...)' is reference equality",
          "enabled": true
        },
        {
          "shortName": "CppExpressionWithoutSideEffects",
          "displayName": "Possibly erroneous expression without side-effects",
          "enabled": true
        },
        {
          "shortName": "SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault",
          "displayName": "Some values of the enum are not processed inside 'switch' expression and are handled via exception in default arm",
          "enabled": true
        },
        {
          "shortName": "AccessToForEachVariableInClosure",
          "displayName": "Access to foreach variable in closure",
          "enabled": true
        },
        {
          "shortName": "PossibleLossOfFraction",
          "displayName": "Possible loss of fraction",
          "enabled": true
        },
        {
          "shortName": "ShiftExpressionRightOperandNotEqualRealCount",
          "displayName": "Suspicious shift count for this type of left operand",
          "enabled": true
        },
        {
          "shortName": "UnassignedField.Local",
          "displayName": "Unassigned field (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "NonConstantEqualityExpressionHasConstantResult",
          "displayName": "According to values of the bit masks, expression result will always be the same",
          "enabled": true
        },
        {
          "shortName": "PureAttributeOnVoidMethod",
          "displayName": "'void' method is annotated by [Pure] attribute",
          "enabled": true
        },
        {
          "shortName": "PatternNeverMatches",
          "displayName": "The source expression never matches the provided pattern",
          "enabled": true
        },
        {
          "shortName": "Xaml.LanguageLevel",
          "displayName": "XAML language level error",
          "enabled": true
        },
        {
          "shortName": "CppDependentTypeWithoutTypenameKeyword",
          "displayName": "Dependent type without 'typename' keyword",
          "enabled": true
        }
      ]
    },
    {
      "name": "Clang Diagnostics",
      "inspections": [
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14CompatPedantic",
          "displayName": "c++98-c++11-c++14-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumConversion",
          "displayName": "enum-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompareDistinctPointerTypes",
          "displayName": "compare-distinct-pointer-types clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreOpenmp51Compat",
          "displayName": "pre-openmp-51-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatiblePointerTypes",
          "displayName": "incompatible-pointer-types clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInitializerOverrides",
          "displayName": "initializer-overrides clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStdlibcxxNotFound",
          "displayName": "stdlibcxx-not-found clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalUnsignedEnumZeroCompare",
          "displayName": "tautological-unsigned-enum-zero-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTargetClonesMixedSpecifiers",
          "displayName": "target-clones-mixed-specifiers clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftExists",
          "displayName": "microsoft-exists clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11CompatPedantic",
          "displayName": "c++98-c++11-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredPragmaIntrinsic",
          "displayName": "ignored-pragma-intrinsic clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVarargs",
          "displayName": "varargs clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerArith",
          "displayName": "pointer-arith clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMaxUnsignedZero",
          "displayName": "max-unsigned-zero clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSpirvCompat",
          "displayName": "spirv-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitConstIntFloatConversion",
          "displayName": "implicit-const-int-float-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowUncapturedLocal",
          "displayName": "shadow-uncaptured-local clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuComplexInteger",
          "displayName": "gnu-complex-integer clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeallocInCategory",
          "displayName": "dealloc-in-category clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20Compat",
          "displayName": "c++20-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeleteIncomplete",
          "displayName": "delete-incomplete clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyAnalysis",
          "displayName": "thread-safety-analysis clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14CompatPedantic",
          "displayName": "c++14-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMacroRedefined",
          "displayName": "macro-redefined clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRetainedLanguageLinkage",
          "displayName": "retained-language-linkage clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticKeywordMacro",
          "displayName": "keyword-macro clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReadonlyIboutletProperty",
          "displayName": "readonly-iboutlet-property clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGccCompat",
          "displayName": "gcc-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMemsizeComparison",
          "displayName": "memsize-comparison clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBackslashNewlineEscape",
          "displayName": "backslash-newline-escape clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmp51Extensions",
          "displayName": "openmp-51-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStrictPrototypes",
          "displayName": "strict-prototypes clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReceiverExpr",
          "displayName": "receiver-expr clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStrictSelectorMatch",
          "displayName": "strict-selector-match clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullableToNonnullConversion",
          "displayName": "nullable-to-nonnull-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftCommentPaste",
          "displayName": "microsoft-comment-paste clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Compat",
          "displayName": "c++98-c++11-c++14-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp14CompatPedantic",
          "displayName": "pre-c++14-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedCopy",
          "displayName": "deprecated-copy-with-user-provided-copy clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicAccess",
          "displayName": "atomic-access clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalTypeLimitCompare",
          "displayName": "tautological-type-limit-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftUnionMemberReference",
          "displayName": "microsoft-union-member-reference clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonModularIncludeInModule",
          "displayName": "non-modular-include-in-module clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleMsStruct",
          "displayName": "incompatible-ms-struct clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerIntegerCompare",
          "displayName": "pointer-integer-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConceptsTsCompat",
          "displayName": "concepts-ts-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaClangAttribute",
          "displayName": "pragma-clang-attribute clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExternInitializer",
          "displayName": "extern-initializer clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDirectIvarAccess",
          "displayName": "direct-ivar-access clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedRegister",
          "displayName": "deprecated-register clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMismatchedNewDelete",
          "displayName": "mismatched-new-delete clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedTargetOpt",
          "displayName": "unsupported-target-opt clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalConstantInRangeCompare",
          "displayName": "tautological-constant-in-range-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownEscapeSequence",
          "displayName": "unknown-escape-sequence clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatSecurity",
          "displayName": "format-security clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPessimizingMove",
          "displayName": "pessimizing-move clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleFunctionPointerTypes",
          "displayName": "incompatible-function-pointer-types clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeleteNonAbstractNonVirtualDtor",
          "displayName": "delete-non-abstract-non-virtual-dtor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefPrefix",
          "displayName": "undef-prefix clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDllexportExplicitInstantiationDecl",
          "displayName": "dllexport-explicit-instantiation-decl clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFourCharConstants",
          "displayName": "four-char-constants clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuPointerArith",
          "displayName": "gnu-pointer-arith clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidPpToken",
          "displayName": "invalid-pp-token clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuBinaryLiteral",
          "displayName": "gnu-binary-literal clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnneededInternalDeclaration",
          "displayName": "unneeded-internal-declaration clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDangling",
          "displayName": "dangling clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWeakVtables",
          "displayName": "weak-vtables clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingNoreturn",
          "displayName": "missing-noreturn clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedButSetParameter",
          "displayName": "unused-but-set-parameter clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowFieldInConstructorModified",
          "displayName": "shadow-field-in-constructor-modified clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonportableSystemIncludePath",
          "displayName": "nonportable-system-include-path clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaOnceOutsideHeader",
          "displayName": "pragma-once-outside-header clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicAlignment",
          "displayName": "atomic-alignment clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingExceptionSpec",
          "displayName": "missing-exception-spec clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPoisonSystemDirectories",
          "displayName": "poison-system-directories clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedLambdaCapture",
          "displayName": "unused-lambda-capture clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormat",
          "displayName": "format clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredReferenceQualifiers",
          "displayName": "ignored-reference-qualifiers clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUsedButMarkedUnused",
          "displayName": "used-but-marked-unused clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverloadedShiftOpParentheses",
          "displayName": "overloaded-shift-op-parentheses clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonModularIncludeInFrameworkModule",
          "displayName": "non-modular-include-in-framework-module clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDefaultedFunctionDeleted",
          "displayName": "defaulted-function-deleted clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOutOfScopeFunction",
          "displayName": "out-of-scope-function clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModuleConflict",
          "displayName": "module-conflict clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConfigMacros",
          "displayName": "config-macros clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentationUnknownCommand",
          "displayName": "documentation-unknown-command clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateMethodArg",
          "displayName": "duplicate-method-arg clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRegister",
          "displayName": "register clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuConditionalOmittedOperand",
          "displayName": "gnu-conditional-omitted-operand clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticClassVarargs",
          "displayName": "class-varargs clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastFunctionType",
          "displayName": "cast-function-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingPrototypes",
          "displayName": "missing-prototypes clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftTemplate",
          "displayName": "microsoft-template clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsequenced",
          "displayName": "unsequenced clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateDeclSpecifier",
          "displayName": "duplicate-decl-specifier clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIndependentClassAttribute",
          "displayName": "IndependentClass-attribute clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSignedEnumBitfield",
          "displayName": "signed-enum-bitfield clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftSignOverflow",
          "displayName": "shift-sign-overflow clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowFieldInConstructor",
          "displayName": "shadow-field-in-constructor clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaPack",
          "displayName": "pragma-pack clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedType",
          "displayName": "deprecated-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringConversion",
          "displayName": "string-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedDeclarations",
          "displayName": "deprecated-declarations clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeLoopIncrement",
          "displayName": "unreachable-code-loop-increment clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuIncludeNext",
          "displayName": "gnu-include-next clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmbeddedDirective",
          "displayName": "embedded-directive clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMalformedWarningCheck",
          "displayName": "malformed-warning-check clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedAltivecSrcCompat",
          "displayName": "deprecated-altivec-src-compat clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExtraSemiStmt",
          "displayName": "extra-semi-stmt clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedConstVariable",
          "displayName": "unused-const-variable clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDllAttributeOnRedeclaration",
          "displayName": "dll-attribute-on-redeclaration clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcPerformSelectorLeaks",
          "displayName": "arc-performSelector-leaks clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAnonEnumEnumConversion",
          "displayName": "anon-enum-enum-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteUmbrella",
          "displayName": "incomplete-umbrella clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCopy",
          "displayName": "deprecated-copy clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDelegatingCtorCycles",
          "displayName": "delegating-ctor-cycles clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompoundTokenSplitBySpace",
          "displayName": "compound-token-split-by-space clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAbstractFinalClass",
          "displayName": "abstract-final-class clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLiteralRange",
          "displayName": "literal-range clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticQualifiedVoidReturnType",
          "displayName": "qualified-void-return-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticFloatInit",
          "displayName": "static-float-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftMutableReference",
          "displayName": "microsoft-mutable-reference clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRewriteNotBool",
          "displayName": "rewrite-not-bool clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticKeywordCompat",
          "displayName": "keyword-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntegerOverflow",
          "displayName": "integer-overflow clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentationDeprecatedSync",
          "displayName": "documentation-deprecated-sync clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExpansionToDefined",
          "displayName": "expansion-to-defined clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDllimportStaticFieldDef",
          "displayName": "dllimport-static-field-def clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExportUsingDirective",
          "displayName": "export-using-directive clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Compat",
          "displayName": "c++98-c++11-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeBreak",
          "displayName": "unreachable-code-break clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidConstexpr",
          "displayName": "invalid-constexpr clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp2bCompat",
          "displayName": "pre-c++2b-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingDeclarations",
          "displayName": "missing-declarations clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCtadMaybeUnsupported",
          "displayName": "ctad-maybe-unsupported clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInlineAsm",
          "displayName": "inline-asm clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcRetainCycles",
          "displayName": "arc-retain-cycles clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticXorUsedAsPow",
          "displayName": "xor-used-as-pow clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftRedeclareStatic",
          "displayName": "microsoft-redeclare-static clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonPowerOfTwoAlignment",
          "displayName": "non-power-of-two-alignment clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDoublePromotion",
          "displayName": "double-promotion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReorderCtor",
          "displayName": "reorder-ctor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedStaticAnalyzerFlag",
          "displayName": "deprecated-static-analyzer-flag clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowField",
          "displayName": "shadow-field clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExtraQualification",
          "displayName": "extra-qualification clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAutoStorageClass",
          "displayName": "auto-storage-class clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteModule",
          "displayName": "incomplete-module clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuStaticFloatInit",
          "displayName": "gnu-static-float-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAssume",
          "displayName": "assume clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatUnnamedTypeTemplateArgs",
          "displayName": "c++98-compat-unnamed-type-template-args clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20CompatPedantic",
          "displayName": "c++20-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPadded",
          "displayName": "padded clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLanguageExtensionToken",
          "displayName": "language-extension-token clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedButSetVariable",
          "displayName": "unused-but-set-variable clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalObjcBoolCompare",
          "displayName": "tautological-objc-bool-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMisspelledAssumption",
          "displayName": "misspelled-assumption clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftStaticAssert",
          "displayName": "microsoft-static-assert clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastQual",
          "displayName": "cast-qual clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11Compat",
          "displayName": "c++11-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftEnumValue",
          "displayName": "microsoft-enum-value clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShorten64To32",
          "displayName": "shorten-64-to-32 clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticParenthesesEquality",
          "displayName": "parentheses-equality clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelfAssignField",
          "displayName": "self-assign-field clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConditionalTypeMismatch",
          "displayName": "conditional-type-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGlobalConstructors",
          "displayName": "global-constructors clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReservedMacroIdentifier",
          "displayName": "reserved-macro-identifier clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedEnumFloatConversion",
          "displayName": "deprecated-enum-float-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRangeLoopBindReference",
          "displayName": "range-loop-bind-reference clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverridingMethodMismatch",
          "displayName": "overriding-method-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedFriend",
          "displayName": "unsupported-friend clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumTooLarge",
          "displayName": "enum-too-large clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProfileInstrUnprofiled",
          "displayName": "profile-instr-unprofiled clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAutoVarId",
          "displayName": "auto-var-id clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModuleFileExtension",
          "displayName": "module-file-extension clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedMemberFunction",
          "displayName": "unused-member-function clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExtraTokens",
          "displayName": "extra-tokens clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAixCompat",
          "displayName": "aix-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverridingTOption",
          "displayName": "overriding-t-option clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastOfSelType",
          "displayName": "cast-of-sel-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringPlusInt",
          "displayName": "string-plus-int clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMultichar",
          "displayName": "multichar clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidOffsetof",
          "displayName": "invalid-offsetof clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPrivateExtern",
          "displayName": "private-extern clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticLocalInInline",
          "displayName": "static-local-in-inline clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcNonPodMemaccess",
          "displayName": "arc-non-pod-memaccess clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11InlineNamespace",
          "displayName": "c++11-inline-namespace clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalBitwiseCompare",
          "displayName": "tautological-bitwise-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullPointerSubtraction",
          "displayName": "null-pointer-subtraction clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownPragmas",
          "displayName": "unknown-pragmas clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDisabledMacroExpansion",
          "displayName": "disabled-macro-expansion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatiblePropertyType",
          "displayName": "incompatible-property-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullConversion",
          "displayName": "null-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPedanticCoreFeatures",
          "displayName": "pedantic-core-features clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVexingParse",
          "displayName": "vexing-parse clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRangeLoopConstruct",
          "displayName": "range-loop-construct clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedObjcIsaUsage",
          "displayName": "deprecated-objc-isa-usage clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArgumentOutsideRange",
          "displayName": "argument-outside-range clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSentinel",
          "displayName": "sentinel clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelfAssign",
          "displayName": "self-assign clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuStatementExpression",
          "displayName": "gnu-statement-expression clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSuperClassMethodMismatch",
          "displayName": "super-class-method-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDanglingField",
          "displayName": "dangling-field clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAvailability",
          "displayName": "availability clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConversion",
          "displayName": "conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentationPedantic",
          "displayName": "documentation-pedantic clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntConversion",
          "displayName": "int-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuDesignator",
          "displayName": "gnu-designator clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalOverlapCompare",
          "displayName": "tautological-overlap-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProtocolPropertySynthesisAmbiguity",
          "displayName": "protocol-property-synthesis-ambiguity clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownAttributes",
          "displayName": "unknown-attributes clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFortifySource",
          "displayName": "fortify-source clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncrementBool",
          "displayName": "increment-bool clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedComparison",
          "displayName": "unused-comparison clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReturnStdMove",
          "displayName": "return-std-move clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUserDefinedWarnings",
          "displayName": "user-defined-warnings clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17Extensions",
          "displayName": "c++17-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReturnTypeCLinkage",
          "displayName": "return-type-c-linkage clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17Compat",
          "displayName": "c++17-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreC2xCompatPedantic",
          "displayName": "pre-c2x-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWeakTemplateVtables",
          "displayName": "weak-template-vtables clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCallToPureVirtualFromCtorDtor",
          "displayName": "call-to-pure-virtual-from-ctor-dtor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14AttributeExtensions",
          "displayName": "c++14-attribute-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadowIvar",
          "displayName": "shadow-ivar clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatPedantic",
          "displayName": "format-pedantic clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInconsistentMissingDestructorOverride",
          "displayName": "inconsistent-missing-destructor-override clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmas",
          "displayName": "pragmas clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTypenameMissing",
          "displayName": "typename-missing clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyVerbose",
          "displayName": "thread-safety-verbose clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndeclaredSelector",
          "displayName": "undeclared-selector clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringCompare",
          "displayName": "string-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerBoolConversion",
          "displayName": "pointer-bool-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcRepeatedUseOfWeak",
          "displayName": "arc-repeated-use-of-weak clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArrayParameter",
          "displayName": "array-parameter clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullPointerArithmetic",
          "displayName": "null-pointer-arithmetic clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTentativeDefinitionIncompleteType",
          "displayName": "tentative-definition-incomplete-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatiblePointerTypesDiscardsQualifiers",
          "displayName": "incompatible-pointer-types-discards-qualifiers clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFloatConversion",
          "displayName": "implicit-float-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftCountNegative",
          "displayName": "shift-count-negative clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyPrecise",
          "displayName": "thread-safety-precise clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedVolatile",
          "displayName": "deprecated-volatile clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatLocalTypeTemplateArgs",
          "displayName": "c++98-compat-local-type-template-args clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftPureDefinition",
          "displayName": "microsoft-pure-definition clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProfileInstrMissing",
          "displayName": "profile-instr-missing clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitAtomicProperties",
          "displayName": "implicit-atomic-properties clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRequiresSuperAttribute",
          "displayName": "requires-super-attribute clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRedundantParens",
          "displayName": "redundant-parens clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticHeaderGuard",
          "displayName": "header-guard clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedParameter",
          "displayName": "unused-parameter clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCoroutine",
          "displayName": "deprecated-coroutine clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBlockCaptureAutoreleasing",
          "displayName": "block-capture-autoreleasing clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospection",
          "displayName": "deprecated-objc-pointer-introspection clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSemicolonBeforeMethodBody",
          "displayName": "semicolon-before-method-body clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumCompareSwitch",
          "displayName": "enum-compare-switch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedPrivateField",
          "displayName": "unused-private-field clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnicodeWhitespace",
          "displayName": "unicode-whitespace clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaPackSuspiciousInclude",
          "displayName": "pragma-pack-suspicious-include clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Compat",
          "displayName": "c++98-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuCaseRange",
          "displayName": "gnu-case-range clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtimportInFrameworkHeader",
          "displayName": "atimport-in-framework-header clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingBraces",
          "displayName": "missing-braces clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedBoolConversion",
          "displayName": "undefined-bool-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticParentheses",
          "displayName": "parentheses clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBuiltinMacroRedefined",
          "displayName": "builtin-macro-redefined clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSpirCompat",
          "displayName": "spir-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSlhAsmGoto",
          "displayName": "slh-asm-goto clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteFrameworkModuleDeclaration",
          "displayName": "incomplete-framework-module-declaration clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnqualifiedStdCastCall",
          "displayName": "unqualified-std-cast-call clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVoidPointerToEnumCast",
          "displayName": "void-pointer-to-enum-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastCallingConvention",
          "displayName": "cast-calling-convention clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTrigraphs",
          "displayName": "trigraphs clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedFuncTemplate",
          "displayName": "undefined-func-template clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFrameLargerThan",
          "displayName": "frame-larger-than clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftEndOfFile",
          "displayName": "microsoft-end-of-file clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmpLoopForm",
          "displayName": "openmp-loop-form clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPrivateModule",
          "displayName": "private-module clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLocalTypeTemplateArgs",
          "displayName": "local-type-template-args clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuAlignofExpression",
          "displayName": "gnu-alignof-expression clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftCast",
          "displayName": "microsoft-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNsreturnsMismatch",
          "displayName": "nsreturns-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicMemoryOrdering",
          "displayName": "atomic-memory-ordering clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecated",
          "displayName": "deprecated clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftGoto",
          "displayName": "microsoft-goto clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticComplexComponentInit",
          "displayName": "complex-component-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStrlcpyStrlcatSize",
          "displayName": "strlcpy-strlcat-size clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSometimesUninitialized",
          "displayName": "sometimes-uninitialized clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMsvcNotFound",
          "displayName": "msvc-not-found clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedTemplate",
          "displayName": "unused-template clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticError",
          "displayName": "Clang compiler error",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModulesImportNestedRedundant",
          "displayName": "modules-import-nested-redundant clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAttributePackedForBitfield",
          "displayName": "attribute-packed-for-bitfield clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedLocalTypedef",
          "displayName": "unused-local-typedef clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11CompatReservedUserDefinedLiteral",
          "displayName": "c++11-compat-reserved-user-defined-literal clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProtocol",
          "displayName": "protocol clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPchDateTime",
          "displayName": "pch-date-time clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRedundantConstevalIf",
          "displayName": "redundant-consteval-if clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonCTypedefForLinkage",
          "displayName": "non-c-typedef-for-linkage clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuRedeclaredEnum",
          "displayName": "gnu-redeclared-enum clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCxxAttributeExtension",
          "displayName": "cxx-attribute-extension clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedEnumEnumConversion",
          "displayName": "deprecated-enum-enum-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRedundantMove",
          "displayName": "redundant-move clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNestedAnonTypes",
          "displayName": "nested-anon-types clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatPedantic",
          "displayName": "c++98-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitIntConversion",
          "displayName": "implicit-int-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuAnonymousStruct",
          "displayName": "gnu-anonymous-struct clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftConstInit",
          "displayName": "microsoft-const-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVoidPointerToIntCast",
          "displayName": "void-pointer-to-int-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelectorTypeMismatch",
          "displayName": "selector-type-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuEmptyInitializer",
          "displayName": "gnu-empty-initializer clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftEnumForwardReference",
          "displayName": "microsoft-enum-forward-reference clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBadFunctionCast",
          "displayName": "bad-function-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidSourceEncoding",
          "displayName": "invalid-source-encoding clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGpuMaybeWrongSide",
          "displayName": "gpu-maybe-wrong-side clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticClassConversion",
          "displayName": "class-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSlashUFilename",
          "displayName": "slash-u-filename clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSection",
          "displayName": "section clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp20Compat",
          "displayName": "pre-c++20-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp17Compat",
          "displayName": "pre-c++17-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftDefaultArgRedefinition",
          "displayName": "microsoft-default-arg-redefinition clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRedeclaredClassMember",
          "displayName": "redeclared-class-member clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReinterpretBaseClass",
          "displayName": "reinterpret-base-class clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidIosDeploymentTarget",
          "displayName": "invalid-ios-deployment-target clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmpMapping",
          "displayName": "openmp-mapping clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInconsistentDllimport",
          "displayName": "inconsistent-dllimport clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCharSubscripts",
          "displayName": "char-subscripts clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedInline",
          "displayName": "undefined-inline clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonportableIncludePath",
          "displayName": "nonportable-include-path clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverrideInit",
          "displayName": "override-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAllocaWithAlignAlignof",
          "displayName": "alloca-with-align-alignof clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuInlineCppWithoutExtern",
          "displayName": "gnu-inline-cpp-without-extern clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnalignedQualifierImplicitCast",
          "displayName": "unaligned-qualifier-implicit-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVariadicMacros",
          "displayName": "variadic-macros clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAlloca",
          "displayName": "alloca clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedNan",
          "displayName": "unsupported-nan clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticQuotedIncludeInFrameworkHeader",
          "displayName": "quoted-include-in-framework-header clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuLabelAsValue",
          "displayName": "gnu-label-as-value clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonPodVarargs",
          "displayName": "non-pod-varargs clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticManyBracesAroundScalarInit",
          "displayName": "many-braces-around-scalar-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedDtor",
          "displayName": "deprecated-copy-with-user-provided-dtor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuEmptyStruct",
          "displayName": "gnu-empty-struct clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalConstantOutOfRangeCompare",
          "displayName": "tautological-constant-out-of-range-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncludeNextAbsolutePath",
          "displayName": "include-next-absolute-path clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17CompatPedantic",
          "displayName": "c++98-c++11-c++14-c++17-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaMessages",
          "displayName": "#pragma-messages clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredAvailabilityWithoutSdkSettings",
          "displayName": "ignored-availability-without-sdk-settings clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNoderef",
          "displayName": "noderef clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20Designator",
          "displayName": "c++20-designator clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicPropertyWithUserDefinedAccessor",
          "displayName": "atomic-property-with-user-defined-accessor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntInBoolContext",
          "displayName": "int-in-bool-context clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWritableStrings",
          "displayName": "writable-strings clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConditionalUninitialized",
          "displayName": "conditional-uninitialized clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCommaSubscript",
          "displayName": "deprecated-comma-subscript clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticInInline",
          "displayName": "static-in-inline clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidNoBuiltinNames",
          "displayName": "invalid-no-builtin-names clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatTypeConfusion",
          "displayName": "format-type-confusion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitfieldWidth",
          "displayName": "bitfield-width clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleSysroot",
          "displayName": "incompatible-sysroot clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftOpParentheses",
          "displayName": "shift-op-parentheses clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11LongLong",
          "displayName": "c++11-long-long clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInconsistentMissingOverride",
          "displayName": "inconsistent-missing-override clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateProtocol",
          "displayName": "duplicate-protocol clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMismatchedTags",
          "displayName": "mismatched-tags clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidPartialSpecialization",
          "displayName": "invalid-partial-specialization clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReservedIdentifier",
          "displayName": "reserved-identifier clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFrameAddress",
          "displayName": "frame-address clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticProfileInstrOutOfDate",
          "displayName": "profile-instr-out-of-date clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftInaccessibleBase",
          "displayName": "microsoft-inaccessible-base clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBracedScalarInit",
          "displayName": "braced-scalar-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDanglingElse",
          "displayName": "dangling-else clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalUnsignedCharZeroCompare",
          "displayName": "tautological-unsigned-char-zero-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtProtocol",
          "displayName": "at-protocol clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOutOfLineDeclaration",
          "displayName": "out-of-line-declaration clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17AttributeExtensions",
          "displayName": "c++17-attribute-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyBeta",
          "displayName": "thread-safety-beta clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatInvalidSpecifier",
          "displayName": "format-invalid-specifier clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverlengthStrings",
          "displayName": "overlength-strings clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArrayBoundsPointerArithmetic",
          "displayName": "array-bounds-pointer-arithmetic clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuFlexibleArrayUnionMember",
          "displayName": "gnu-flexible-array-union-member clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingMethodReturnType",
          "displayName": "missing-method-return-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFlagEnum",
          "displayName": "flag-enum clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityDeclspec",
          "displayName": "nullability-declspec clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftExplicitConstructorCall",
          "displayName": "microsoft-explicit-constructor-call clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOldStyleCast",
          "displayName": "old-style-cast clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUserDefinedLiterals",
          "displayName": "user-defined-literals clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedDllBaseClassTemplate",
          "displayName": "unsupported-dll-base-class-template clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedReinterpretCast",
          "displayName": "undefined-reinterpret-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnicodeHomoglyph",
          "displayName": "unicode-homoglyph clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticComma",
          "displayName": "comma clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousMacro",
          "displayName": "ambiguous-macro clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC99Compat",
          "displayName": "c99-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftUsingDecl",
          "displayName": "microsoft-using-decl clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUninitialized",
          "displayName": "uninitialized clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPacked",
          "displayName": "packed clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDelimitedEscapeSequenceExtension",
          "displayName": "delimited-escape-sequence-extension clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMaxTokens",
          "displayName": "max-tokens clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModuleFileConfigMismatch",
          "displayName": "module-file-config-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVoidPtrDereference",
          "displayName": "void-ptr-dereference clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInlineNewDelete",
          "displayName": "inline-new-delete clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInaccessibleBase",
          "displayName": "inaccessible-base clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityCompleteness",
          "displayName": "nullability-completeness clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcMaybeRepeatedUseOfWeak",
          "displayName": "arc-maybe-repeated-use-of-weak clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnneededMemberFunction",
          "displayName": "unneeded-member-function clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExplicitOwnershipType",
          "displayName": "explicit-ownership-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuArrayMemberParenInit",
          "displayName": "gnu-array-member-paren-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompoundTokenSplit",
          "displayName": "compound-token-split clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousMemberTemplate",
          "displayName": "ambiguous-member-template clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModulesAmbiguousInternalLinkage",
          "displayName": "modules-ambiguous-internal-linkage clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullArithmetic",
          "displayName": "null-arithmetic clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftAbstract",
          "displayName": "microsoft-abstract clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftExtraQualification",
          "displayName": "microsoft-extra-qualification clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumCompare",
          "displayName": "enum-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFreeNonheapObject",
          "displayName": "free-nonheap-object clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp17CompatPedantic",
          "displayName": "pre-c++17-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExitTimeDestructors",
          "displayName": "exit-time-destructors clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDebugCompressionUnavailable",
          "displayName": "debug-compression-unavailable clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEncodeType",
          "displayName": "encode-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuStringLiteralOperatorTemplate",
          "displayName": "gnu-string-literal-operator-template clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuUnionCast",
          "displayName": "gnu-union-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmptyInitStmt",
          "displayName": "empty-init-stmt clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnguardedAvailability",
          "displayName": "unguarded-availability clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNewlineEof",
          "displayName": "newline-eof clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalUndefinedCompare",
          "displayName": "tautological-undefined-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalUnsignedZeroCompare",
          "displayName": "tautological-unsigned-zero-compare clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAttributeWarning",
          "displayName": "attribute-warning clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFunctionDefInObjcContainer",
          "displayName": "function-def-in-objc-container clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCtu",
          "displayName": "ctu clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUninitializedConstReference",
          "displayName": "uninitialized-const-reference clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLinkerWarnings",
          "displayName": "linker-warnings clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPredefinedIdentifierOutsideFunction",
          "displayName": "predefined-identifier-outside-function clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcUnsafeRetainedAssign",
          "displayName": "arc-unsafe-retained-assign clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC11Extensions",
          "displayName": "c11-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullCharacter",
          "displayName": "null-character clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalCompare",
          "displayName": "tautological-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticModuleImportInExternC",
          "displayName": "module-import-in-extern-c clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCFStringLiteral",
          "displayName": "CFString-literal clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticZeroLengthArray",
          "displayName": "zero-length-array clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMismatchedReturnTypes",
          "displayName": "mismatched-return-types clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIdiomaticParentheses",
          "displayName": "idiomatic-parentheses clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLargeByValueCopy",
          "displayName": "large-by-value-copy clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnevaluatedExpression",
          "displayName": "unevaluated-expression clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAnalyzerIncompatiblePlugin",
          "displayName": "analyzer-incompatible-plugin clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPropertyAccessDotSyntax",
          "displayName": "property-access-dot-syntax clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticHipOnly",
          "displayName": "hip-only clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSwitchBool",
          "displayName": "switch-bool clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitwiseInsteadOfLogical",
          "displayName": "bitwise-instead-of-logical clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPedanticMacros",
          "displayName": "pedantic-macros clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidUtf8",
          "displayName": "invalid-utf8 clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedLabel",
          "displayName": "unused-label clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImportPreprocessorDirectivePedantic",
          "displayName": "import-preprocessor-directive-pedantic clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConstantConversion",
          "displayName": "constant-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExternCCompat",
          "displayName": "extern-c-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnguardedAvailabilityNew",
          "displayName": "unguarded-availability-new clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedInternalType",
          "displayName": "undefined-internal-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredAttributes",
          "displayName": "ignored-attributes clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonVirtualDtor",
          "displayName": "non-virtual-dtor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFixedPointOverflow",
          "displayName": "fixed-point-overflow clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingSysroot",
          "displayName": "missing-sysroot clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedExperimentalCoroutine",
          "displayName": "deprecated-experimental-coroutine clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11CompatPedantic",
          "displayName": "c++11-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReservedUserDefinedLiteral",
          "displayName": "reserved-user-defined-literal clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitwiseOpParentheses",
          "displayName": "bitwise-op-parentheses clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWasmExceptionSpec",
          "displayName": "wasm-exception-spec clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExtraSemi",
          "displayName": "extra-semi clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMismatchedParameterTypes",
          "displayName": "mismatched-parameter-types clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverloadedVirtual",
          "displayName": "overloaded-virtual clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticSelfInit",
          "displayName": "static-self-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMemsetTransposedArgs",
          "displayName": "memset-transposed-args clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofArrayDiv",
          "displayName": "sizeof-array-div clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelfAssignOverloaded",
          "displayName": "self-assign-overloaded clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteSetjmpDeclaration",
          "displayName": "incomplete-setjmp-declaration clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSignConversion",
          "displayName": "sign-conversion clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitRetainSelf",
          "displayName": "implicit-retain-self clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeFallthrough",
          "displayName": "unreachable-code-fallthrough clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFixedPointConversion",
          "displayName": "implicit-fixed-point-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityInferredOnNestedType",
          "displayName": "nullability-inferred-on-nested-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuZeroVariadicMacroArguments",
          "displayName": "gnu-zero-variadic-macro-arguments clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReservedIdMacro",
          "displayName": "reserved-id-macro clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17CompatPedantic",
          "displayName": "c++17-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalConstantCompare",
          "displayName": "tautological-constant-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAddressOfTemporary",
          "displayName": "address-of-temporary clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateMethodMatch",
          "displayName": "duplicate-method-match clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFrameworkIncludePrivateFromPublic",
          "displayName": "framework-include-private-from-public clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSuggestDestructorOverride",
          "displayName": "suggest-destructor-override clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastQualUnrelated",
          "displayName": "cast-qual-unrelated clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReceiverForwardClass",
          "displayName": "receiver-forward-class clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerSign",
          "displayName": "pointer-sign clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedMacros",
          "displayName": "unused-macros clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitIntExtension",
          "displayName": "bit-int-extension clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitfieldEnumConversion",
          "displayName": "bitfield-enum-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFunctionDeclaration",
          "displayName": "implicit-function-declaration clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCudaCompat",
          "displayName": "cuda-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmptyBody",
          "displayName": "empty-body clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreC2xCompat",
          "displayName": "pre-c2x-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidNoreturn",
          "displayName": "invalid-noreturn clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnicodeZeroWidth",
          "displayName": "unicode-zero-width clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAnonymousPackParens",
          "displayName": "anonymous-pack-parens clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeReturn",
          "displayName": "unreachable-code-return clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAutoDisableVptrSanitizer",
          "displayName": "auto-disable-vptr-sanitizer clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSignedUnsignedWchar",
          "displayName": "signed-unsigned-wchar clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedVarTemplate",
          "displayName": "undefined-var-template clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMethodSignatures",
          "displayName": "method-signatures clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFutureAttributeExtensions",
          "displayName": "future-attribute-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmptyTranslationUnit",
          "displayName": "empty-translation-unit clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArrayBounds",
          "displayName": "array-bounds clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftVoidPseudoDtor",
          "displayName": "microsoft-void-pseudo-dtor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDollarInIdentifierExtension",
          "displayName": "dollar-in-identifier-extension clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuImaginaryConstant",
          "displayName": "gnu-imaginary-constant clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedGpopt",
          "displayName": "unsupported-gpopt clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedPropertyIvar",
          "displayName": "unused-property-ivar clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftOverflow",
          "displayName": "shift-overflow clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedResult",
          "displayName": "unused-result clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentation",
          "displayName": "documentation clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14Compat",
          "displayName": "c++14-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftFixedEnum",
          "displayName": "microsoft-fixed-enum clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitfieldConstantConversion",
          "displayName": "bitfield-constant-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArgumentUndefinedBehaviour",
          "displayName": "argument-undefined-behaviour clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalValueRangeCompare",
          "displayName": "tautological-value-range-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSarifFormatUnstable",
          "displayName": "sarif-format-unstable clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAtomicImplicitSeqCst",
          "displayName": "atomic-implicit-seq-cst clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20Extensions",
          "displayName": "c++20-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCustomAtomicProperties",
          "displayName": "custom-atomic-properties clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAlignMismatch",
          "displayName": "align-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerToIntCast",
          "displayName": "pointer-to-int-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMainReturnType",
          "displayName": "main-return-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFixedEnumExtension",
          "displayName": "fixed-enum-extension clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNSObjectAttribute",
          "displayName": "NSObject-attribute clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBoolOperation",
          "displayName": "bool-operation clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncludeNextOutsideHeader",
          "displayName": "include-next-outside-header clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDuplicateEnum",
          "displayName": "duplicate-enum clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11CompatDeprecatedWritableStrings",
          "displayName": "c++11-compat-deprecated-writable-strings clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSyncFetchAndNandSemanticsChanged",
          "displayName": "sync-fetch-and-nand-semantics-changed clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedFunction",
          "displayName": "unused-function clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingPrototypeForCc",
          "displayName": "missing-prototype-for-cc clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatZeroLength",
          "displayName": "format-zero-length clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAvrRtlibLinkingQuirks",
          "displayName": "avr-rtlib-linking-quirks clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRestrictExpansion",
          "displayName": "restrict-expansion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeleteAbstractNonVirtualDtor",
          "displayName": "delete-abstract-non-virtual-dtor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11CompatBinaryLiteral",
          "displayName": "c++98-c++11-compat-binary-literal clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCastAlign",
          "displayName": "cast-align clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedVariable",
          "displayName": "unused-variable clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospectionPerformSelector",
          "displayName": "deprecated-objc-pointer-introspection-performSelector clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatBindToTemporaryCopy",
          "displayName": "c++98-compat-bind-to-temporary-copy clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofArrayArgument",
          "displayName": "sizeof-array-argument clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerTypeMismatch",
          "displayName": "pointer-type-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExportUnnamed",
          "displayName": "export-unnamed clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeclarationAfterStatement",
          "displayName": "declaration-after-statement clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedNonPrototype",
          "displayName": "deprecated-non-prototype clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftNegativeValue",
          "displayName": "shift-negative-value clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBridgeCast",
          "displayName": "bridge-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityCompletenessOnArrays",
          "displayName": "nullability-completeness-on-arrays clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStrncatSize",
          "displayName": "strncat-size clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticKnrPromotedParameter",
          "displayName": "knr-promoted-parameter clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInjectedClassName",
          "displayName": "injected-class-name clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFunctionMultiversion",
          "displayName": "function-multiversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11Narrowing",
          "displayName": "c++11-narrowing clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp2bCompatPedantic",
          "displayName": "pre-c++2b-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVectorConversion",
          "displayName": "vector-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidIboutlet",
          "displayName": "invalid-iboutlet clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnnamedTypeTemplateArgs",
          "displayName": "unnamed-type-template-args clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPedantic",
          "displayName": "pedantic clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCmseUnionLeak",
          "displayName": "cmse-union-leak clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNsconsumedMismatch",
          "displayName": "nsconsumed-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp17CompatMangling",
          "displayName": "c++17-compat-mangling clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitExceptionSpecMismatch",
          "displayName": "implicit-exception-spec-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuVariableSizedTypeNotAtEnd",
          "displayName": "gnu-variable-sized-type-not-at-end clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticForLoopAnalysis",
          "displayName": "for-loop-analysis clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBoolConversion",
          "displayName": "bool-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAlwaysInlineCoroutine",
          "displayName": "always-inline-coroutine clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownCudaVersion",
          "displayName": "unknown-cuda-version clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnicode",
          "displayName": "unicode clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMultipleMoveVbase",
          "displayName": "multiple-move-vbase clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCstringFormatDirective",
          "displayName": "cstring-format-directive clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyAttributes",
          "displayName": "thread-safety-attributes clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExceptions",
          "displayName": "exceptions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDivisionByZero",
          "displayName": "division-by-zero clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInterruptServiceRoutine",
          "displayName": "interrupt-service-routine clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingSelectorName",
          "displayName": "missing-selector-name clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFlexibleArrayExtensions",
          "displayName": "flexible-array-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDynamicExceptionSpec",
          "displayName": "dynamic-exception-spec clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofArrayDecay",
          "displayName": "sizeof-array-decay clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14Extensions",
          "displayName": "c++14-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitConversionFloatingPointToBool",
          "displayName": "implicit-conversion-floating-point-to-bool clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDateTime",
          "displayName": "date-time clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedEnumCompare",
          "displayName": "deprecated-enum-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReturnStackAddress",
          "displayName": "return-stack-address clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInstantiationAfterSpecialization",
          "displayName": "instantiation-after-specialization clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC99Extensions",
          "displayName": "c99-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPassFailed",
          "displayName": "pass-failed clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumEnumConversion",
          "displayName": "enum-enum-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSuggestOverride",
          "displayName": "suggest-override clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCoroutineMissingUnhandledException",
          "displayName": "coroutine-missing-unhandled-exception clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSwitchEnum",
          "displayName": "switch-enum clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullDereference",
          "displayName": "null-dereference clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticJumpSehFinally",
          "displayName": "jump-seh-finally clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownWarningOption",
          "displayName": "unknown-warning-option clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSourceUsesOpenmp",
          "displayName": "source-uses-openmp clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBitwiseConditionalParentheses",
          "displayName": "bitwise-conditional-parentheses clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofPointerDiv",
          "displayName": "sizeof-pointer-div clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatNonliteral",
          "displayName": "format-nonliteral clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelector",
          "displayName": "selector clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringPlusChar",
          "displayName": "string-plus-char clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShiftCountOverflow",
          "displayName": "shift-count-overflow clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCppCompat",
          "displayName": "c++-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidTokenPaste",
          "displayName": "invalid-token-paste clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11ExtraSemi",
          "displayName": "c++11-extra-semi clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonportableVectorInitialization",
          "displayName": "nonportable-vector-initialization clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftDrectveSection",
          "displayName": "microsoft-drectve-section clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDocumentationHtml",
          "displayName": "documentation-html clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSuspiciousBzero",
          "displayName": "suspicious-bzero clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVla",
          "displayName": "vla clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBuiltinRequiresHeader",
          "displayName": "builtin-requires-header clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFallthroughPerFunction",
          "displayName": "implicit-fallthrough-per-function clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDynamicClassMemaccess",
          "displayName": "dynamic-class-memaccess clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompoundTokenSplitByMacro",
          "displayName": "compound-token-split-by-macro clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNewReturnsNull",
          "displayName": "new-returns-null clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedVolatileLvalue",
          "displayName": "unused-volatile-lvalue clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedAvailabilityGuard",
          "displayName": "unsupported-availability-guard clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedCb",
          "displayName": "unsupported-cb clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBuiltinMemcpyChkSize",
          "displayName": "builtin-memcpy-chk-size clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExplicitInitializeCall",
          "displayName": "explicit-initialize-call clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuFlexibleArrayInitializer",
          "displayName": "gnu-flexible-array-initializer clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndefinedInternal",
          "displayName": "undefined-internal clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPropertyAttributeMismatch",
          "displayName": "property-attribute-mismatch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC2xExtensions",
          "displayName": "c2x-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticShadow",
          "displayName": "shadow clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverAligned",
          "displayName": "over-aligned clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnderalignedExceptionObject",
          "displayName": "underaligned-exception-object clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFloatZeroConversion",
          "displayName": "float-zero-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSizeofPointerMemaccess",
          "displayName": "sizeof-pointer-memaccess clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPsabi",
          "displayName": "psabi clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownArgument",
          "displayName": "unknown-argument clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp20CompatPedantic",
          "displayName": "pre-c++20-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStringConcatenation",
          "displayName": "string-concatenation clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuStatementExpressionFromMacroExpansion",
          "displayName": "gnu-statement-expression-from-macro-expansion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVlaExtension",
          "displayName": "vla-extension clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCodeGenericAssoc",
          "displayName": "unreachable-code-generic-assoc clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingFieldInitializers",
          "displayName": "missing-field-initializers clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConstantLogicalOperand",
          "displayName": "constant-logical-operand clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPreCpp14Compat",
          "displayName": "pre-c++14-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftUnqualifiedFriend",
          "displayName": "microsoft-unqualified-friend clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredQualifiers",
          "displayName": "ignored-qualifiers clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuLineMarker",
          "displayName": "gnu-line-marker clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumFloatConversion",
          "displayName": "enum-float-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticRangeLoopAnalysis",
          "displayName": "range-loop-analysis clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullabilityExtension",
          "displayName": "nullability-extension clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticClangClPch",
          "displayName": "clang-cl-pch clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBranchProtection",
          "displayName": "branch-protection clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftInclude",
          "displayName": "microsoft-include clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLiteralConversion",
          "displayName": "literal-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAddressOfPackedMember",
          "displayName": "address-of-packed-member clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuFoldingConstant",
          "displayName": "gnu-folding-constant clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousDelete",
          "displayName": "ambiguous-delete clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenclUnsupportedRgba",
          "displayName": "opencl-unsupported-rgba clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyReference",
          "displayName": "thread-safety-reference clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmpClauses",
          "displayName": "openmp-clauses clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOpenmpTarget",
          "displayName": "openmp-target clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAssignEnum",
          "displayName": "assign-enum clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTypeSafety",
          "displayName": "type-safety clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousReversedOperator",
          "displayName": "ambiguous-reversed-operator clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleExceptionSpec",
          "displayName": "incompatible-exception-spec clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMisexpect",
          "displayName": "misexpect clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLongLong",
          "displayName": "long-long clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98CompatExtraSemi",
          "displayName": "c++98-compat-extra-semi clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingNoescape",
          "displayName": "missing-noescape clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntToVoidPointerCast",
          "displayName": "int-to-void-pointer-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonLiteralNullConversion",
          "displayName": "non-literal-null-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp2bExtensions",
          "displayName": "c++2b-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerCompare",
          "displayName": "pointer-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAbstractVbaseInit",
          "displayName": "abstract-vbase-init clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidOrNonexistentDirectory",
          "displayName": "invalid-or-nonexistent-directory clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLogicalOpParentheses",
          "displayName": "logical-op-parentheses clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPotentiallyEvaluatedExpression",
          "displayName": "potentially-evaluated-expression clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticComment",
          "displayName": "comment clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTypedefRedefinition",
          "displayName": "typedef-redefinition clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticStaticInlineExplicitInstantiation",
          "displayName": "static-inline-explicit-instantiation clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedExceptionParameter",
          "displayName": "unused-exception-parameter clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOrderedCompareFunctionPointers",
          "displayName": "ordered-compare-function-pointers clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedDynamicExceptionSpec",
          "displayName": "deprecated-dynamic-exception-spec clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeleteNonVirtualDtor",
          "displayName": "delete-non-virtual-dtor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftCharize",
          "displayName": "microsoft-charize clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCalledOnceParameter",
          "displayName": "called-once-parameter clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatExtraArgs",
          "displayName": "format-extra-args clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusablePartialSpecialization",
          "displayName": "unusable-partial-specialization clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownSanitizers",
          "displayName": "unknown-sanitizers clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedGetterReturnValue",
          "displayName": "unused-getter-return-value clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAmbiguousEllipsis",
          "displayName": "ambiguous-ellipsis clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFloatEqual",
          "displayName": "float-equal clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMisleadingIndentation",
          "displayName": "misleading-indentation clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDanglingInitializerList",
          "displayName": "dangling-initializer-list clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompatibleLibraryRedeclaration",
          "displayName": "incompatible-library-redeclaration clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftExceptionSpec",
          "displayName": "microsoft-exception-spec clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp14BinaryLiteral",
          "displayName": "c++14-binary-literal clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecateLaxVecConvAll",
          "displayName": "deprecate-lax-vec-conv-all clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEnumCompareConditional",
          "displayName": "enum-compare-conditional clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCoveredSwitchDefault",
          "displayName": "covered-switch-default clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReturnType",
          "displayName": "return-type clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftSealed",
          "displayName": "microsoft-sealed clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp2aExtensions",
          "displayName": "c++2a-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFloatOverflowConversion",
          "displayName": "float-overflow-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnknownDirectives",
          "displayName": "unknown-directives clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingVariableDeclarations",
          "displayName": "missing-variable-declarations clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPrivateHeader",
          "displayName": "private-header clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConstexprNotConst",
          "displayName": "constexpr-not-const clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOptionIgnored",
          "displayName": "option-ignored clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFloatConversion",
          "displayName": "float-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVisibility",
          "displayName": "visibility clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDanglingGsl",
          "displayName": "dangling-gsl clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredPragmaOptimize",
          "displayName": "ignored-pragma-optimize clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedPragma",
          "displayName": "deprecated-pragma clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnusedValue",
          "displayName": "unused-value clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOdr",
          "displayName": "odr clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedIncrementBool",
          "displayName": "deprecated-increment-bool clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInfiniteRecursion",
          "displayName": "infinite-recursion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuNullPointerArithmetic",
          "displayName": "gnu-null-pointer-arithmetic clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDistributedObjectModifiers",
          "displayName": "distributed-object-modifiers clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitFallthrough",
          "displayName": "implicit-fallthrough clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticExcessInitializers",
          "displayName": "excess-initializers clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBuiltinAssumeAlignedAlignment",
          "displayName": "builtin-assume-aligned-alignment clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUndef",
          "displayName": "undef clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitlyUnsignedLiteral",
          "displayName": "implicitly-unsigned-literal clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnavailableDeclarations",
          "displayName": "unavailable-declarations clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedAnonEnumEnumConversion",
          "displayName": "deprecated-anon-enum-enum-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatNonIso",
          "displayName": "format-non-iso clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp11Extensions",
          "displayName": "c++11-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPragmaSystemHeaderOutsideHeader",
          "displayName": "pragma-system-header-outside-header clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftFlexibleArray",
          "displayName": "microsoft-flexible-array clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnableToOpenStatsFile",
          "displayName": "unable-to-open-stats-file clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticHlslExtensions",
          "displayName": "hlsl-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticArcBridgeCastsDisallowedInNonarc",
          "displayName": "arc-bridge-casts-disallowed-in-nonarc clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAbsoluteValue",
          "displayName": "absolute-value clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedThisCapture",
          "displayName": "deprecated-this-capture clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNullability",
          "displayName": "nullability clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticLogicalNotParentheses",
          "displayName": "logical-not-parentheses clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAutoImport",
          "displayName": "auto-import clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticTautologicalPointerCompare",
          "displayName": "tautological-pointer-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticC99Designator",
          "displayName": "c99-designator clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNonnull",
          "displayName": "nonnull clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInvalidInitializerFromSystemHeader",
          "displayName": "invalid-initializer-from-system-header clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedArrayCompare",
          "displayName": "deprecated-array-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGlobalIsel",
          "displayName": "global-isel clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftCppMacro",
          "displayName": "microsoft-cpp-macro clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedCopyWithDtor",
          "displayName": "deprecated-copy-with-dtor clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSelfMove",
          "displayName": "self-move clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnreachableCode",
          "displayName": "unreachable-code clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticZeroAsNullPointerConstant",
          "displayName": "zero-as-null-pointer-constant clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSwitch",
          "displayName": "switch clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp2aCompatPedantic",
          "displayName": "c++2a-compat-pedantic clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMain",
          "displayName": "main clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticThreadSafetyNegative",
          "displayName": "thread-safety-negative clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDtorName",
          "displayName": "dtor-name clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedVisibility",
          "displayName": "unsupported-visibility clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuCompoundLiteralInitializer",
          "displayName": "gnu-compound-literal-initializer clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIntToPointerCast",
          "displayName": "int-to-pointer-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticAsmOperandWidths",
          "displayName": "asm-operand-widths clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticHeaderHygiene",
          "displayName": "header-hygiene clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticGnuAutoType",
          "displayName": "gnu-auto-type clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftTemplateShadow",
          "displayName": "microsoft-template-shadow clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticEmptyDecomposition",
          "displayName": "empty-decomposition clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticNontrivialMemaccess",
          "displayName": "nontrivial-memaccess clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSerializedDiagnostics",
          "displayName": "serialized-diagnostics clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedAttributes",
          "displayName": "deprecated-attributes clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDarwinSdkSettings",
          "displayName": "darwin-sdk-settings clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnalignedAccess",
          "displayName": "unaligned-access clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBindingInCondition",
          "displayName": "binding-in-condition clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticBindToTemporaryCopy",
          "displayName": "bind-to-temporary-copy clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticPointerToEnumCast",
          "displayName": "pointer-to-enum-cast clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedEnumCompareConditional",
          "displayName": "deprecated-enum-compare-conditional clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredOptimizationArgument",
          "displayName": "ignored-optimization-argument clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp20AttributeExtensions",
          "displayName": "c++20-attribute-extensions clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMicrosoftAnonTag",
          "displayName": "microsoft-anon-tag clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFinalMacro",
          "displayName": "final-macro clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedImplementations",
          "displayName": "deprecated-implementations clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedAbs",
          "displayName": "unsupported-abs clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticUnsupportedAbi",
          "displayName": "unsupported-abi clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticMissingConstinit",
          "displayName": "missing-constinit clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReorderInitList",
          "displayName": "reorder-init-list clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticVecElemSize",
          "displayName": "vec-elem-size clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitInt",
          "displayName": "implicit-int clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCompletionHandler",
          "displayName": "completion-handler clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticInlineNamespaceReopenedNoninline",
          "displayName": "inline-namespace-reopened-noninline clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDtorTypedef",
          "displayName": "dtor-typedef clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17Compat",
          "displayName": "c++98-c++11-c++14-c++17-compat clang diagnostic",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangDiagnosticWarnings",
          "displayName": "#warnings clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConstantEvaluated",
          "displayName": "constant-evaluated clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticOverrideModule",
          "displayName": "override-module clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticDeprecatedBuiltins",
          "displayName": "deprecated-builtins clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFormatInsufficientArgs",
          "displayName": "format-insufficient-args clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIgnoredPragmas",
          "displayName": "ignored-pragmas clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticSignCompare",
          "displayName": "sign-compare clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticConsumed",
          "displayName": "consumed clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticIncompleteImplementation",
          "displayName": "incomplete-implementation clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticImplicitIntFloatConversion",
          "displayName": "implicit-int-float-conversion clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticFinalDtorNonFinalClass",
          "displayName": "final-dtor-non-final-class clang diagnostic",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyClangDiagnosticReorder",
          "displayName": "reorder clang diagnostic",
          "enabled": true
        }
      ]
    },
    {
      "name": "Unreal Engine",
      "inspections": [
        {
          "shortName": "CppUEBlueprintImplementableEventNotImplemented",
          "displayName": "BlueprintImplementableEvent function is not implemented in any blueprint",
          "enabled": true
        },
        {
          "shortName": "CppUE4BlueprintCallableFunctionMayBeStatic",
          "displayName": "BlueprintCallable function can be made static",
          "enabled": true
        },
        {
          "shortName": "CppUE4CodingStandardUClassNamingViolationError",
          "displayName": "Inconsistent Unreal Engine UCLASS Naming",
          "enabled": true
        },
        {
          "shortName": "CppUENonExistentInputAction",
          "displayName": "Action with this name does not exist",
          "enabled": true
        },
        {
          "shortName": "CppUESourceFileWithoutStandardLibrary",
          "displayName": "C++ standard library headers not found",
          "enabled": true
        },
        {
          "shortName": "CppUE4ProbableMemoryIssuesWithUObjectsInContainer",
          "displayName": "Objects stored in non-uproperty member can be destroyed during garbage collection, resulting in stale pointers",
          "enabled": true
        },
        {
          "shortName": "CppUESourceFileWithoutPredefinedMacros",
          "displayName": "Unreal Engine source file without predefined Unreal macros",
          "enabled": true
        },
        {
          "shortName": "CppUEVersionFileDoesntExist",
          "displayName": "Unreal Engine version file does not exist",
          "enabled": true
        },
        {
          "shortName": "CppUEIncorrectEngineDirectory",
          "displayName": "Specified version of the engine project is not found",
          "enabled": true
        },
        {
          "shortName": "CppUEBlueprintCallableFunctionUnused",
          "displayName": "BlueprintCallable function is never used in Blueprint or C++ code",
          "enabled": true
        },
        {
          "shortName": "CppUE4ProbableMemoryIssuesWithUObject",
          "displayName": "Non-UProperty object member can be destroyed during garbage collection, resulting in a stale pointer",
          "enabled": true
        },
        {
          "shortName": "CppUENonExistentInputAxis",
          "displayName": "Axis with this name does not exist",
          "enabled": true
        },
        {
          "shortName": "CppUE4BlueprintCallableFunctionMayBeConst",
          "displayName": "BlueprintCallable function can be made const",
          "enabled": true
        },
        {
          "shortName": "CppUPropertyMacroCallHasNoEffect",
          "displayName": "UPROPERTY macro call has no effect",
          "enabled": true
        },
        {
          "shortName": "CppUE4CodingStandardNamingViolationWarning",
          "displayName": "Inconsistent Unreal Engine Naming",
          "enabled": true
        },
        {
          "shortName": "CppUFunctionMacroCallHasNoEffect",
          "displayName": "UFUNCTION macro call has no effect",
          "enabled": true
        },
        {
          "shortName": "UnrealJsonLocalInspectionTool",
          "displayName": "Unreal Engine json inspection",
          "enabled": false,
          "description": "[RIDER-83134](https://youtrack.jetbrains.com/issue/RIDER-83134/)"
        }
      ]
    },
    {
      "name": "Language Usage Opportunities",
      "inspections": [
        {
          "shortName": "ConvertToCompoundAssignment",
          "displayName": "Use compound assignment",
          "enabled": true
        },
        {
          "shortName": "UseNegatedPatternInIsExpression",
          "displayName": "Convert negated 'is' expression into 'is' expression with negated pattern",
          "enabled": true
        },
        {
          "shortName": "MergeNestedPropertyPatterns",
          "displayName": "Merge nested property patterns",
          "enabled": true
        },
        {
          "shortName": "JoinNullCheckWithUsage",
          "displayName": "Join null check with assignment",
          "enabled": true
        },
        {
          "shortName": "ConvertToLocalFunction",
          "displayName": "Convert delegate variable into local function",
          "enabled": true
        },
        {
          "shortName": "UseIndexFromEndExpression",
          "displayName": "Use index from end expression",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithFieldKeyword",
          "displayName": "Replace with 'field' keyword",
          "enabled": true
        },
        {
          "shortName": "IntroduceOptionalParameters.Global",
          "displayName": "Introduce optional parameters (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "UseObjectOrCollectionInitializer",
          "displayName": "Use object or collection initializer when possible",
          "enabled": true
        },
        {
          "shortName": "UseUnsignedRightShiftOperator",
          "displayName": "Use unsigned right shift operator '>>>'",
          "enabled": true
        },
        {
          "shortName": "ConvertToAutoPropertyWhenPossible",
          "displayName": "Convert property into auto-property (when possible)",
          "enabled": true
        },
        {
          "shortName": "MoveVariableDeclarationInsideLoopCondition",
          "displayName": "Move variable declaration inside loop condition",
          "enabled": true
        },
        {
          "shortName": "ReplaceSliceWithRangeIndexer",
          "displayName": "Replace 'Slice' with range indexer",
          "enabled": true
        },
        {
          "shortName": "SwapViaDeconstruction",
          "displayName": "Use deconstruction to swap variables",
          "enabled": true
        },
        {
          "shortName": "InlineOutVariableDeclaration",
          "displayName": "Inline 'out' variable declaration",
          "enabled": true
        },
        {
          "shortName": "UseWithExpressionToCopyTuple",
          "displayName": "Use 'with' expression to copy tuple",
          "enabled": true
        },
        {
          "shortName": "UsePositionalDeconstructionPattern",
          "displayName": "Use positional deconstruction pattern",
          "enabled": false
        },
        {
          "shortName": "ConvertToPrimaryConstructor",
          "displayName": "Convert record constructor into primary constructor",
          "enabled": true
        },
        {
          "shortName": "InvertIf",
          "displayName": "Invert 'if' statement to reduce nesting",
          "enabled": true
        },
        {
          "shortName": "ReplaceObjectPatternWithVarPattern",
          "displayName": "Replace object pattern not performing any additional checks with 'var' pattern",
          "enabled": true
        },
        {
          "shortName": "ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator",
          "displayName": "Foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used",
          "enabled": true
        },
        {
          "shortName": "UseWithExpressionToCopyRecord",
          "displayName": "Use 'with' expression to copy record",
          "enabled": true
        },
        {
          "shortName": "UseWithExpressionToCopyAnonymousObject",
          "displayName": "Use 'with' expression to copy anonymous object",
          "enabled": true
        },
        {
          "shortName": "ReplaceSubstringWithRangeIndexer",
          "displayName": "Replace 'Substring' with range indexer",
          "enabled": true
        },
        {
          "shortName": "ReplaceAutoPropertyWithComputedProperty",
          "displayName": "Replace auto-property with computed property",
          "enabled": true
        },
        {
          "shortName": "ForCanBeConvertedToForeach",
          "displayName": "For-loop can be converted into foreach-loop",
          "enabled": true
        },
        {
          "shortName": "ReplaceConditionalExpressionWithNullCoalescing",
          "displayName": "Conditional expression can be rewritten as null-coalescing",
          "enabled": true
        },
        {
          "shortName": "UseNameofExpression",
          "displayName": "Use 'nameof' expression to reference name",
          "enabled": true
        },
        {
          "shortName": "MergeIntoNegatedPattern",
          "displayName": "Merge negated null/pattern checks into complex pattern",
          "enabled": true
        },
        {
          "shortName": "ConvertIfStatementToSwitchStatement",
          "displayName": "Convert 'if' statement into 'switch'",
          "enabled": true
        },
        {
          "shortName": "ConvertIfStatementToConditionalTernaryExpression",
          "displayName": "'if' statement can be rewritten as '?:' expression",
          "enabled": true
        },
        {
          "shortName": "MoveToExistingPositionalDeconstructionPattern",
          "displayName": "Move to existing positional deconstruction pattern",
          "enabled": true
        },
        {
          "shortName": "UseUtf8StringLiteral",
          "displayName": "Use UTF-8 string literal",
          "enabled": false
        },
        {
          "shortName": "LambdaExpressionCanBeMadeStatic",
          "displayName": "Lambda expression/anonymous method can be made 'static'",
          "enabled": false
        },
        {
          "shortName": "UseDeconstruction",
          "displayName": "Use deconstruction",
          "enabled": true
        },
        {
          "shortName": "UseNameofForDependencyProperty",
          "displayName": "Use 'nameof' expression when registering a DependencyProperty",
          "enabled": true
        },
        {
          "shortName": "ConvertIfStatementToNullCoalescingAssignment",
          "displayName": "'if' statement can be rewritten as '??=' assignment",
          "enabled": true
        },
        {
          "shortName": "MergeConditionalExpression",
          "displayName": "Merge conditional ?: expression into conditional access",
          "enabled": true
        },
        {
          "shortName": "LoopCanBeConvertedToQuery",
          "displayName": "Loop can be converted into LINQ-expression",
          "enabled": true
        },
        {
          "shortName": "InvokeAsExtensionMethod",
          "displayName": "Convert static method invocation into extension method call",
          "enabled": true
        },
        {
          "shortName": "UseNullPropagation",
          "displayName": "Replace if statement with null-propagating code",
          "enabled": true
        },
        {
          "shortName": "UsePatternMatching",
          "displayName": "Convert 'as' expression type check and the following null check into pattern matching",
          "enabled": true
        },
        {
          "shortName": "ReplaceSequenceEqualWithConstantPattern",
          "displayName": "Replace 'SequenceEqual' with constant pattern",
          "enabled": false
        },
        {
          "shortName": "UseNegatedPatternMatching",
          "displayName": "Convert 'as' expression type check and the following null check into negated pattern matching",
          "enabled": true
        },
        {
          "shortName": "ConvertClosureToMethodGroup",
          "displayName": "Convert lambda expression into method group",
          "enabled": true
        },
        {
          "shortName": "ConvertIfStatementToNullCoalescingExpression",
          "displayName": "'if' statement can be rewritten as '??' expression",
          "enabled": true
        },
        {
          "shortName": "ConvertToAutoPropertyWithPrivateSetter",
          "displayName": "Convert property into auto-property with private setter",
          "enabled": true
        },
        {
          "shortName": "ConvertToStaticClass",
          "displayName": "Convert into static class",
          "enabled": true
        },
        {
          "shortName": "ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator",
          "displayName": "Part of foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used",
          "enabled": true
        },
        {
          "shortName": "ConvertSwitchStatementToSwitchExpression",
          "displayName": "Replace 'switch' statement with 'switch' expression",
          "enabled": true
        },
        {
          "shortName": "MergeIntoLogicalPattern",
          "displayName": "Merge null/pattern/value checks into 'or'/'and' patterns",
          "enabled": true
        },
        {
          "shortName": "UseWithExpressionToCopyStruct",
          "displayName": "Use 'with' expression to copy struct",
          "enabled": true
        },
        {
          "shortName": "MergeSequentialChecks",
          "displayName": "Merge sequential checks into single conditional access check",
          "enabled": true
        },
        {
          "shortName": "RedundantAccessorBody",
          "displayName": "Redundant accessor body",
          "enabled": true
        },
        {
          "shortName": "InlineTemporaryVariable",
          "displayName": "Inline temporary variable",
          "enabled": true
        },
        {
          "shortName": "UseNullableReferenceTypesAnnotationSyntax",
          "displayName": "Use type annotation syntax",
          "enabled": true
        },
        {
          "shortName": "ConvertToAutoProperty",
          "displayName": "Convert property into auto-property",
          "enabled": true
        },
        {
          "shortName": "PassStringInterpolation",
          "displayName": "Pass string interpolation expression",
          "enabled": true
        },
        {
          "shortName": "ConvertIfStatementToReturnStatement",
          "displayName": "'if-return' statement can be rewritten as 'return' statement",
          "enabled": true
        },
        {
          "shortName": "UseNameOfInsteadOfTypeOf",
          "displayName": "Use 'nameof' expression to reference type name",
          "enabled": true
        },
        {
          "shortName": "IntroduceOptionalParameters.Local",
          "displayName": "Introduce optional parameters (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "ConvertToUsingDeclaration",
          "displayName": "Convert into 'using' declaration",
          "enabled": true
        },
        {
          "shortName": "LoopCanBePartlyConvertedToQuery",
          "displayName": "Part of loop's body can be converted into LINQ-expression",
          "enabled": false
        },
        {
          "shortName": "ConvertToLambdaExpression",
          "displayName": "Convert into lambda expression",
          "enabled": true
        },
        {
          "shortName": "LambdaExpressionMustBeStatic",
          "displayName": "Lambda expression/anonymous method must be 'static' to avoid allocations",
          "enabled": true
        },
        {
          "shortName": "UseNameofExpressionForPartOfTheString",
          "displayName": "Use 'nameof' expression to reference name in part of the string literal",
          "enabled": false
        },
        {
          "shortName": "RegExpInspections",
          "displayName": "Regular Expression Inspections",
          "enabled": true
        },
        {
          "shortName": "ConvertToNullCoalescingCompoundAssignment",
          "displayName": "Use compound assignment",
          "enabled": true
        },
        {
          "shortName": "UseStringInterpolation",
          "displayName": "Use string interpolation expression",
          "enabled": true
        },
        {
          "shortName": "ConvertConditionalTernaryExpressionToSwitchExpression",
          "displayName": "Replace ternary expression with 'switch' expression",
          "enabled": true
        },
        {
          "shortName": "ClassCannotBeInstantiated",
          "displayName": "Class cannot be instantiated",
          "enabled": true
        },
        {
          "shortName": "UseAwaitUsing",
          "displayName": "Convert into 'await using' statement or declaration",
          "enabled": true
        },
        {
          "shortName": "LambdaShouldNotCaptureContext",
          "displayName": "Lambda expression/anonymous method must not have captures of the containing context",
          "enabled": true
        },
        {
          "shortName": "MergeIntoPattern",
          "displayName": "Merge null/pattern checks into complex pattern",
          "enabled": true
        },
        {
          "shortName": "MergeAndPattern",
          "displayName": "Merge 'and' pattern",
          "enabled": true
        },
        {
          "shortName": "ConvertNullableToShortForm",
          "displayName": "Convert 'Nullable<T>' into 'T?'",
          "enabled": true
        }
      ]
    },
    {
      "name": "Clang-Tidy Checks",
      "inspections": [
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeReinterpretCast",
          "displayName": "cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAndroidCloexecAccept",
          "displayName": "android-cloexec-accept clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeReplaceRandomShuffle",
          "displayName": "modernize-replace-random-shuffle clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyGoogleExplicitConstructor",
          "displayName": "google-explicit-constructor clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilTimeSubtraction",
          "displayName": "abseil-time-subtraction clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscNoRecursion",
          "displayName": "misc-no-recursion clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityUseAnyofallof",
          "displayName": "readability-use-anyofallof clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppAvoidCArrays",
          "displayName": "hicpp-avoid-c-arrays clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneSizeofExpression",
          "displayName": "bugprone-sizeof-expression clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertCon36C",
          "displayName": "cert-con36-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppNoArrayDecay",
          "displayName": "hicpp-no-array-decay clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityElseAfterReturn",
          "displayName": "readability-else-after-return clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProBoundsPointerArithmetic",
          "displayName": "cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidMagicNumbers",
          "displayName": "cppcoreguidelines-avoid-magic-numbers clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityUppercaseLiteralSuffix",
          "displayName": "readability-uppercase-literal-suffix clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantStringInit",
          "displayName": "readability-redundant-string-init clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidGoto",
          "displayName": "cppcoreguidelines-avoid-goto clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityInconsistentDeclarationParameterName",
          "displayName": "readability-inconsistent-declaration-parameter-name clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneUnhandledExceptionAtNew",
          "displayName": "bugprone-unhandled-exception-at-new clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyFuchsiaVirtualInheritance",
          "displayName": "fuchsia-virtual-inheritance clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertCon54Cpp",
          "displayName": "cert-con54-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleObjcFunctionNaming",
          "displayName": "google-objc-function-naming clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertMsc32C",
          "displayName": "cert-msc32-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppUseEqualsDefault",
          "displayName": "hicpp-use-equals-default clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeUseTransparentFunctors",
          "displayName": "modernize-use-transparent-functors clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppUseNoexcept",
          "displayName": "hicpp-use-noexcept clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscConfusableIdentifiers",
          "displayName": "misc-confusable-identifiers clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertMsc30C",
          "displayName": "cert-msc30-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneUnhandledSelfAssignment",
          "displayName": "bugprone-unhandled-self-assignment clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousMemoryComparison",
          "displayName": "bugprone-suspicious-memory-comparison clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesNonPrivateMemberVariablesInClasses",
          "displayName": "cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleBuildNamespaces",
          "displayName": "google-build-namespaces clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneForwardingReferenceOverload",
          "displayName": "bugprone-forwarding-reference-overload clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeUseNullptr",
          "displayName": "modernize-use-nullptr clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizePassByValue",
          "displayName": "modernize-pass-by-value clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAndroidCloexecPipe2",
          "displayName": "android-cloexec-pipe2 clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceTypePromotionInMathFn",
          "displayName": "performance-type-promotion-in-math-fn clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesExplicitVirtualFunctions",
          "displayName": "cppcoreguidelines-explicit-virtual-functions clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityTodo",
          "displayName": "google-readability-todo clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceImplicitConversionInLoop",
          "displayName": "performance-implicit-conversion-in-loop clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilitySimplifyBooleanExpr",
          "displayName": "readability-simplify-boolean-expr clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeAvoidCArrays",
          "displayName": "modernize-avoid-c-arrays clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeMakeShared",
          "displayName": "modernize-make-shared clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertMsc50Cpp",
          "displayName": "cert-msc50-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertErr33C",
          "displayName": "cert-err33-c clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneNarrowingConversions",
          "displayName": "bugprone-narrowing-conversions clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertErr60Cpp",
          "displayName": "cert-err60-cpp clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityFunctionCognitiveComplexity",
          "displayName": "readability-function-cognitive-complexity clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPortabilityRestrictSystemIncludes",
          "displayName": "portability-restrict-system-includes clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertErr34C",
          "displayName": "cert-err34-c clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyObjcMissingHash",
          "displayName": "objc-missing-hash clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantPreprocessor",
          "displayName": "readability-redundant-preprocessor clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppNewDeleteOperators",
          "displayName": "hicpp-new-delete-operators clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeUseUsing",
          "displayName": "modernize-use-using clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneTooSmallLoopVariable",
          "displayName": "bugprone-too-small-loop-variable clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyMiscNonPrivateMemberVariablesInClasses",
          "displayName": "misc-non-private-member-variables-in-classes clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityIdentifierLength",
          "displayName": "readability-identifier-length clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppNoexceptMove",
          "displayName": "hicpp-noexcept-move clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAndroidComparisonInTempFailureRetry",
          "displayName": "android-comparison-in-temp-failure-retry clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertOop57Cpp",
          "displayName": "cert-oop57-cpp clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertDcl21Cpp",
          "displayName": "cert-dcl21-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHighlighting",
          "displayName": "Unknown clang-tidy checks",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeUseTrailingReturnType",
          "displayName": "modernize-use-trailing-return-type clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneUnusedRaii",
          "displayName": "bugprone-unused-raii clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneMisplacedOperatorInStrlenInAlloc",
          "displayName": "bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAndroidCloexecEpollCreate",
          "displayName": "android-cloexec-epoll-create clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBoostUseToString",
          "displayName": "boost-use-to-string clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneThrowKeywordMissing",
          "displayName": "bugprone-throw-keyword-missing clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyZirconTemporaryObjects",
          "displayName": "zircon-temporary-objects clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions",
          "displayName": "cppcoreguidelines-special-member-functions clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesSlicing",
          "displayName": "cppcoreguidelines-slicing clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscMisleadingBidirectional",
          "displayName": "misc-misleading-bidirectional clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityConvertMemberFunctionsToStatic",
          "displayName": "readability-convert-member-functions-to-static clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppVararg",
          "displayName": "hicpp-vararg clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscDefinitionsInHeaders",
          "displayName": "misc-definitions-in-headers clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscNewDeleteOverloads",
          "displayName": "misc-new-delete-overloads clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneSpuriouslyWakeUpFunctions",
          "displayName": "bugprone-spuriously-wake-up-functions clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAndroidCloexecAccept4",
          "displayName": "android-cloexec-accept4 clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyLlvmlibcCalleeNamespace",
          "displayName": "llvmlibc-callee-namespace clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilDurationComparison",
          "displayName": "abseil-duration-comparison clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppFunctionSize",
          "displayName": "hicpp-function-size clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyFuchsiaOverloadedOperator",
          "displayName": "fuchsia-overloaded-operator clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceFasterStringFind",
          "displayName": "performance-faster-string-find clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppMemberInit",
          "displayName": "hicpp-member-init clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantAccessSpecifiers",
          "displayName": "readability-redundant-access-specifiers clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeMakeUnique",
          "displayName": "modernize-make-unique clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleBuildUsingNamespace",
          "displayName": "google-build-using-namespace clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleRuntimeInt",
          "displayName": "google-runtime-int clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneSharedPtrArrayMismatch",
          "displayName": "bugprone-shared-ptr-array-mismatch clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppNamedParameter",
          "displayName": "hicpp-named-parameter clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneParentVirtualCall",
          "displayName": "bugprone-parent-virtual-call clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityAvoidUnderscoreInGoogletestName",
          "displayName": "google-readability-avoid-underscore-in-googletest-name clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceNoAutomaticMove",
          "displayName": "performance-no-automatic-move clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesInterfacesGlobalInit",
          "displayName": "cppcoreguidelines-interfaces-global-init clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneStringConstructor",
          "displayName": "bugprone-string-constructor clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertEnv33C",
          "displayName": "cert-env33-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeUseEqualsDefault",
          "displayName": "modernize-use-equals-default clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityNamedParameter",
          "displayName": "readability-named-parameter clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertErr58Cpp",
          "displayName": "cert-err58-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilDurationFactoryFloat",
          "displayName": "abseil-duration-factory-float clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityCasting",
          "displayName": "google-readability-casting clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilDurationConversionCast",
          "displayName": "abseil-duration-conversion-cast clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertOop54Cpp",
          "displayName": "cert-oop54-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityMakeMemberFunctionConst",
          "displayName": "readability-make-member-function-const clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantControlFlow",
          "displayName": "readability-redundant-control-flow clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyObjcAvoidNserrorInit",
          "displayName": "objc-avoid-nserror-init clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneAssignmentInIfCondition",
          "displayName": "bugprone-assignment-in-if-condition clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertErr09Cpp",
          "displayName": "cert-err09-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousMissingComma",
          "displayName": "bugprone-suspicious-missing-comma clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyGoogleObjcAvoidThrowingException",
          "displayName": "google-objc-avoid-throwing-exception clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscRedundantExpression",
          "displayName": "misc-redundant-expression clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppUseAuto",
          "displayName": "hicpp-use-auto clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilNoInternalDependencies",
          "displayName": "abseil-no-internal-dependencies clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneReservedIdentifier",
          "displayName": "bugprone-reserved-identifier clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityContainerSizeEmpty",
          "displayName": "readability-container-size-empty clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyGoogleBuildExplicitMakePair",
          "displayName": "google-build-explicit-make-pair clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneAssertSideEffect",
          "displayName": "bugprone-assert-side-effect clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppDeprecatedHeaders",
          "displayName": "hicpp-deprecated-headers clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneSignalHandler",
          "displayName": "bugprone-signal-handler clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyPerformanceInefficientAlgorithm",
          "displayName": "performance-inefficient-algorithm clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeCstyleCast",
          "displayName": "cppcoreguidelines-pro-type-cstyle-cast clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertDcl58Cpp",
          "displayName": "cert-dcl58-cpp clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneUndelegatedConstructor",
          "displayName": "bugprone-undelegated-constructor clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeLoopConvert",
          "displayName": "modernize-loop-convert clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneMisplacedPointerArithmeticInAlloc",
          "displayName": "bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneMoveForwardingReference",
          "displayName": "bugprone-move-forwarding-reference clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppAvoidGoto",
          "displayName": "hicpp-avoid-goto clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesOwningMemory",
          "displayName": "cppcoreguidelines-owning-memory clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppBracesAroundStatements",
          "displayName": "hicpp-braces-around-statements clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeReplaceDisallowCopyAndAssignMacro",
          "displayName": "modernize-replace-disallow-copy-and-assign-macro clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneStringviewNullptr",
          "displayName": "bugprone-stringview-nullptr clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyMiscThrowByValueCatchByReference",
          "displayName": "misc-throw-by-value-catch-by-reference clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeUseEqualsDelete",
          "displayName": "modernize-use-equals-delete clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyFuchsiaStaticallyConstructedObjects",
          "displayName": "fuchsia-statically-constructed-objects clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeUseNoexcept",
          "displayName": "modernize-use-noexcept clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyPerformanceNoexceptMoveConstructor",
          "displayName": "performance-noexcept-move-constructor clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneExceptionEscape",
          "displayName": "bugprone-exception-escape clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceInefficientVectorOperation",
          "displayName": "performance-inefficient-vector-operation clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyLlvmPreferIsaOrDynCastInConditionals",
          "displayName": "llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantFunctionPtrDereference",
          "displayName": "readability-redundant-function-ptr-dereference clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeAvoidBind",
          "displayName": "modernize-avoid-bind clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityStaticAccessedThroughInstance",
          "displayName": "readability-static-accessed-through-instance clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertMem57Cpp",
          "displayName": "cert-mem57-cpp clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantStringCstr",
          "displayName": "readability-redundant-string-cstr clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesPreferMemberInitializer",
          "displayName": "cppcoreguidelines-prefer-member-initializer clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneMacroParentheses",
          "displayName": "bugprone-macro-parentheses clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityFunctionSize",
          "displayName": "google-readability-function-size clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilTimeComparison",
          "displayName": "abseil-time-comparison clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyConcurrencyMtUnsafe",
          "displayName": "concurrency-mt-unsafe clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAbseilStringFindStrContains",
          "displayName": "abseil-string-find-str-contains clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceMoveConstArg",
          "displayName": "performance-move-const-arg clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyMiscMisplacedConst",
          "displayName": "misc-misplaced-const clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyLlvmHeaderGuard",
          "displayName": "llvm-header-guard clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneIntegerDivision",
          "displayName": "bugprone-integer-division clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProBoundsConstantArrayIndex",
          "displayName": "cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyLlvmlibcImplementationInNamespace",
          "displayName": "llvmlibc-implementation-in-namespace clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneBranchClone",
          "displayName": "bugprone-branch-clone clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneEasilySwappableParameters",
          "displayName": "bugprone-easily-swappable-parameters clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMpiTypeMismatch",
          "displayName": "mpi-type-mismatch clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertPos47C",
          "displayName": "cert-pos47-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertPos44C",
          "displayName": "cert-pos44-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertOop11Cpp",
          "displayName": "cert-oop11-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyObjcNsinvocationArgumentLifetime",
          "displayName": "objc-nsinvocation-argument-lifetime clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityDeleteNullPointer",
          "displayName": "readability-delete-null-pointer clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesNarrowingConversions",
          "displayName": "cppcoreguidelines-narrowing-conversions clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyLlvmIncludeOrder",
          "displayName": "llvm-include-order clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilDurationFactoryScale",
          "displayName": "abseil-duration-factory-scale clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleUpgradeGoogletestCase",
          "displayName": "google-upgrade-googletest-case clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneStringLiteralWithEmbeddedNul",
          "displayName": "bugprone-string-literal-with-embedded-nul clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidCArrays",
          "displayName": "cppcoreguidelines-avoid-c-arrays clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneBadSignalToKillThread",
          "displayName": "bugprone-bad-signal-to-kill-thread clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneBoolPointerImplicitConversion",
          "displayName": "bugprone-bool-pointer-implicit-conversion clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyConcurrencyThreadCanceltypeAsynchronous",
          "displayName": "concurrency-thread-canceltype-asynchronous clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyObjcPropertyDeclaration",
          "displayName": "objc-property-declaration clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilitySuspiciousCallArgument",
          "displayName": "readability-suspicious-call-argument clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyMiscUnusedAliasDecls",
          "displayName": "misc-unused-alias-decls clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppNoMalloc",
          "displayName": "hicpp-no-malloc clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAlteraKernelNameRestriction",
          "displayName": "altera-kernel-name-restriction clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppExplicitConversions",
          "displayName": "hicpp-explicit-conversions clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneMacroRepeatedSideEffects",
          "displayName": "bugprone-macro-repeated-side-effects clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityMisleadingIndentation",
          "displayName": "readability-misleading-indentation clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyLlvmQualifiedAuto",
          "displayName": "llvm-qualified-auto clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeConcatNestedNamespaces",
          "displayName": "modernize-concat-nested-namespaces clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilRedundantStrcatCalls",
          "displayName": "abseil-redundant-strcat-calls clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertMsc51Cpp",
          "displayName": "cert-msc51-cpp clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityContainerContains",
          "displayName": "readability-container-contains clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAndroidCloexecInotifyInit",
          "displayName": "android-cloexec-inotify-init clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppInvalidAccessMoved",
          "displayName": "hicpp-invalid-access-moved clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceTriviallyDestructible",
          "displayName": "performance-trivially-destructible clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneImplicitWideningOfMultiplicationResult",
          "displayName": "bugprone-implicit-widening-of-multiplication-result clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppMultiwayPathsCovered",
          "displayName": "hicpp-multiway-paths-covered clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityAvoidConstParamsInDecls",
          "displayName": "readability-avoid-const-params-in-decls clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneSizeofContainer",
          "displayName": "bugprone-sizeof-container clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertErr61Cpp",
          "displayName": "cert-err61-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilStrCatAppend",
          "displayName": "abseil-str-cat-append clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppExceptionBaseclass",
          "displayName": "hicpp-exception-baseclass clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyObjcDeallocInCategory",
          "displayName": "objc-dealloc-in-category clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneIncorrectRoundings",
          "displayName": "bugprone-incorrect-roundings clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityMagicNumbers",
          "displayName": "readability-magic-numbers clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityIsolateDeclaration",
          "displayName": "readability-isolate-declaration clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscNonCopyableObjects",
          "displayName": "misc-non-copyable-objects clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyLlvmlibcRestrictSystemLibcHeaders",
          "displayName": "llvmlibc-restrict-system-libc-headers clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscUniqueptrResetRelease",
          "displayName": "misc-uniqueptr-reset-release clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeUseDefaultMemberInit",
          "displayName": "modernize-use-default-member-init clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesCCopyAssignmentSignature",
          "displayName": "cppcoreguidelines-c-copy-assignment-signature clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscUnconventionalAssignOperator",
          "displayName": "misc-unconventional-assign-operator clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantMemberInit",
          "displayName": "readability-redundant-member-init clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneFoldInitType",
          "displayName": "bugprone-fold-init-type clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityStaticDefinitionInAnonymousNamespace",
          "displayName": "readability-static-definition-in-anonymous-namespace clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneInaccurateErase",
          "displayName": "bugprone-inaccurate-erase clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppSignedBitwise",
          "displayName": "hicpp-signed-bitwise clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyObjcAssertEquals",
          "displayName": "objc-assert-equals clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneNoEscape",
          "displayName": "bugprone-no-escape clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeUseEmplace",
          "displayName": "modernize-use-emplace clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeRawStringLiteral",
          "displayName": "modernize-raw-string-literal clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppMoveConstArg",
          "displayName": "hicpp-move-const-arg clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityBracesAroundStatements",
          "displayName": "readability-braces-around-statements clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppUndelegatedConstructor",
          "displayName": "hicpp-undelegated-constructor clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeReplaceAutoPtr",
          "displayName": "modernize-replace-auto-ptr clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAndroidCloexecFopen",
          "displayName": "android-cloexec-fopen clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesVirtualClassDestructor",
          "displayName": "cppcoreguidelines-virtual-class-destructor clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousInclude",
          "displayName": "bugprone-suspicious-include clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyMiscMisleadingIdentifier",
          "displayName": "misc-misleading-identifier clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantDeclaration",
          "displayName": "readability-redundant-declaration clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneRedundantBranchCondition",
          "displayName": "bugprone-redundant-branch-condition clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAbseilDurationUnnecessaryConversion",
          "displayName": "abseil-duration-unnecessary-conversion clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneInfiniteLoop",
          "displayName": "bugprone-infinite-loop clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppNoAssembler",
          "displayName": "hicpp-no-assembler clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceInefficientStringConcatenation",
          "displayName": "performance-inefficient-string-concatenation clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyMiscStaticAssert",
          "displayName": "misc-static-assert clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeUseOverride",
          "displayName": "modernize-use-override clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilUpgradeDurationConversions",
          "displayName": "abseil-upgrade-duration-conversions clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAndroidCloexecMemfdCreate",
          "displayName": "android-cloexec-memfd-create clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneLambdaFunctionName",
          "displayName": "bugprone-lambda-function-name clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertFio38C",
          "displayName": "cert-fio38-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscUnusedUsingDecls",
          "displayName": "misc-unused-using-decls clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugpronePosixReturn",
          "displayName": "bugprone-posix-return clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneForwardDeclarationNamespace",
          "displayName": "bugprone-forward-declaration-namespace clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertDcl37C",
          "displayName": "cert-dcl37-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilDurationAddition",
          "displayName": "abseil-duration-addition clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityNamespaceComments",
          "displayName": "google-readability-namespace-comments clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertStr34C",
          "displayName": "cert-str34-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAndroidCloexecOpen",
          "displayName": "android-cloexec-open clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityFunctionSize",
          "displayName": "readability-function-size clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilDurationDivision",
          "displayName": "abseil-duration-division clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneUseAfterMove",
          "displayName": "bugprone-use-after-move clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneCopyConstructorInit",
          "displayName": "bugprone-copy-constructor-init clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeReturnBracedInitList",
          "displayName": "modernize-return-braced-init-list clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesAvoidNonConstGlobalVariables",
          "displayName": "cppcoreguidelines-avoid-non-const-global-variables clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousStringCompare",
          "displayName": "bugprone-suspicious-string-compare clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeShrinkToFit",
          "displayName": "modernize-shrink-to-fit clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousSemicolon",
          "displayName": "bugprone-suspicious-semicolon clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyGoogleRuntimeOperator",
          "displayName": "google-runtime-operator clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertErr52Cpp",
          "displayName": "cert-err52-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesMacroUsage",
          "displayName": "cppcoreguidelines-macro-usage clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeMemberInit",
          "displayName": "cppcoreguidelines-pro-type-member-init clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyPortabilitySimdIntrinsics",
          "displayName": "portability-simd-intrinsics clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPortabilityStdAllocatorConst",
          "displayName": "portability-std-allocator-const clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeUnionAccess",
          "displayName": "cppcoreguidelines-pro-type-union-access clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAlteraIdDependentBackwardBranch",
          "displayName": "altera-id-dependent-backward-branch clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityUniqueptrDeleteRelease",
          "displayName": "readability-uniqueptr-delete-release clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertSig30C",
          "displayName": "cert-sig30-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyOpenmpUseDefaultNone",
          "displayName": "openmp-use-default-none clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeUnaryStaticAssert",
          "displayName": "modernize-unary-static-assert clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAndroidCloexecInotifyInit1",
          "displayName": "android-cloexec-inotify-init1 clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilCleanupCtad",
          "displayName": "abseil-cleanup-ctad clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyFuchsiaDefaultArgumentsDeclarations",
          "displayName": "fuchsia-default-arguments-declarations clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertDcl50Cpp",
          "displayName": "cert-dcl50-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeUseUncaughtExceptions",
          "displayName": "modernize-use-uncaught-exceptions clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyFuchsiaDefaultArgumentsCalls",
          "displayName": "fuchsia-default-arguments-calls clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityMisplacedArrayIndex",
          "displayName": "readability-misplaced-array-index clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAbseilFasterStrsplitDelimiter",
          "displayName": "abseil-faster-strsplit-delimiter clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneDynamicStaticInitializers",
          "displayName": "bugprone-dynamic-static-initializers clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityStringCompare",
          "displayName": "readability-string-compare clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAlteraUnrollLoops",
          "displayName": "altera-unroll-loops clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeDeprecatedIosBaseAliases",
          "displayName": "modernize-deprecated-ios-base-aliases clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesInitVariables",
          "displayName": "cppcoreguidelines-init-variables clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAndroidCloexecPipe",
          "displayName": "android-cloexec-pipe clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMpiBufferDeref",
          "displayName": "mpi-buffer-deref clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAndroidCloexecDup",
          "displayName": "android-cloexec-dup clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityQualifiedAuto",
          "displayName": "readability-qualified-auto clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityNonConstParameter",
          "displayName": "readability-non-const-parameter clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneDanglingHandle",
          "displayName": "bugprone-dangling-handle clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyLlvmNamespaceComment",
          "displayName": "llvm-namespace-comment clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyDarwinAvoidSpinlock",
          "displayName": "darwin-avoid-spinlock clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleDefaultArguments",
          "displayName": "google-default-arguments clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertOop58Cpp",
          "displayName": "cert-oop58-cpp clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousEnumUsage",
          "displayName": "bugprone-suspicious-enum-usage clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppUseNullptr",
          "displayName": "hicpp-use-nullptr clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeStaticCastDowncast",
          "displayName": "cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityDuplicateInclude",
          "displayName": "readability-duplicate-include clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertDcl03C",
          "displayName": "cert-dcl03-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertDcl54Cpp",
          "displayName": "cert-dcl54-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleReadabilityBracesAroundStatements",
          "displayName": "google-readability-braces-around-statements clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyReadabilityImplicitBoolConversion",
          "displayName": "readability-implicit-bool-conversion clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyFuchsiaTrailingReturn",
          "displayName": "fuchsia-trailing-return clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneUndefinedMemoryManipulation",
          "displayName": "bugprone-undefined-memory-manipulation clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneArgumentComment",
          "displayName": "bugprone-argument-comment clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppSpecialMemberFunctions",
          "displayName": "hicpp-special-member-functions clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleObjcGlobalVariableDeclaration",
          "displayName": "google-objc-global-variable-declaration clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyMiscUnusedParameters",
          "displayName": "misc-unused-parameters clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAlteraStructPackAlign",
          "displayName": "altera-struct-pack-align clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyLlvmPreferRegisterOverUnsigned",
          "displayName": "llvm-prefer-register-over-unsigned clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesNoMalloc",
          "displayName": "cppcoreguidelines-no-malloc clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAndroidCloexecSocket",
          "displayName": "android-cloexec-socket clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppUseOverride",
          "displayName": "hicpp-use-override clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneNotNullTerminatedResult",
          "displayName": "bugprone-not-null-terminated-result clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyLinuxkernelMustCheckErrs",
          "displayName": "linuxkernel-must-check-errs clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyFuchsiaMultipleInheritance",
          "displayName": "fuchsia-multiple-inheritance clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneMultipleStatementMacro",
          "displayName": "bugprone-multiple-statement-macro clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAndroidCloexecEpollCreate1",
          "displayName": "android-cloexec-epoll-create1 clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneSwappedArguments",
          "displayName": "bugprone-swapped-arguments clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyPerformanceUnnecessaryCopyInitialization",
          "displayName": "performance-unnecessary-copy-initialization clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityRedundantSmartptrGet",
          "displayName": "readability-redundant-smartptr-get clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyDarwinDispatchOnceNonstatic",
          "displayName": "darwin-dispatch-once-nonstatic clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyLlvmElseAfterReturn",
          "displayName": "llvm-else-after-return clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertExp42C",
          "displayName": "cert-exp42-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceUnnecessaryValueParam",
          "displayName": "performance-unnecessary-value-param clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilitySimplifySubscriptExpr",
          "displayName": "readability-simplify-subscript-expr clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyGoogleGlobalNamesInHeaders",
          "displayName": "google-global-names-in-headers clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertDcl51Cpp",
          "displayName": "cert-dcl51-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppUseEqualsDelete",
          "displayName": "hicpp-use-equals-delete clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyFuchsiaHeaderAnonNamespaces",
          "displayName": "fuchsia-header-anon-namespaces clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyObjcForbiddenSubclassing",
          "displayName": "objc-forbidden-subclassing clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneUnusedReturnValue",
          "displayName": "bugprone-unused-return-value clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeRedundantVoidArg",
          "displayName": "modernize-redundant-void-arg clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyGoogleObjcAvoidNsobjectNew",
          "displayName": "google-objc-avoid-nsobject-new clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneStringIntegerAssignment",
          "displayName": "bugprone-string-integer-assignment clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeUseNodiscard",
          "displayName": "modernize-use-nodiscard clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyPerformanceMoveConstructorInit",
          "displayName": "performance-move-constructor-init clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyMiscConstCorrectness",
          "displayName": "misc-const-correctness clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilStringFindStartswith",
          "displayName": "abseil-string-find-startswith clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyObjcSuperSelf",
          "displayName": "objc-super-self clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertDcl16C",
          "displayName": "cert-dcl16-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyOpenmpExceptionEscape",
          "displayName": "openmp-exception-escape clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneSuspiciousMemsetUsage",
          "displayName": "bugprone-suspicious-memset-usage clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyHicppStaticAssert",
          "displayName": "hicpp-static-assert clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeVararg",
          "displayName": "cppcoreguidelines-pro-type-vararg clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneUncheckedOptionalAccess",
          "displayName": "bugprone-unchecked-optional-access clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeMacroToEnum",
          "displayName": "modernize-macro-to-enum clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyLlvmTwineLocal",
          "displayName": "llvm-twine-local clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAbseilNoNamespace",
          "displayName": "abseil-no-namespace clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAlteraSingleWorkItemBarrier",
          "displayName": "altera-single-work-item-barrier clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeUseBoolLiterals",
          "displayName": "modernize-use-bool-literals clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertFlp30C",
          "displayName": "cert-flp30-c clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityIdentifierNaming",
          "displayName": "readability-identifier-naming clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppUseEmplace",
          "displayName": "hicpp-use-emplace clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProBoundsArrayToPointerDecay",
          "displayName": "cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyBugproneVirtualNearMiss",
          "displayName": "bugprone-virtual-near-miss clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyModernizeUseAuto",
          "displayName": "modernize-use-auto clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyPerformanceNoIntToPtr",
          "displayName": "performance-no-int-to-ptr clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneMisplacedWideningCast",
          "displayName": "bugprone-misplaced-widening-cast clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityContainerDataPointer",
          "displayName": "readability-container-data-pointer clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneSignedCharMisuse",
          "displayName": "bugprone-signed-char-misuse clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyAbseilDurationSubtraction",
          "displayName": "abseil-duration-subtraction clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyModernizeDeprecatedHeaders",
          "displayName": "modernize-deprecated-headers clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyBugproneTerminatingContinue",
          "displayName": "bugprone-terminating-continue clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyCertDcl59Cpp",
          "displayName": "cert-dcl59-cpp clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCertFlp37C",
          "displayName": "cert-flp37-c clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyHicppUppercaseLiteralSuffix",
          "displayName": "hicpp-uppercase-literal-suffix clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyPerformanceForRangeCopy",
          "displayName": "performance-for-range-copy clang-tidy check",
          "enabled": true
        },
        {
          "shortName": "CppClangTidyReadabilityConstReturnType",
          "displayName": "readability-const-return-type clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyAndroidCloexecCreat",
          "displayName": "android-cloexec-creat clang-tidy check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyCppcoreguidelinesProTypeConstCast",
          "displayName": "cppcoreguidelines-pro-type-const-cast clang-tidy check",
          "enabled": false
        }
      ]
    },
    {
      "name": "Sass/SCSS",
      "inspections": [
        {
          "shortName": "SassScssResolvedByNameOnly",
          "displayName": "Missing import",
          "enabled": false,
          "description": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly [imported](https://sass-lang.com/documentation/at-rules/import) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: $var-in-other-file;\n    }\n"
        },
        {
          "shortName": "SassScssUnresolvedVariable",
          "displayName": "Unresolved variable",
          "enabled": false,
          "description": "Reports an unresolved [Sass/SCSS variable](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      margin: $unknown-var;\n    }\n"
        },
        {
          "shortName": "SassScssUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "enabled": false,
          "description": "Reports an unresolved [Sass/SCSS mixin](https://sass-lang.com/documentation/at-rules/mixin) reference.\n\n**Example:**\n\n\n    * {\n      @include unknown-mixin;\n    }\n"
        },
        {
          "shortName": "SassScssUnresolvedPlaceholderSelector",
          "displayName": "Unresolved placeholder selector",
          "enabled": false,
          "description": "Reports an unresolved [Sass/SCSS placeholder selector](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      @extend %unknown-placeholder-selector;\n    }\n"
        }
      ]
    },
    {
      "name": "HTML",
      "inspections": [
        {
          "shortName": "HtmlUnknownBooleanAttribute",
          "displayName": "Incorrect boolean attribute",
          "enabled": false,
          "description": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "CheckEmptyScriptTag",
          "displayName": "Empty tag",
          "enabled": false,
          "description": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
        },
        {
          "shortName": "HtmlUnknownTarget",
          "displayName": "Unresolved file in a link",
          "enabled": false,
          "description": "Reports an unresolved file in a link."
        },
        {
          "shortName": "HtmlUnknownAttribute",
          "displayName": "Unknown attribute",
          "enabled": false,
          "description": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "HtmlExtraClosingTag",
          "displayName": "Redundant closing tag",
          "enabled": false,
          "description": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
        },
        {
          "shortName": "HtmlMissingClosingTag",
          "displayName": "Missing closing tag",
          "enabled": false,
          "description": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
        },
        {
          "shortName": "HtmlUnknownTag",
          "displayName": "Unknown tag",
          "enabled": false,
          "description": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
        },
        {
          "shortName": "RequiredAttributes",
          "displayName": "Missing required attribute",
          "enabled": false,
          "description": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
        },
        {
          "shortName": "HtmlWrongAttributeValue",
          "displayName": "Wrong attribute value",
          "enabled": false,
          "description": "Reports an incorrect HTML attribute value."
        },
        {
          "shortName": "CheckValidXmlInScriptTagBody",
          "displayName": "Malformed content of 'script' tag",
          "enabled": false,
          "description": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
        },
        {
          "shortName": "HtmlUnknownAnchorTarget",
          "displayName": "Unresolved fragment in a link",
          "enabled": false,
          "description": "Reports an unresolved last part of an URL after the `#` sign."
        },
        {
          "shortName": "HtmlNonExistentInternetResource",
          "displayName": "Unresolved web link",
          "enabled": false,
          "description": "Reports an unresolved web link. Works by making network requests in the background."
        },
        {
          "shortName": "HtmlPresentationalElement",
          "displayName": "Presentational tag",
          "enabled": false,
          "description": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
        },
        {
          "shortName": "HtmlDeprecatedTag",
          "displayName": "Obsolete tag",
          "enabled": false,
          "description": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
        },
        {
          "shortName": "HtmlDeprecatedAttribute",
          "displayName": "Obsolete attribute",
          "enabled": false,
          "description": "Reports an obsolete HTML5 attribute."
        },
        {
          "shortName": "CheckImageSize",
          "displayName": "Mismatched image size",
          "enabled": false,
          "description": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
        }
      ]
    },
    {
      "name": "Flow type checker",
      "inspections": [
        {
          "shortName": "FlowJSError",
          "displayName": "Flow type checker",
          "enabled": false,
          "description": "Reports errors from [Flow](https://flowtype.org/)."
        },
        {
          "shortName": "FlowJSFlagCommentPlacement",
          "displayName": "Misplaced @flow flag",
          "enabled": false,
          "description": "Reports a `@flow` flag comment that is not located at the top of a file."
        },
        {
          "shortName": "FlowJSConfig",
          "displayName": "Missing .flowconfig",
          "enabled": false,
          "description": "Reports a JavaScript file with a `@flow` flag that doesn't have an associated `.flowconfig` file in the project."
        },
        {
          "shortName": "FlowJSCoverage",
          "displayName": "Code is not covered by Flow",
          "enabled": false,
          "description": "Reports JavaScript code fragments that are not covered by the Flow type checker. To use this inspection, configure the Flow executable in [Settings \\| Languages \\& Frameworks \\| JavaScript](settings://Settings.JavaScript)."
        }
      ]
    },
    {
      "name": "Common Practices and Code Improvements",
      "inspections": [
        {
          "shortName": "MemberCanBeMadeStatic.Global",
          "displayName": "Member can be made static (shared) (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "CppUseElementsView",
          "displayName": "std::views::keys/values can be used",
          "enabled": true
        },
        {
          "shortName": "UseIsOperator.1",
          "displayName": "Use 'is' operator",
          "enabled": true
        },
        {
          "shortName": "UseIsOperator.2",
          "displayName": "Use 'is' operator",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.Single.1",
          "displayName": "Replace with OfType<T>().Single()",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.Single.2",
          "displayName": "Replace with OfType<T>().Single() (replace with OfType<T>().Single(..))",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleCallToLast",
          "displayName": "Replace with single call to Last(..)",
          "enabled": true
        },
        {
          "shortName": "CppThrowExpressionCanBeReplacedWithRethrow",
          "displayName": "Throw expression can be replaced with a rethrow expression",
          "enabled": true
        },
        {
          "shortName": "UseArrayEmptyMethod",
          "displayName": "Use 'Array.Empty<T>()'",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.Single.2",
          "displayName": "Replace with OfType<T>().Single() (replace with OfType(Of ..)().Single(..))",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.Single.1",
          "displayName": "Replace with OfType<T>().Single() (replace with OfType(Of ..)().Single())",
          "enabled": true
        },
        {
          "shortName": "MethodHasAsyncOverloadWithCancellation",
          "displayName": "Method has async overload with cancellation support",
          "enabled": true
        },
        {
          "shortName": "CppIfCanBeReplacedByConstexprIf",
          "displayName": "If statement with constant condition can be replaced with 'if constexpr'",
          "enabled": true
        },
        {
          "shortName": "VBUseMethodAny.1",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "VBUseMethodAny.2",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "VBUseMethodAny.3",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "VBUseMethodAny.4",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "VBUseMethodAny.5",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "MissingBodyTag",
          "displayName": "Important tags or attributes missing (missing <body>)",
          "enabled": true
        },
        {
          "shortName": "EmptyStatement",
          "displayName": "Empty statement is redundant",
          "enabled": true
        },
        {
          "shortName": "UnassignedGetOnlyAutoProperty",
          "displayName": "Get-only auto-property is never assigned",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleCallToSingle",
          "displayName": "Replace with single call to Single(..)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithLastOrDefault.2",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithLastOrDefault.3",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithLastOrDefault.1",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithLastOrDefault.4",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.Any.2",
          "displayName": "Replace with OfType<T>().Any() (replace with OfType<T>().Any(..))",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.Any.1",
          "displayName": "Replace with OfType<T>().Any()",
          "enabled": true
        },
        {
          "shortName": "MemberCanBePrivate.Global",
          "displayName": "Member can be made private (non-private accessibility)",
          "enabled": false
        },
        {
          "shortName": "CppDiscardedPostfixOperatorResult",
          "displayName": "Result of a postfix operator is discarded",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.Last.1",
          "displayName": "Replace with OfType<T>().Last() (replace with OfType(Of ..)().Last())",
          "enabled": true
        },
        {
          "shortName": "AnnotateCanBeNullTypeMember",
          "displayName": "Declaration nullability inferred (type member is inferred to be nullable)",
          "enabled": false
        },
        {
          "shortName": "VBReplaceWithOfType.Last.2",
          "displayName": "Replace with OfType<T>().Last() (replace with OfType(Of ..)().Last(..))",
          "enabled": true
        },
        {
          "shortName": "UseThrowIfNullMethod",
          "displayName": "Use 'ArgumentNullException.ThrowIfNull'",
          "enabled": false
        },
        {
          "shortName": "SimplifyConditionalTernaryExpression",
          "displayName": "Simplify conditional ternary expression",
          "enabled": true
        },
        {
          "shortName": "InternalOrPrivateMemberNotDocumented",
          "displayName": "Missing XML comment for private or internal type or member",
          "enabled": false
        },
        {
          "shortName": "NestedStringInterpolation",
          "displayName": "Nested string interpolation can be inlined",
          "enabled": true
        },
        {
          "shortName": "TooWideLocalVariableScope",
          "displayName": "Local variable has too wide declaration scope",
          "enabled": true
        },
        {
          "shortName": "CppParameterMayBeConst",
          "displayName": "Parameter can be made const",
          "enabled": true
        },
        {
          "shortName": "RemoveConstructorInvocation",
          "displayName": "Remove constructor invocation",
          "enabled": false
        },
        {
          "shortName": "VBReplaceWithSingleCallToFirstOrDefault",
          "displayName": "Replace with single call to FirstOrDefault(..)",
          "enabled": true
        },
        {
          "shortName": "AnnotationRedundancyAtValueType",
          "displayName": "Nullability attribute usage with declaration of void or value type",
          "enabled": true
        },
        {
          "shortName": "ClearAttributeIsObsolete",
          "displayName": "Obsolete tags and attributes (attribute 'clear' is obsolete)",
          "enabled": true
        },
        {
          "shortName": "ClearAttributeIsObsolete.All",
          "displayName": "Obsolete tags and attributes (attribute 'clear' is obsolete)",
          "enabled": true
        },
        {
          "shortName": "PropertyCanBeMadeInitOnly.Global",
          "displayName": "Property can be made init-only (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "AnnotateNotNullParameter",
          "displayName": "Declaration nullability inferred (parameter is inferred to be not null)",
          "enabled": false
        },
        {
          "shortName": "StringLiteralAsInterpolationArgument",
          "displayName": "String literal can be inlined",
          "enabled": true
        },
        {
          "shortName": "ConvertToVbAutoPropertyWhenPossible",
          "displayName": "Convert property to auto-property when possible",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSimpleAssignment.False",
          "displayName": "Replace with simple assignment",
          "enabled": true
        },
        {
          "shortName": "PropertyCanBeMadeInitOnly.Local",
          "displayName": "Property can be made init-only (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "SimplifyLinqExpressionUseMinByAndMaxBy",
          "displayName": "Use 'MinBy' or 'MaxBy' instead of ordering and taking 'First' or 'Last'",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleAssignment.1",
          "displayName": "Replace with single assignment",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleAssignment.2",
          "displayName": "Replace with single assignment",
          "enabled": true
        },
        {
          "shortName": "CppPassValueParameterByConstReference",
          "displayName": "Pass value parameters by const reference",
          "enabled": false
        },
        {
          "shortName": "JoinDeclarationAndInitializer",
          "displayName": "Join local variable declaration and assignment",
          "enabled": true
        },
        {
          "shortName": "StringIndexOfIsCultureSpecific.2",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "StringIndexOfIsCultureSpecific.3",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "StringIndexOfIsCultureSpecific.1",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "UseIndexedProperty",
          "displayName": "Use indexed property",
          "enabled": true
        },
        {
          "shortName": "StringCompareToIsCultureSpecific",
          "displayName": "String.CompareTo is culture-specific",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleOrDefault.4",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleOrDefault.2",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleOrDefault.3",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReturnTypeCanBeEnumerable.Local",
          "displayName": "Return type can be IEnumerable<T> (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleOrDefault.1",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithFirstOrDefault",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "CppUseAssociativeContains",
          "displayName": "'contains' member function can be used",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.9",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.1",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.2",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.3",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.4",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.5",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.6",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.7",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.8",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "CppNonExplicitConvertingConstructor",
          "displayName": "Non-explicit converting constructor",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithLastOrDefault",
          "displayName": "Replace with LastOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "SimplifyIIf",
          "displayName": "Simplify 'IIf'",
          "enabled": true
        },
        {
          "shortName": "MemberCanBeInternal",
          "displayName": "Member or type can be made internal (friend)",
          "enabled": false
        },
        {
          "shortName": "ConvertToConstant.Local",
          "displayName": "Convert local variable or field into constant (private accessibility)",
          "enabled": false
        },
        {
          "shortName": "TypeParameterCanBeVariant",
          "displayName": "Type parameter could be declared as covariant or contravariant",
          "enabled": true
        },
        {
          "shortName": "ConvertToVbAutoProperty",
          "displayName": "Convert property to auto-property",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.Where",
          "displayName": "Replace with OfType<T>().Where() (replace with OfType(Of ..)().Where(..))",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleCallToFirstOrDefault",
          "displayName": "Replace with single call to FirstOrDefault(..)",
          "enabled": true
        },
        {
          "shortName": "PossibleMistakenArgument",
          "displayName": "Possible mistaken argument",
          "enabled": true
        },
        {
          "shortName": "VBUseTypeOfIsOperator.1",
          "displayName": "Use 'TypeOf .. Is ..' operator",
          "enabled": true
        },
        {
          "shortName": "VBUseTypeOfIsOperator.2",
          "displayName": "Use 'TypeOf .. Is ..' operator",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleCallToAny",
          "displayName": "Replace with single call to Any(..)",
          "enabled": true
        },
        {
          "shortName": "CppForLoopCanBeReplacedWithWhile",
          "displayName": "For-loop can be replaced with while-loop",
          "enabled": true
        },
        {
          "shortName": "AnnotateNotNullTypeMember",
          "displayName": "Declaration nullability inferred (type member is inferred to be not null)",
          "enabled": false
        },
        {
          "shortName": "UseVerbatimString",
          "displayName": "Literal length can be reduced by using verbatim string",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.SingleOrDefault.2",
          "displayName": "Replace with OfType<T>().SingleOrDefault() (replace with OfType(Of ..)().SingleOrDefault(..))",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.SingleOrDefault.1",
          "displayName": "Replace with OfType<T>().SingleOrDefault() (replace with OfType(Of ..)().SingleOrDefault())",
          "enabled": true
        },
        {
          "shortName": "CppCStyleCast",
          "displayName": "C-style cast is used instead of a C++ cast",
          "enabled": true
        },
        {
          "shortName": "CppLocalVariableMayBeConst",
          "displayName": "Local variable can be made const",
          "enabled": true
        },
        {
          "shortName": "StructCanBeMadeReadOnly",
          "displayName": "Struct can be made readonly",
          "enabled": true
        },
        {
          "shortName": "SuggestBaseTypeForParameter",
          "displayName": "Parameter can be declared with the base type",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.FirstOrDefault.1",
          "displayName": "Replace with OfType<T>().FirstOrDefault()",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.FirstOrDefault.2",
          "displayName": "Replace with OfType<T>().FirstOrDefault() (replace with OfType<T>().FirstOrDefault(..))",
          "enabled": true
        },
        {
          "shortName": "CppClassCanBeFinal",
          "displayName": "Class can be made final",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleCallToFirst",
          "displayName": "Replace with single call to First(..)",
          "enabled": true
        },
        {
          "shortName": "VBStringCompareToIsCultureSpecific",
          "displayName": "String.CompareTo is culture-specific",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleOrDefault",
          "displayName": "Replace with SingleOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.LastOrDefault.2",
          "displayName": "Replace with OfType<T>().LastOrDefault() (replace with OfType<T>().LastOrDefault(..))",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.LastOrDefault.1",
          "displayName": "Replace with OfType<T>().LastOrDefault()",
          "enabled": true
        },
        {
          "shortName": "VBStringEndsWithIsCultureSpecific",
          "displayName": "String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)",
          "enabled": false
        },
        {
          "shortName": "CppUseRangeAlgorithm",
          "displayName": "Algorithm operating on ranges can be used",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleAssignment.False",
          "displayName": "Replace with single assignment",
          "enabled": true
        },
        {
          "shortName": "MissingAltAttributeInImgTag",
          "displayName": "Important tags or attributes missing (<img> should specify alternative text)",
          "enabled": true
        },
        {
          "shortName": "StructMemberCanBeMadeReadOnly",
          "displayName": "Struct member can be made readonly",
          "enabled": false
        },
        {
          "shortName": "RemoveRedundantOrStatement.False",
          "displayName": "Remove redundant statement",
          "enabled": true
        },
        {
          "shortName": "UseMethodAny.0",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "UseMethodAny.1",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "UseMethodAny.4",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "UseMethodAny.2",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "UseMethodAny.3",
          "displayName": "Use method Any()",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleCallToCount",
          "displayName": "Replace with single call to Count(..)",
          "enabled": true
        },
        {
          "shortName": "CheckForReferenceEqualityInstead.1",
          "displayName": "Check for reference equality instead",
          "enabled": true
        },
        {
          "shortName": "CheckForReferenceEqualityInstead.3",
          "displayName": "Check for reference equality instead",
          "enabled": true
        },
        {
          "shortName": "CheckForReferenceEqualityInstead.2",
          "displayName": "Check for reference equality instead",
          "enabled": true
        },
        {
          "shortName": "CheckForReferenceEqualityInstead.4",
          "displayName": "Check for reference equality instead",
          "enabled": true
        },
        {
          "shortName": "LocalFunctionCanBeMadeStatic",
          "displayName": "Local function can be made static",
          "enabled": false
        },
        {
          "shortName": "VBRemoveToList.2",
          "displayName": "Remove ToList()",
          "enabled": true
        },
        {
          "shortName": "VBRemoveToList.1",
          "displayName": "Remove ToList()",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.SingleOrDefault.2",
          "displayName": "Replace with OfType<T>().SingleOrDefault() (replace with OfType<T>().SingleOrDefault(..))",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.SingleOrDefault.1",
          "displayName": "Replace with OfType<T>().SingleOrDefault()",
          "enabled": true
        },
        {
          "shortName": "NegationOfRelationalPattern",
          "displayName": "Simplify negated relational pattern",
          "enabled": true
        },
        {
          "shortName": "TryStatementsCanBeMerged",
          "displayName": "try-catch and try-finally statements can be merged",
          "enabled": true
        },
        {
          "shortName": "EmptyTitleTag",
          "displayName": "Important tags or attributes missing (empty <title>)",
          "enabled": true
        },
        {
          "shortName": "VBPossibleMistakenArgument",
          "displayName": "Possible mistaken argument",
          "enabled": true
        },
        {
          "shortName": "UseEventArgsEmptyField",
          "displayName": "Use 'EventArgs.Empty'",
          "enabled": true
        },
        {
          "shortName": "InvertCondition.1",
          "displayName": "Invert condition",
          "enabled": true
        },
        {
          "shortName": "UseMethodIsInstanceOfType",
          "displayName": "Use method IsInstanceOfType(..)",
          "enabled": true
        },
        {
          "shortName": "MemberCanBeMadeStatic.Local",
          "displayName": "Member can be made static (shared) (private accessibility)",
          "enabled": false
        },
        {
          "shortName": "UseCancellationTokenForIAsyncEnumerable",
          "displayName": "Use cancellation token",
          "enabled": true
        },
        {
          "shortName": "MemberCanBeFileLocal",
          "displayName": "Type can be made file-local",
          "enabled": false
        },
        {
          "shortName": "ReplaceWithOfType.Count.1",
          "displayName": "Replace with OfType<T>().Count()",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.Count.2",
          "displayName": "Replace with OfType<T>().Count() (replace with OfType<T>().Count(..))",
          "enabled": true
        },
        {
          "shortName": "CppMemberFunctionMayBeStatic",
          "displayName": "Member function can be made static",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.First.2",
          "displayName": "Replace with OfType<T>().First() (replace with OfType(Of ..)().First(..))",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.First.1",
          "displayName": "Replace with OfType<T>().First() (replace with OfType(Of ..)().First())",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleCallToLastOrDefault",
          "displayName": "Replace with single call to LastOrDefault(..)",
          "enabled": true
        },
        {
          "shortName": "UseArrayCreationExpression.2",
          "displayName": "Use array creation expression",
          "enabled": true
        },
        {
          "shortName": "UseArrayCreationExpression.1",
          "displayName": "Use array creation expression",
          "enabled": true
        },
        {
          "shortName": "AccessToStaticMemberViaDerivedType",
          "displayName": "Access to a static member of a type via a derived type",
          "enabled": true
        },
        {
          "shortName": "SpecifyACultureInStringConversionExplicitly",
          "displayName": "Specify string culture explicitly",
          "enabled": true
        },
        {
          "shortName": "StringEndsWithIsCultureSpecific",
          "displayName": "String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)",
          "enabled": false
        },
        {
          "shortName": "RemoveRedundantOrStatement.True",
          "displayName": "Remove redundant statement",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.2",
          "displayName": "Replace with OfType<T>()",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.1",
          "displayName": "Replace with OfType<T>()",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.3",
          "displayName": "Replace with OfType<T>()",
          "enabled": true
        },
        {
          "shortName": "FieldCanBeMadeReadOnly.Global",
          "displayName": "Field can be made readonly (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "ParameterTypeCanBeEnumerable.Local",
          "displayName": "Parameter type can be IEnumerable<T> (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "CppConstValueFunctionReturnType",
          "displayName": "Function returns by const value",
          "enabled": true
        },
        {
          "shortName": "CppTooWideScopeInitStatement",
          "displayName": "Variable can be moved to init statement",
          "enabled": true
        },
        {
          "shortName": "CppUseStdSize",
          "displayName": "std::size can be used",
          "enabled": true
        },
        {
          "shortName": "VBStringLastIndexOfIsCultureSpecific.1",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBStringLastIndexOfIsCultureSpecific.2",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBStringLastIndexOfIsCultureSpecific.3",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBUseMethodIsInstanceOfType",
          "displayName": "Use method IsInstanceOfType(..)",
          "enabled": true
        },
        {
          "shortName": "RemoveToList.2",
          "displayName": "Remove ToList()",
          "enabled": true
        },
        {
          "shortName": "RemoveToList.1",
          "displayName": "Remove ToList()",
          "enabled": true
        },
        {
          "shortName": "CppTooWideScope",
          "displayName": "Variable can be moved to inner scope",
          "enabled": true
        },
        {
          "shortName": "CppFunctionalStyleCast",
          "displayName": "Functional-style cast is used instead of a C++ cast",
          "enabled": true
        },
        {
          "shortName": "MethodHasAsyncOverload",
          "displayName": "Method has async overload",
          "enabled": true
        },
        {
          "shortName": "StringStartsWithIsCultureSpecific",
          "displayName": "String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)",
          "enabled": false
        },
        {
          "shortName": "VBReplaceWithOfType.2",
          "displayName": "Replace with OfType<T>() (replace with OfType(Of ..)())",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.1",
          "displayName": "Replace with OfType<T>() (replace with OfType(Of ..)())",
          "enabled": true
        },
        {
          "shortName": "AnnotationRedundancyInHierarchy",
          "displayName": "Annotation duplicate in hierarchy",
          "enabled": true
        },
        {
          "shortName": "RedundantIsBeforeRelationalPattern",
          "displayName": "Redundant 'is'",
          "enabled": true
        },
        {
          "shortName": "MemberCanBeProtected.Global",
          "displayName": "Member can be made protected (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "VBPossibleMistakenCallToGetType.1",
          "displayName": "Possible mistaken call to GetType()",
          "enabled": true
        },
        {
          "shortName": "VBPossibleMistakenCallToGetType.2",
          "displayName": "Possible mistaken call to GetType()",
          "enabled": true
        },
        {
          "shortName": "MissingHeadTag",
          "displayName": "Important tags or attributes missing (missing <head>)",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.LastOrDefault.1",
          "displayName": "Replace with OfType<T>().LastOrDefault() (replace with OfType(Of ..)().LastOrDefault())",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.LastOrDefault.2",
          "displayName": "Replace with OfType<T>().LastOrDefault() (replace with OfType(Of ..)().LastOrDefault(..))",
          "enabled": true
        },
        {
          "shortName": "StringLastIndexOfIsCultureSpecific.3",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "StringLastIndexOfIsCultureSpecific.2",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "StringLastIndexOfIsCultureSpecific.1",
          "displayName": "String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.Count.2",
          "displayName": "Replace with OfType<T>().Count() (replace with OfType(Of ..)().Count(..))",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.Count.1",
          "displayName": "Replace with OfType<T>().Count() (replace with OfType(Of ..)().Count())",
          "enabled": true
        },
        {
          "shortName": "VBCheckForReferenceEqualityInstead.2",
          "displayName": "Check for reference equality instead",
          "enabled": true
        },
        {
          "shortName": "VBCheckForReferenceEqualityInstead.1",
          "displayName": "Check for reference equality instead",
          "enabled": true
        },
        {
          "shortName": "PublicConstructorInAbstractClass",
          "displayName": "Make constructor in abstract class protected",
          "enabled": true
        },
        {
          "shortName": "StringCompareIsCultureSpecific.6",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "StringCompareIsCultureSpecific.4",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "StringCompareIsCultureSpecific.5",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "StringCompareIsCultureSpecific.2",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "StringCompareIsCultureSpecific.3",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "StringCompareIsCultureSpecific.1",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "MultipleNullableAttributesUsage",
          "displayName": "Multiple nullable attributes usage",
          "enabled": true
        },
        {
          "shortName": "CppParameterMayBeConstPtrOrRef",
          "displayName": "Parameter can be made pointer/reference to const",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleCallToSingle",
          "displayName": "Replace with single call to Single(..)",
          "enabled": true
        },
        {
          "shortName": "CppUseFamiliarTemplateSyntaxForGenericLambdas",
          "displayName": "Lambda can be rewritten to use explicit template parameters",
          "enabled": true
        },
        {
          "shortName": "SimplifyLinqExpressionUseAll",
          "displayName": "Simplify LINQ expression (use 'All')",
          "enabled": true
        },
        {
          "shortName": "MissingTitleTag",
          "displayName": "Important tags or attributes missing (missing <title>)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithFirstOrDefault.1",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithFirstOrDefault.3",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithFirstOrDefault.2",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithFirstOrDefault.4",
          "displayName": "Replace with FirstOrDefault($args$)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithStringIsNullOrEmpty",
          "displayName": "Use 'String.IsNullOrEmpty'",
          "enabled": true
        },
        {
          "shortName": "NegativeEqualityExpression",
          "displayName": "Simplify negative equality expression",
          "enabled": true
        },
        {
          "shortName": "CppUseStructuredBinding",
          "displayName": "Structured binding can be used",
          "enabled": true
        },
        {
          "shortName": "SimplifyLinqExpressionUseAny",
          "displayName": "Simplify LINQ expression (use 'Any')",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleCallToLast",
          "displayName": "Replace with single call to Last(..)",
          "enabled": true
        },
        {
          "shortName": "Asp.TagAttributeWithOptionalValue",
          "displayName": "Attribute with optional value problem",
          "enabled": true
        },
        {
          "shortName": "AutoPropertyCanBeMadeGetOnly.Local",
          "displayName": "Auto-property can be made get-only (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "CppJoinDeclarationAndAssignment",
          "displayName": "Declaration and assignment can be joined",
          "enabled": true
        },
        {
          "shortName": "ConvertToVbAutoPropertyWithPrivateSetter",
          "displayName": "Convert property to auto-property with private setter",
          "enabled": true
        },
        {
          "shortName": "AnnotateCanBeNullParameter",
          "displayName": "Declaration nullability inferred (parameter is inferred to be nullable)",
          "enabled": false
        },
        {
          "shortName": "MissingHeadAndBodyTags",
          "displayName": "Important tags or attributes missing (missing <head> and <body>)",
          "enabled": true
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.5",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.4",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.6",
          "displayName": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.1",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.3",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBStringCompareIsCultureSpecific.2",
          "displayName": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "MoreSpecificForeachVariableTypeAvailable",
          "displayName": "Iteration variable can be declared with a more specific type",
          "enabled": true
        },
        {
          "shortName": "CppReplaceTieWithStructuredBinding",
          "displayName": "Structured binding can be used instead of tie(..)",
          "enabled": true
        },
        {
          "shortName": "CppUseEraseAlgorithm",
          "displayName": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom",
          "enabled": true
        },
        {
          "shortName": "PossibleMistakenCallToGetType.2",
          "displayName": "Possible mistaken call to GetType()",
          "enabled": true
        },
        {
          "shortName": "PossibleMistakenCallToGetType.1",
          "displayName": "Possible mistaken call to GetType()",
          "enabled": true
        },
        {
          "shortName": "CppUseAlgorithmWithCount",
          "displayName": "Algorithm accepting an iterator and a count can be used",
          "enabled": true
        },
        {
          "shortName": "ConvertToConstant.Global",
          "displayName": "Convert local variable or field into constant (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "CenterTagIsObsolete",
          "displayName": "Obsolete tags and attributes (<center> is obsolete)",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.Any.2",
          "displayName": "Replace with OfType<T>().Any() (replace with OfType(Of ..)().Any(..))",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.Any.1",
          "displayName": "Replace with OfType<T>().Any() (replace with OfType(Of ..)().Any())",
          "enabled": true
        },
        {
          "shortName": "UseNullableAttributesSupportedByCompiler",
          "displayName": "Use compiler-supported nullable attributes",
          "enabled": true
        },
        {
          "shortName": "ParameterTypeCanBeEnumerable.Global",
          "displayName": "Parameter type can be IEnumerable<T> (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.LongCount",
          "displayName": "Replace with OfType<T>().LongCount()",
          "enabled": true
        },
        {
          "shortName": "DoubleNegationInPattern",
          "displayName": "Simplify negated pattern",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSimpleAssignment.True",
          "displayName": "Replace with simple assignment",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleCallToLastOrDefault",
          "displayName": "Replace with single call to LastOrDefault(..)",
          "enabled": true
        },
        {
          "shortName": "CppUseTypeTraitAlias",
          "displayName": "Type trait can be simplified using a template alias or a variable template",
          "enabled": true
        },
        {
          "shortName": "CppSmartPointerVsMakeFunction",
          "displayName": "Constructor of smart pointer is used instead of its make function",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleAssignment.True",
          "displayName": "Replace with single assignment",
          "enabled": true
        },
        {
          "shortName": "CppRedundantNamespaceDefinition",
          "displayName": "Namespace definition containing single class specialization",
          "enabled": true
        },
        {
          "shortName": "CppVariableCanBeMadeConstexpr",
          "displayName": "Variable can be made constexpr",
          "enabled": true
        },
        {
          "shortName": "ClassCanBeSealed.Local",
          "displayName": "Class can be made sealed (non-inheritable) (private accessibility)",
          "enabled": false
        },
        {
          "shortName": "ReplaceWithSingleCallToAny",
          "displayName": "Replace with single call to Any(..)",
          "enabled": true
        },
        {
          "shortName": "VBUseFirstInstead",
          "displayName": "Use First() instead",
          "enabled": true
        },
        {
          "shortName": "AutoPropertyCanBeMadeGetOnly.Global",
          "displayName": "Auto-property can be made get-only (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "EmptyEmbeddedStatement",
          "displayName": "Empty control statement body",
          "enabled": true
        },
        {
          "shortName": "MethodSupportsCancellation",
          "displayName": "Method supports cancellation",
          "enabled": true
        },
        {
          "shortName": "CppMemberFunctionMayBeConst",
          "displayName": "Member function can be made const",
          "enabled": true
        },
        {
          "shortName": "MemberCanBeProtected.Local",
          "displayName": "Member can be made protected (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "SuggestBaseTypeForParameterInConstructor",
          "displayName": "Parameter can be declared with the base type",
          "enabled": true
        },
        {
          "shortName": "NotObservableAnnotationRedundancy",
          "displayName": "Nullability attribute used with declaration that cannot be directly referenced from other code",
          "enabled": true
        },
        {
          "shortName": "FieldCanBeMadeReadOnly.Local",
          "displayName": "Field can be made readonly (private accessibility)",
          "enabled": false
        },
        {
          "shortName": "BaseMemberHasParams",
          "displayName": "Base member has 'params' parameter, but the overrider does not have it",
          "enabled": true
        },
        {
          "shortName": "CppZeroConstantCanBeReplacedWithNullptr",
          "displayName": "Zero constant can be replaced with nullptr",
          "enabled": true
        },
        {
          "shortName": "ReturnTypeCanBeEnumerable.Global",
          "displayName": "Return type can be IEnumerable<T> (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.First.1",
          "displayName": "Replace with OfType<T>().First()",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.First.2",
          "displayName": "Replace with OfType<T>().First() (replace with OfType<T>().First(..))",
          "enabled": true
        },
        {
          "shortName": "VBStringIndexOfIsCultureSpecific.1",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBStringIndexOfIsCultureSpecific.3",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "VBStringIndexOfIsCultureSpecific.2",
          "displayName": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)",
          "enabled": true
        },
        {
          "shortName": "CppReplaceMemsetWithZeroInitialization",
          "displayName": "Zero initialization can be used instead of memset",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleCallToFirst",
          "displayName": "Replace with single call to First(..)",
          "enabled": true
        },
        {
          "shortName": "VBStringStartsWithIsCultureSpecific",
          "displayName": "String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)",
          "enabled": false
        },
        {
          "shortName": "SpecifyStringComparison",
          "displayName": "Specify string comparison explicitly",
          "enabled": true
        },
        {
          "shortName": "SimplifyConditionalOperator",
          "displayName": "Simplify conditional operator",
          "enabled": true
        },
        {
          "shortName": "CppCompileTimeConstantCanBeReplacedWithBooleanConstant",
          "displayName": "Compile-time constant expression can be replaced with either 'true' or 'false'",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.Where",
          "displayName": "Replace with OfType<T>().Where() (replace with OfType<T>().Where(..))",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.FirstOrDefault.2",
          "displayName": "Replace with OfType<T>().FirstOrDefault() (replace with OfType(Of ..)().FirstOrDefault(..))",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithOfType.FirstOrDefault.1",
          "displayName": "Replace with OfType<T>().FirstOrDefault() (replace with OfType(Of ..)().FirstOrDefault())",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.Last.1",
          "displayName": "Replace with OfType<T>().Last()",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithOfType.Last.2",
          "displayName": "Replace with OfType<T>().Last() (replace with OfType<T>().Last(..))",
          "enabled": true
        },
        {
          "shortName": "CppNonExplicitConversionOperator",
          "displayName": "Non-explicit conversion operator",
          "enabled": true
        },
        {
          "shortName": "ConvertIfToOrExpression",
          "displayName": "Convert 'if' into '||'",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleCallToCount",
          "displayName": "Replace with single call to Count(..)",
          "enabled": true
        },
        {
          "shortName": "ContainerAnnotationRedundancy",
          "displayName": "Container nullability attribute usage with declaration of non-container type",
          "enabled": true
        },
        {
          "shortName": "VBUseArrayCreationExpression.1",
          "displayName": "Use array creation expression",
          "enabled": true
        },
        {
          "shortName": "VBUseArrayCreationExpression.2",
          "displayName": "Use array creation expression",
          "enabled": true
        },
        {
          "shortName": "ConvertIfDoToWhile",
          "displayName": "Convert 'if do while' into 'while'",
          "enabled": true
        },
        {
          "shortName": "VBSimplifyLinqExpression.10",
          "displayName": "Simplify expression",
          "enabled": true
        },
        {
          "shortName": "UseEmptyTypesField",
          "displayName": "Use 'Type.EmptyTypes'",
          "enabled": true
        },
        {
          "shortName": "VBReplaceWithSingleCallToSingleOrDefault",
          "displayName": "Replace with single call to SingleOrDefault(..)",
          "enabled": true
        },
        {
          "shortName": "ReplaceWithSingleCallToSingleOrDefault",
          "displayName": "Replace with single call to SingleOrDefault(..)",
          "enabled": true
        },
        {
          "shortName": "ClassCanBeSealed.Global",
          "displayName": "Class can be made sealed (non-inheritable) (non-private accessibility)",
          "enabled": false
        },
        {
          "shortName": "CppReinterpretCastFromVoidPtr",
          "displayName": "reinterpret_cast is used instead of a static_cast",
          "enabled": true
        },
        {
          "shortName": "ExtractCommonPropertyPattern",
          "displayName": "Extract common property pattern",
          "enabled": false
        },
        {
          "shortName": "MemberCanBePrivate.Local",
          "displayName": "Member can be made private (private accessibility)",
          "enabled": true
        }
      ]
    },
    {
      "name": "Bitwise operation issues",
      "inspections": [
        {
          "shortName": "ShiftOutOfRangeJS",
          "displayName": "Shift operation by possibly wrong constant",
          "enabled": false,
          "description": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range `0..31`, shifting by negative or overly large values."
        },
        {
          "shortName": "IncompatibleMaskJS",
          "displayName": "Incompatible bitwise mask operation",
          "enabled": false,
          "description": "Reports a bitwise mask expression which for sure evaluates to `true` or `false`. Expressions are of the form `(var & constant1) == constant2` or `(var | constant1) == constant2`, where `constant1` and `constant2` are incompatible bitmask constants.\n\nExample:\n\n```\n// Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask & 0xFF00) == 0x1234) {...}\n```"
        },
        {
          "shortName": "JSBitwiseOperatorUsage",
          "displayName": "Bitwise operator usage",
          "enabled": true,
          "description": "Reports a suspicious usage of a bitwise AND (\"`&`\") or OR (\"`|`\") operator. Usually it is a typo and the result of applying boolean operations AND (\"`&&`\") and OR (\"`||`\") is expected."
        },
        {
          "shortName": "PointlessBitwiseExpressionJS",
          "displayName": "Bitwise expression can be simplified",
          "enabled": false,
          "description": "Reports an expression that includes `and` with zero, `or` by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings."
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "JSClosureCompilerSyntax",
          "displayName": "Incorrect usage of JSDoc tags",
          "enabled": true,
          "description": "Reports warnings implied by *Google Closure Compiler* annotations including correct use of `@abstract`, `@interface`, and `@implements` tags."
        },
        {
          "shortName": "JSXSyntaxUsed",
          "displayName": "JSX syntax used",
          "enabled": false,
          "description": "Reports a usage of a JSX tag in JavaScript code."
        },
        {
          "shortName": "JSJoinVariableDeclarationAndAssignment",
          "displayName": "Variable declaration can be merged with the first assignment to the variable",
          "enabled": true,
          "description": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression."
        },
        {
          "shortName": "JSUnresolvedVariable",
          "displayName": "Unresolved JavaScript variable",
          "enabled": true,
          "description": "Reports an unresolved referenced variable or field.\n\nTypeScript code is ignored."
        },
        {
          "shortName": "JSDuplicatedDeclaration",
          "displayName": "Duplicate declaration",
          "enabled": true,
          "description": "Reports multiple declarations in a scope."
        },
        {
          "shortName": "JSFileReferences",
          "displayName": "Unresolved file reference",
          "enabled": true,
          "description": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references."
        },
        {
          "shortName": "ES6ClassMemberInitializationOrder",
          "displayName": "Use of possibly unassigned property in a static initializer",
          "enabled": false,
          "description": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.   \n\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later."
        },
        {
          "shortName": "JSCommentMatchesSignature",
          "displayName": "Mismatched JSDoc and function signature",
          "enabled": true,
          "description": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment.\n\n**Example:**\n\n\n    /**\n     * @param height Height in pixels\n     */\n    function sq(height, width) {} // width is not documented\n\nAfter the quick-fix is applied:\n\n\n    /**\n     * @param height Height in pixels\n     * @param width\n     */\n    function sq(height, width) {}\n"
        },
        {
          "shortName": "JSValidateTypes",
          "displayName": "Type mismatch",
          "enabled": false,
          "description": "Reports incorrect type of:\n\n* a parameter in a function call\n* a return value\n* an assigned expression\n\nTypeScript code is ignored."
        },
        {
          "shortName": "JSUnresolvedLibraryURL",
          "displayName": "Missed locally stored library for HTTP link",
          "enabled": true,
          "description": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation."
        },
        {
          "shortName": "JSUnresolvedFunction",
          "displayName": "Unresolved JavaScript function",
          "enabled": true,
          "description": "Reports an unresolved function in a call.\n\nTypeScript code is ignored."
        },
        {
          "shortName": "JSCheckFunctionSignatures",
          "displayName": "Signature mismatch",
          "enabled": true,
          "description": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.\n\nTypeScript code is ignored."
        },
        {
          "shortName": "JSReferencingMutableVariableFromClosure",
          "displayName": "Referencing mutable variable from closure",
          "enabled": true,
          "description": "Reports access to outer mutable variables from functions.\n\nExample:\n\n\n      for (var i = 1; i <= 3; i++) {\n        setTimeout(function() {\n            console.log(i); // bad\n        }, 0);\n      }\n"
        },
        {
          "shortName": "JSValidateJSDoc",
          "displayName": "Syntax errors and unresolved references in JSDoc",
          "enabled": true,
          "description": "Reports a syntax discrepancy in a documentation comment."
        },
        {
          "shortName": "JSAccessibilityCheck",
          "displayName": "Inaccessible @private and @protected members referenced",
          "enabled": true,
          "description": "Reports a reference to a JavaScript member that is marked with a `@private` or `@protected` tag but does not comply with visibility rules that these tags imply."
        },
        {
          "shortName": "JSUnfilteredForInLoop",
          "displayName": "Unfiltered for..in loop",
          "enabled": false,
          "description": "Reports unfiltered `for-in` loops.   \n\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when `Object`'s prototype may be incorrectly modified. For example, the following code will print **42** and **myMethod** :   \n\n\n    Object.prototype.myMethod = function myMethod() {};\n    let a = { foo: 42 };\n    for (let i in a) {\n      console.log(a[i]);\n    }\n\nSuggests replacing the whole loop with a `Object.keys()` method or adding a `hasOwnProperty()` check. After applying the quick-fix the code looks as follows:\n\n\n    for (let i in a) {\n      if (a.hasOwnProperty(i)) {\n        console.log(a[i]);\n      }\n    }\n"
        },
        {
          "shortName": "JSUnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "enabled": true,
          "description": "Reports an unneeded semicolon."
        },
        {
          "shortName": "JSMethodCanBeStatic",
          "displayName": "Method can be made 'static'",
          "enabled": true,
          "description": "Reports a class method that can be safely made `static`. A method can be `static` if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass.\n\n\nUse the first checkbox below to inspect only `private` methods."
        },
        {
          "shortName": "JSUndeclaredVariable",
          "displayName": "Implicitly declared global JavaScript variable",
          "enabled": true,
          "description": "Reports an implicit declaration of a global variable.\n\nExample:\n\n\n      var aaa = 1; // good\n      bbb = 2; // bad, if bbb is not declared with 'var' somewhere\n"
        },
        {
          "shortName": "JSMismatchedCollectionQueryUpdate",
          "displayName": "Mismatched query and update of collection",
          "enabled": true,
          "description": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error.\n\n\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods."
        },
        {
          "shortName": "ES6PreferShortImport",
          "displayName": "Import can be shortened",
          "enabled": false,
          "description": "Reports an ES6 import whose `from` part can be shortened. Suggests importing the parent directory."
        },
        {
          "shortName": "ES6DestructuringVariablesMerge",
          "displayName": "Destructuring properties with the same key",
          "enabled": false,
          "description": "Reports multiple destructuring properties with identical keys. Suggests merging the properties."
        },
        {
          "shortName": "JSLastCommaInObjectLiteral",
          "displayName": "Unneeded last comma in object literal",
          "enabled": true,
          "description": "Reports usages of a trailing comma in object literals.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
        },
        {
          "shortName": "JSAnnotator",
          "displayName": "ECMAScript specification is not followed",
          "enabled": false,
          "description": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.   \nGenerally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors."
        },
        {
          "shortName": "JSNonStrictModeUsed",
          "displayName": "Non-strict mode used",
          "enabled": false,
          "description": "Reports a JavaScript file that is not in the `strict` mode."
        },
        {
          "shortName": "JSXUnresolvedComponent",
          "displayName": "Unresolved JSX component",
          "enabled": false,
          "description": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
        },
        {
          "shortName": "ES6ShorthandObjectProperty",
          "displayName": "Property can be replaced with shorthand",
          "enabled": false,
          "description": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\nExample:\n\n\n    var obj = {foo:foo}\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    var obj = {foo}\n"
        },
        {
          "shortName": "JSPrimitiveTypeWrapperUsage",
          "displayName": "Primitive type object wrapper used",
          "enabled": true,
          "description": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost."
        },
        {
          "shortName": "JSLastCommaInArrayLiteral",
          "displayName": "Unneeded last comma in array literal",
          "enabled": true,
          "description": "Reports a usage of a trailing comma in an array literal.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
        },
        {
          "shortName": "JSDeprecatedSymbols",
          "displayName": "Deprecated symbol used",
          "enabled": true,
          "description": "Reports a usage of a deprecated function variable."
        },
        {
          "shortName": "JSUnresolvedExtXType",
          "displayName": "Unresolved Ext JS xtype",
          "enabled": true,
          "description": "Reports an Ext JS `xtype` reference that doesn't have a corresponding class."
        },
        {
          "shortName": "ES6RedundantNestingInTemplateLiteral",
          "displayName": "Redundant nesting in template literal",
          "enabled": false,
          "description": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\nExample:\n\n\n    let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    let a = `Hello, Brave New World!`\n"
        },
        {
          "shortName": "JSJQueryEfficiency",
          "displayName": "JQuery selector can be optimized",
          "enabled": true,
          "description": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional)."
        },
        {
          "shortName": "WebpackConfigHighlighting",
          "displayName": "Webpack config compliance with JSON Schema",
          "enabled": false,
          "description": "Validates options in webpack config files (which name should start with \\`webpack\\`, e.g. \\`webpack.config.js\\`) against [webpack options schema](https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json).   \n\nDisable this inspection to turn off validation and code completion inside the configuration object."
        },
        {
          "shortName": "RoslynAnalyzersOutputInspection",
          "displayName": "Roslyn analyzers output",
          "enabled": true
        },
        {
          "shortName": "RiderSecurityErrorsInspection",
          "displayName": "Rider project security errors",
          "enabled": false
        },
        {
          "shortName": "RiderSolutionErrorsInspection",
          "displayName": "Rider toolset and environment errors",
          "enabled": false
        },
        {
          "shortName": "IncorrectFormatting",
          "displayName": "Incorrect formatting",
          "enabled": false,
          "description": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
        },
        {
          "shortName": "ReassignedToPlainText",
          "displayName": "Reassigned to plain text",
          "enabled": false,
          "description": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
        },
        {
          "shortName": "RedundantSuppression",
          "displayName": "Redundant suppression",
          "enabled": false,
          "description": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
        },
        {
          "shortName": "TodoComment",
          "displayName": "TODO comment",
          "enabled": false,
          "description": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
        },
        {
          "shortName": "EmptyDirectory",
          "displayName": "Empty directory",
          "enabled": false,
          "description": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
        },
        {
          "shortName": "SyntaxError",
          "displayName": "Syntax error",
          "enabled": false,
          "description": "Reports syntax errors that have been found in the result of a batch code inspection run."
        },
        {
          "shortName": "InconsistentLineSeparators",
          "displayName": "Inconsistent line separators",
          "enabled": false,
          "description": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
        },
        {
          "shortName": "ProblematicWhitespace",
          "displayName": "Problematic whitespace",
          "enabled": false,
          "description": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
        },
        {
          "shortName": "LongLine",
          "displayName": "Line is longer than allowed by code style",
          "enabled": false,
          "description": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
        },
        {
          "shortName": "Annotator",
          "displayName": "Annotator",
          "enabled": false,
          "description": "Reports problems that are found by language annotators in the result of a batch code inspection run."
        },
        {
          "shortName": "InjectedReferences",
          "displayName": "Injected references",
          "enabled": false,
          "description": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
        },
        {
          "shortName": "QodanaServiceMessage",
          "displayName": "Qodana service message",
          "enabled": false,
          "description": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
        }
      ]
    },
    {
      "name": "Unity",
      "inspections": [
        {
          "shortName": "Unity.Entities.SingletonMustBeRequested",
          "displayName": "To use the result of a 'GetSingleton<{0}>' call in the function, 'OnCreate' must include a 'RequireForUpdate' call.",
          "enabled": false
        },
        {
          "shortName": "Unity.UnknownLayer",
          "displayName": "The layer is not defined in the 'Tags & Layers'",
          "enabled": true
        },
        {
          "shortName": "Unity.IncorrectScriptableObjectInstantiation",
          "displayName": "'ScriptableObject' instances must be instantiated with 'ScriptableObject.CreateInstance<T>()' instead of 'new'",
          "enabled": true
        },
        {
          "shortName": "Unity.LoadSceneUnexistingScene",
          "displayName": "Scene does not exist",
          "enabled": true
        },
        {
          "shortName": "Unity.DuplicateShortcut",
          "displayName": "The same shortcut is defined for another menu item",
          "enabled": true
        },
        {
          "shortName": "Unity.UnknownTag",
          "displayName": "The tag is not defined in the 'Tags & Layers'",
          "enabled": true
        },
        {
          "shortName": "Unity.LoadSceneAmbiguousSceneName",
          "displayName": "Short scene name is not unique",
          "enabled": true
        },
        {
          "shortName": "Unity.LoadSceneDisabledSceneName",
          "displayName": "Scene is disabled in the build settings",
          "enabled": true
        },
        {
          "shortName": "Unity.IncorrectMethodSignatureInStringLiteral",
          "displayName": "Method referenced in string literal does not have the expected signature",
          "enabled": true
        },
        {
          "shortName": "Unity.InstantiateWithoutParent",
          "displayName": "Setting 'parent' property immediately after object instantiation is inefficient",
          "enabled": true
        },
        {
          "shortName": "Unity.ExpectedComponent",
          "displayName": "Expected type derived from 'Component' or 'MonoBehaviour'",
          "enabled": true
        },
        {
          "shortName": "Unity.LoadSceneWrongIndex",
          "displayName": "The index is missing in the build settings",
          "enabled": true
        },
        {
          "shortName": "Unity.RedundantSerializeFieldAttribute",
          "displayName": "Redundant attribute usage (redundant 'SerializeField' attribute)",
          "enabled": true
        },
        {
          "shortName": "Unity.InefficientPropertyAccess",
          "displayName": "Repeated access of property on built in component is inefficient",
          "enabled": true
        },
        {
          "shortName": "Unity.DuplicateEventFunction",
          "displayName": "Event function with the same name is already declared",
          "enabled": true
        },
        {
          "shortName": "Unity.RedundantHideInInspectorAttribute",
          "displayName": "Redundant attribute usage (redundant 'HideInInspector' attribute)",
          "enabled": true
        },
        {
          "shortName": "Unity.LoadSceneUnknownSceneName",
          "displayName": "There is no scene with the same name in the build settings",
          "enabled": true
        },
        {
          "shortName": "Unity.Entities.NotUpdatedComponentLookup",
          "displayName": "Field of 'ComponentLookup' type must be updated before being used.",
          "enabled": false
        },
        {
          "shortName": "Unity.IncorrectMonoBehaviourInstantiation",
          "displayName": "'MonoBehaviour' instances must be instantiated with 'GameObject.AddComponent<T>()' instead of 'new'",
          "enabled": true
        },
        {
          "shortName": "Unity.ExpectedScriptableObject",
          "displayName": "Expected type derived from 'ScriptableObject'",
          "enabled": true
        },
        {
          "shortName": "Unity.PossibleMisapplicationOfAttributeToMultipleFields",
          "displayName": "Possible incorrect application of attribute to multiple fields",
          "enabled": true
        },
        {
          "shortName": "Unity.RedundantInitializeOnLoadAttribute",
          "displayName": "Redundant attribute usage (redundant 'InitializeOnLoad' attribute)",
          "enabled": true
        },
        {
          "shortName": "Unity.UnknownResource",
          "displayName": "The resource is not defined in the project",
          "enabled": true
        },
        {
          "shortName": "Unity.ParameterNotDerivedFromComponent",
          "displayName": "Parameter should be derived from 'Component'",
          "enabled": true
        },
        {
          "shortName": "Unity.UnknownAnimatorStateName",
          "displayName": "There is no animator state with the same name in the project.",
          "enabled": true
        },
        {
          "shortName": "Unity.UnknownInputAxes",
          "displayName": "The input name is not defined in the Input manager",
          "enabled": true
        },
        {
          "shortName": "Unity.IncorrectMethodSignature",
          "displayName": "Incorrect method signature",
          "enabled": true
        },
        {
          "shortName": "Unity.PropertyDrawerOnGUIBase",
          "displayName": "Avoid 'base.OnGUI()' in classes derived from 'PropertyDrawer'",
          "enabled": true
        },
        {
          "shortName": "Unity.NoNullPropagation",
          "displayName": "Possible unintended bypass of lifetime check of underlying Unity engine object ('?.' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object)",
          "enabled": true
        },
        {
          "shortName": "Unity.PreferGuidReference",
          "displayName": "Prefer GUID-based assembly references",
          "enabled": true
        },
        {
          "shortName": "Unity.PreferNonAllocApi",
          "displayName": "Alternative non-allocating method available",
          "enabled": true
        },
        {
          "shortName": "Unity.NoNullCoalescing",
          "displayName": "Possible unintended bypass of lifetime check of underlying Unity engine object ('??' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object)",
          "enabled": true
        },
        {
          "shortName": "Unity.ExplicitTagComparison",
          "displayName": "Use 'CompareTag' instead of explicit string comparison",
          "enabled": true
        },
        {
          "shortName": "Unity.RedundantEventFunction",
          "displayName": "Redundant Unity event function",
          "enabled": true
        },
        {
          "shortName": "Unity.PreferGenericMethodOverload",
          "displayName": "String based lookup of component type is inefficient",
          "enabled": true
        },
        {
          "shortName": "MISMATCHED_ASMDEF_FILENAME",
          "displayName": "File name should match the name of the assembly",
          "enabled": true
        },
        {
          "shortName": "Unity.PreferAddressByIdToGraphicsParams",
          "displayName": "String based graphics property lookup is inefficient",
          "enabled": true
        },
        {
          "shortName": "Unity.RedundantAttributeOnTarget",
          "displayName": "Redundant attribute usage (attribute is redundant when applied to this declaration type)",
          "enabled": true
        },
        {
          "shortName": "Unity.RedundantFormerlySerializedAsAttribute",
          "displayName": "Redundant attribute usage (redundant 'FormerlySerializedAs' attribute)",
          "enabled": true
        },
        {
          "shortName": "Unity.UnresolvedComponentOrScriptableObject",
          "displayName": "Cannot resolve component or scriptable object",
          "enabled": true
        }
      ]
    },
    {
      "name": "EditorConfig",
      "inspections": [
        {
          "shortName": "EditorConfigNumerousWildcards",
          "displayName": "Too many wildcards",
          "enabled": false,
          "description": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
        },
        {
          "shortName": "EditorConfigKeyCorrectness",
          "displayName": "Unknown property",
          "enabled": false,
          "description": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
        },
        {
          "shortName": "EditorConfigEncoding",
          "displayName": "File encoding doesn't match EditorConfig charset",
          "enabled": false,
          "description": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
        },
        {
          "shortName": "EditorConfigEmptyHeader",
          "displayName": "Empty header",
          "enabled": false,
          "description": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
        },
        {
          "shortName": "EditorConfigSpaceInHeader",
          "displayName": "Space in file pattern",
          "enabled": false,
          "description": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
        },
        {
          "shortName": "EditorConfigOptionRedundancy",
          "displayName": "Redundant property",
          "enabled": false,
          "description": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
        },
        {
          "shortName": "EditorConfigWildcardRedundancy",
          "displayName": "Redundant wildcard",
          "enabled": false,
          "description": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
        },
        {
          "shortName": "EditorConfigUnusedDeclaration",
          "displayName": "Unused declaration",
          "enabled": false,
          "description": "Reports unused declarations. Such declarations can be removed."
        },
        {
          "shortName": "EditorConfigRootDeclarationUniqueness",
          "displayName": "Extra top-level declaration",
          "enabled": false,
          "description": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
        },
        {
          "shortName": "EditorConfigShadowedOption",
          "displayName": "Overridden property",
          "enabled": false,
          "description": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
        },
        {
          "shortName": "EditorConfigValueUniqueness",
          "displayName": "Non-unique list value",
          "enabled": false,
          "description": "Reports duplicates in lists of values."
        },
        {
          "shortName": "EditorConfigUnexpectedComma",
          "displayName": "Unexpected comma",
          "enabled": false,
          "description": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
        },
        {
          "shortName": "EditorConfigShadowingOption",
          "displayName": "Overriding property",
          "enabled": false,
          "description": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
        },
        {
          "shortName": "EditorConfigReferenceCorrectness",
          "displayName": "Invalid reference",
          "enabled": false,
          "description": "Reports identifiers that are either unknown or have a wrong type."
        },
        {
          "shortName": "EditorConfigCharClassLetterRedundancy",
          "displayName": "Duplicate character class letter",
          "enabled": false,
          "description": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
        },
        {
          "shortName": "EditorConfigMissingRequiredDeclaration",
          "displayName": "Required declarations are missing",
          "enabled": false,
          "description": "Reports properties that miss the required declarations. Refer to the documentation for more information."
        },
        {
          "shortName": "EditorConfigPartialOverride",
          "displayName": "Overlapping sections",
          "enabled": false,
          "description": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
        },
        {
          "shortName": "EditorConfigListAcceptability",
          "displayName": "Unexpected value list",
          "enabled": false,
          "description": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
        },
        {
          "shortName": "EditorConfigPatternEnumerationRedundancy",
          "displayName": "Unnecessary braces",
          "enabled": false,
          "description": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`."
        },
        {
          "shortName": "EditorConfigPairAcceptability",
          "displayName": "Unexpected key-value pair",
          "enabled": false,
          "description": "Reports key-value pairs that are not allowed in the current context."
        },
        {
          "shortName": "EditorConfigNoMatchingFiles",
          "displayName": "No matching files",
          "enabled": false,
          "description": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
        },
        {
          "shortName": "EditorConfigHeaderUniqueness",
          "displayName": "EditorConfig section is not unique",
          "enabled": false,
          "description": "Reports sections that define the same file pattern as other sections."
        },
        {
          "shortName": "EditorConfigValueCorrectness",
          "displayName": "Invalid property value",
          "enabled": false,
          "description": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
        },
        {
          "shortName": "EditorConfigRootDeclarationCorrectness",
          "displayName": "Unexpected top-level declaration",
          "enabled": false,
          "description": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
        },
        {
          "shortName": "EditorConfigPatternRedundancy",
          "displayName": "Duplicate or redundant pattern",
          "enabled": false,
          "description": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
        },
        {
          "shortName": "EditorConfigDeprecatedDescriptor",
          "displayName": "Deprecated property",
          "enabled": false,
          "description": "Reports EditorConfig properties that are no longer supported."
        },
        {
          "shortName": "EditorConfigCharClassRedundancy",
          "displayName": "Unnecessary character class",
          "enabled": false,
          "description": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
        },
        {
          "shortName": "EditorConfigEmptySection",
          "displayName": "Empty section",
          "enabled": false,
          "description": "Reports sections that do not contain any EditorConfig properties."
        }
      ]
    },
    {
      "name": "Syntax Style",
      "inspections": [
        {
          "shortName": "ArrangeModifiersOrder",
          "displayName": "Adjust modifiers declaration order",
          "enabled": true
        },
        {
          "shortName": "ArrangeTypeModifiers",
          "displayName": "Use explicit or implicit modifier definition for types",
          "enabled": true
        },
        {
          "shortName": "ArrangeConstructorOrDestructorBody",
          "displayName": "Use preferred body style (convert into constructor or destructor with preferred body style)",
          "enabled": false
        },
        {
          "shortName": "ArrangeRedundantParentheses",
          "displayName": "Remove redundant parentheses",
          "enabled": true
        },
        {
          "shortName": "ArrangeVarKeywordsInDeconstructingDeclaration",
          "displayName": "Join or separate 'var' in deconstruction declarations",
          "enabled": true
        },
        {
          "shortName": "CppRemoveRedundantBraces",
          "displayName": "Use preferred braces style (remove redundant braces)",
          "enabled": false
        },
        {
          "shortName": "ArgumentsStyleOther",
          "displayName": "Use preferred argument style",
          "enabled": false
        },
        {
          "shortName": "EnforceDoWhileStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'do-while' statement)",
          "enabled": false
        },
        {
          "shortName": "CppWrongSlashesInIncludeDirective",
          "displayName": "Use preferred include directive style (slash symbol used in #include directive does not match code style settings)",
          "enabled": true
        },
        {
          "shortName": "SuggestVarOrType_SimpleTypes",
          "displayName": "Use preferred 'var' style (when type is simple)",
          "enabled": true
        },
        {
          "shortName": "CppEnforceOverridingFunctionStyle",
          "displayName": "Use preferred overriding function style (enforce overriding function style)",
          "enabled": true
        },
        {
          "shortName": "ArrangeThisQualifier",
          "displayName": "Add/remove 'this.' qualifier",
          "enabled": true
        },
        {
          "shortName": "ArrangeNamespaceBody",
          "displayName": "Use preferred namespace body style",
          "enabled": true
        },
        {
          "shortName": "CppUseAutoForNumeric",
          "displayName": "Use preferred 'auto' style (numeric type can be replaced with auto)",
          "enabled": true
        },
        {
          "shortName": "ArrangeObjectCreationWhenTypeNotEvident",
          "displayName": "Use preferred style of 'new' expression when created type is not evident",
          "enabled": true
        },
        {
          "shortName": "ArrangeAccessorOwnerBody",
          "displayName": "Use preferred body style (convert into property, indexer, or event with preferred body style)",
          "enabled": true
        },
        {
          "shortName": "CppEnforceFunctionDeclarationStyle",
          "displayName": "Use preferred declaration style (enforce function declaration style)",
          "enabled": false
        },
        {
          "shortName": "SuggestDiscardDeclarationVarStyle",
          "displayName": "Use preferred style for discard declaration",
          "enabled": true
        },
        {
          "shortName": "UnnecessaryWhitespace",
          "displayName": "Unnecessary whitespace at the end of line",
          "enabled": false
        },
        {
          "shortName": "EnforceLockStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'lock' statement)",
          "enabled": false
        },
        {
          "shortName": "RemoveRedundantBraces",
          "displayName": "Use preferred braces style (remove redundant braces)",
          "enabled": false
        },
        {
          "shortName": "ArrangeStaticMemberQualifier",
          "displayName": "Add/remove qualifier for static members",
          "enabled": true
        },
        {
          "shortName": "EnforceUsingStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'using' statement)",
          "enabled": false
        },
        {
          "shortName": "ArrangeMethodOrOperatorBody",
          "displayName": "Use preferred body style (convert into method or operator with preferred body style)",
          "enabled": false
        },
        {
          "shortName": "CppEnforceForStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'for' statement)",
          "enabled": false
        },
        {
          "shortName": "ArrangeAttributes",
          "displayName": "Join or separate attributes in section",
          "enabled": false
        },
        {
          "shortName": "BuiltInTypeReferenceStyle",
          "displayName": "Replace built-in type reference with a CLR type name or a keyword",
          "enabled": true
        },
        {
          "shortName": "CppMemberInitializersOrder",
          "displayName": "Use preferred initialization style (order of member initializers does not match the initialization order)",
          "enabled": true
        },
        {
          "shortName": "ArrangeTrailingCommaInSinglelineLists",
          "displayName": "Use preferred style for trailing comma when the last element is not followed by a new line",
          "enabled": true
        },
        {
          "shortName": "CppEnforceIfStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'if' statement)",
          "enabled": false
        },
        {
          "shortName": "CppEnforceCVQualifiersOrder",
          "displayName": "Use preferred cv-qualifiers style (enforce the order of cv-qualifiers)",
          "enabled": false
        },
        {
          "shortName": "SuggestVarOrType_Elsewhere",
          "displayName": "Use preferred 'var' style (elsewhere)",
          "enabled": true
        },
        {
          "shortName": "CppEnforceCVQualifiersPlacement",
          "displayName": "Use preferred cv-qualifiers style (enforce the placement of cv-qualifiers)",
          "enabled": false
        },
        {
          "shortName": "ArgumentsStyleLiteral",
          "displayName": "Use preferred argument style for literal values",
          "enabled": false
        },
        {
          "shortName": "CppEnforceTypeAliasCodeStyle",
          "displayName": "Use preferred declaration style (enforce type alias code style)",
          "enabled": false
        },
        {
          "shortName": "SuggestVarOrType_DeconstructionDeclarations",
          "displayName": "Use preferred 'var' style (in deconstruction declarations)",
          "enabled": true
        },
        {
          "shortName": "ArrangeDefaultValueWhenTypeEvident",
          "displayName": "Use preferred style of default value expression when type is evident",
          "enabled": true
        },
        {
          "shortName": "ArgumentsStyleAnonymousFunction",
          "displayName": "Use preferred argument style for anonymous functions",
          "enabled": false
        },
        {
          "shortName": "SuggestVarOrType_BuiltInTypes",
          "displayName": "Use preferred 'var' style (for built-in types)",
          "enabled": true
        },
        {
          "shortName": "CppEnforceNestedNamespacesStyle",
          "displayName": "Use preferred declaration style (enforce nested namespaces style)",
          "enabled": true
        },
        {
          "shortName": "EnforceWhileStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'while' statement)",
          "enabled": false
        },
        {
          "shortName": "ArrangeLocalFunctionBody",
          "displayName": "Use preferred body style (convert into local function with preferred body style)",
          "enabled": false
        },
        {
          "shortName": "ArgumentsStyleStringLiteral",
          "displayName": "Use preferred argument style for string literal values",
          "enabled": false
        },
        {
          "shortName": "EnforceFixedStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'fixed' statement)",
          "enabled": false
        },
        {
          "shortName": "ArrangeObjectCreationWhenTypeEvident",
          "displayName": "Use preferred style of 'new' expression when created type is evident",
          "enabled": true
        },
        {
          "shortName": "CppEnforceOverridingDestructorStyle",
          "displayName": "Use preferred overriding function style (enforce overriding destructor style)",
          "enabled": true
        },
        {
          "shortName": "PlaceAssignmentExpressionIntoBlock",
          "displayName": "Place assignment expression into block",
          "enabled": false
        },
        {
          "shortName": "EnforceIfStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'if' statement)",
          "enabled": false
        },
        {
          "shortName": "ArrangeMissingParentheses",
          "displayName": "Add parentheses to avoid non-obvious precedence",
          "enabled": false
        },
        {
          "shortName": "SeparateControlTransferStatement",
          "displayName": "Separate control transfer statement with blank line",
          "enabled": false
        },
        {
          "shortName": "CppEnforceDoStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'do-while' statement)",
          "enabled": false
        },
        {
          "shortName": "TabsAreDisallowed",
          "displayName": "Usage of tabulation character for indentation is prohibited",
          "enabled": false
        },
        {
          "shortName": "ArrangeTypeMemberModifiers",
          "displayName": "Use explicit or implicit modifier definition for type members",
          "enabled": true
        },
        {
          "shortName": "ArgumentsStyleNamedExpression",
          "displayName": "Use preferred argument style for named expressions",
          "enabled": false
        },
        {
          "shortName": "CppUseAuto",
          "displayName": "Use preferred 'auto' style (type can be replaced with auto)",
          "enabled": true
        },
        {
          "shortName": "EnforceForeachStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'foreach' statement)",
          "enabled": false
        },
        {
          "shortName": "ArrangeDefaultValueWhenTypeNotEvident",
          "displayName": "Use preferred style of default value expression when type is not evident",
          "enabled": true
        },
        {
          "shortName": "CppEnforceWhileStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'while' statement)",
          "enabled": false
        },
        {
          "shortName": "BuiltInTypeReferenceStyleForMemberAccess",
          "displayName": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions",
          "enabled": true
        },
        {
          "shortName": "ArrangeTrailingCommaInMultilineLists",
          "displayName": "Use preferred style for trailing comma before new line in multiline lists",
          "enabled": true
        },
        {
          "shortName": "EnforceForStatementBraces",
          "displayName": "Use preferred braces style (enforce braces in 'for' statement)",
          "enabled": false
        },
        {
          "shortName": "CppWrongIncludesOrder",
          "displayName": "Use preferred include directive style (order of #include directives does not match code style settings)",
          "enabled": true
        }
      ]
    },
    {
      "name": "Validity issues",
      "inspections": [
        {
          "shortName": "BadExpressionStatementJS",
          "displayName": "Expression statement which is not assignment or call",
          "enabled": true,
          "description": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error."
        },
        {
          "shortName": "FunctionWithInconsistentReturnsJS",
          "displayName": "Function with inconsistent returns",
          "enabled": false,
          "description": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error.\n\nExample:\n\n\n    function foo() {\n      if (true)\n        return 3;\n      return;\n    }\n\n"
        },
        {
          "shortName": "ReservedWordUsedAsNameJS",
          "displayName": "Reserved word used as name",
          "enabled": false,
          "description": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords."
        },
        {
          "shortName": "ThisExpressionReferencesGlobalObjectJS",
          "displayName": "'this' expression which references the global object",
          "enabled": false,
          "description": "Reports a `this` expression outside an object literal or a constructor body. Such `this` expressions reference the top-level \"global\" JavaScript object, but are mostly useless."
        },
        {
          "shortName": "JSOctalInteger",
          "displayName": "Octal integer",
          "enabled": true,
          "description": "Reports a deprecated octal integer literal prefixed with `0` instead of `0o`.  \nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.  \nTo force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below."
        },
        {
          "shortName": "StringLiteralBreaksHTMLJS",
          "displayName": "String literal which breaks HTML parsing",
          "enabled": false,
          "description": "Reports a string literal that contains a `</` sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded."
        },
        {
          "shortName": "JSConstantReassignment",
          "displayName": "Attempt to assign to const or readonly variable",
          "enabled": true,
          "description": "Reports reassigning a value to a constant or a readonly variable."
        }
      ]
    },
    {
      "name": "Redundancies in Code",
      "inspections": [
        {
          "shortName": "RedundantDelegateCreation",
          "displayName": "Explicit delegate creation expression is redundant",
          "enabled": true
        },
        {
          "shortName": "CppRedundantConstSpecifier",
          "displayName": "Redundant 'const' specifier",
          "enabled": true
        },
        {
          "shortName": "RedundantExplicitParamsArrayCreation",
          "displayName": "Redundant explicit array creation in argument of 'params' parameter",
          "enabled": true
        },
        {
          "shortName": "UnusedAnonymousMethodSignature",
          "displayName": "Anonymous method signature is not necessary",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantFreezeAttribute",
          "displayName": "Redundant 'Freeze' attribute",
          "enabled": true
        },
        {
          "shortName": "DoubleNegationOperator",
          "displayName": "Double negation operator",
          "enabled": true
        },
        {
          "shortName": "RedundantEnumCaseLabelForDefaultSection",
          "displayName": "Redundant 'case' label before default section",
          "enabled": false
        },
        {
          "shortName": "RedundantPropertyPatternClause",
          "displayName": "Redundant property pattern clause",
          "enabled": true
        },
        {
          "shortName": "RedundantExplicitPositionalPropertyDeclaration",
          "displayName": "Redundant explicit positional property declaration",
          "enabled": true
        },
        {
          "shortName": "RedundantQualifier",
          "displayName": "Redundant qualifier",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantGridSpan",
          "displayName": "Single-cell grid column/row span is redundant",
          "enabled": true
        },
        {
          "shortName": "RedundantExplicitArraySize",
          "displayName": "Redundant explicit size specification in array creation",
          "enabled": true
        },
        {
          "shortName": "RedundantCast",
          "displayName": "Redundant cast",
          "enabled": false
        },
        {
          "shortName": "WebConfig.UnusedElementDueToConfigSourceAttribute",
          "displayName": "Redundant element or attribute because of 'configSource' attribute",
          "enabled": true
        },
        {
          "shortName": "RedundantLogicalConditionalExpressionOperand",
          "displayName": "Redundant operand in logical conditional expression",
          "enabled": true
        },
        {
          "shortName": "OverriddenWithSameValue",
          "displayName": "Resource is overridden with identical value",
          "enabled": true
        },
        {
          "shortName": "RedundantReadonlyModifier",
          "displayName": "Redundant 'readonly' modifier",
          "enabled": true
        },
        {
          "shortName": "RedundantArrayLowerBoundSpecification",
          "displayName": "Redundant array lower bound specification",
          "enabled": true
        },
        {
          "shortName": "RedundantPatternParentheses",
          "displayName": "Remove redundant pattern-matching parentheses",
          "enabled": true
        },
        {
          "shortName": "CppRedundantTypenameKeyword",
          "displayName": "Redundant 'typename' keyword",
          "enabled": true
        },
        {
          "shortName": "UselessComparisonToIntegralConstant",
          "displayName": "Comparison to integral constant is useless",
          "enabled": true
        },
        {
          "shortName": "CppRedundantElseKeyword",
          "displayName": "Redundant 'else' keyword",
          "enabled": true
        },
        {
          "shortName": "RedundantUsingDirective.Global",
          "displayName": "Redundant global using directive",
          "enabled": true
        },
        {
          "shortName": "EmptyForStatement",
          "displayName": "Empty 'for' loop is redundant",
          "enabled": true
        },
        {
          "shortName": "RedundantNullnessAttributeWithNullableReferenceTypes",
          "displayName": "[NotNull] or [CanBeNull] attribute is applied to a type that already has the same annotation from nullable reference types",
          "enabled": true
        },
        {
          "shortName": "ConditionIsAlwaysTrueOrFalse",
          "displayName": "Expression is always 'true' or always 'false'",
          "enabled": true
        },
        {
          "shortName": "WebConfig.RedundantAddNamespaceTag",
          "displayName": "Redundant add namespace element",
          "enabled": true
        },
        {
          "shortName": "RedundantExplicitArrayCreation",
          "displayName": "Redundant explicit type in array creation",
          "enabled": true
        },
        {
          "shortName": "HeuristicUnreachableCode",
          "displayName": "Heuristically unreachable code",
          "enabled": true
        },
        {
          "shortName": "RedundantSuppressNullableWarningExpression",
          "displayName": "Redundant nullable warning suppression expression",
          "enabled": true
        },
        {
          "shortName": "MathAbsMethodIsRedundant",
          "displayName": "Math.Abs() argument is always non-negative",
          "enabled": true
        },
        {
          "shortName": "RedundantEmptyFinallyBlock",
          "displayName": "Redundant empty finally block",
          "enabled": true
        },
        {
          "shortName": "PrivateFieldCanBeConvertedToLocalVariable",
          "displayName": "Private field can be converted into local variable",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantModifiersAttribute",
          "displayName": "Redundant modifiers attribute",
          "enabled": true
        },
        {
          "shortName": "AspUnusedRegisterDirectiveHighlighting",
          "displayName": "Unused register directive",
          "enabled": true
        },
        {
          "shortName": "RedundantNotNullConstraint",
          "displayName": "Redundant 'notnull' constraint on type parameter constrained by non-nullable base type",
          "enabled": true
        },
        {
          "shortName": "RedundantDiscardDesignation",
          "displayName": "Redundant discard designation",
          "enabled": true
        },
        {
          "shortName": "CppRedundantMemberInitializer",
          "displayName": "Redundant member initializer in constructor initialization list",
          "enabled": true
        },
        {
          "shortName": "CppRedundantEmptyDeclaration",
          "displayName": "Redundant empty declaration",
          "enabled": true
        },
        {
          "shortName": "RedundantDeclarationSemicolon",
          "displayName": "Redundant semicolon after type or namespace declaration",
          "enabled": true
        },
        {
          "shortName": "RedundantEmptyCaseElse",
          "displayName": "Redundant empty 'Case Else' statement",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantStyledValue",
          "displayName": "Property value is equal to style-provided",
          "enabled": true
        },
        {
          "shortName": "RedundantCheckBeforeAssignment",
          "displayName": "Redundant condition check before assignments",
          "enabled": true
        },
        {
          "shortName": "CppRedundantParentheses",
          "displayName": "Redundant parentheses",
          "enabled": true
        },
        {
          "shortName": "CppRedundantEmptyStatement",
          "displayName": "Redundant empty statement",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantPropertyTypeQualifier",
          "displayName": "Redundant property type qualifier",
          "enabled": true
        },
        {
          "shortName": "RedundantScopedParameterModifier",
          "displayName": "Redundant 'scoped' parameter modifier",
          "enabled": false
        },
        {
          "shortName": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableBaseType",
          "displayName": "Redundant nullable annotation on base type constraint of type parameter constrained by another non-nullable base type",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantResource",
          "displayName": "Redundant resource",
          "enabled": true
        },
        {
          "shortName": "CppVolatileParameterInDeclaration",
          "displayName": "Volatile-qualified parameter in a function declaration",
          "enabled": true
        },
        {
          "shortName": "RedundantNullableFlowAttribute",
          "displayName": "Redundant nullable attribute",
          "enabled": true
        },
        {
          "shortName": "RedundantUnsafeContext",
          "displayName": "Unsafe context declaration is redundant",
          "enabled": true
        },
        {
          "shortName": "RedundantVirtualModifier",
          "displayName": "Redundant 'virtual' modifier",
          "enabled": false
        },
        {
          "shortName": "CppRedundantCastExpression",
          "displayName": "Redundant cast expression",
          "enabled": true
        },
        {
          "shortName": "RedundantIfStatementThenKeyword",
          "displayName": "Keyword 'Then' is redundant in multiline 'If' statement",
          "enabled": false
        },
        {
          "shortName": "UseImplicitlyTypedVariableEvident",
          "displayName": "Use implicitly typed variable declaration (evident)",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantAttachedProperty",
          "displayName": "Remove redundant attached property setter",
          "enabled": true
        },
        {
          "shortName": "WebConfig.TagPrefixRedundand",
          "displayName": "Redundant tagPrefix declaration",
          "enabled": true
        },
        {
          "shortName": "RedundantOverflowCheckingContext",
          "displayName": "Redundant arithmetic overflow checking context",
          "enabled": true
        },
        {
          "shortName": "RedundantCallerArgumentExpressionDefaultValue",
          "displayName": "Redundant argument passed to caller argument expression parameter",
          "enabled": true
        },
        {
          "shortName": "CppRedundantVoidArgumentList",
          "displayName": "Redundant void argument list",
          "enabled": true
        },
        {
          "shortName": "RedundantNameQualifier",
          "displayName": "Redundant name qualifier",
          "enabled": true
        },
        {
          "shortName": "RedundantConfigureAwait",
          "displayName": "Redundant 'ConfigureAwait(true)'",
          "enabled": true
        },
        {
          "shortName": "RedundantAlwaysMatchSubpattern",
          "displayName": "Subpattern that always matches is redundant",
          "enabled": true
        },
        {
          "shortName": "RedundantAssignment",
          "displayName": "Assignment is not used",
          "enabled": true
        },
        {
          "shortName": "RedundantAttributeSuffix",
          "displayName": "Redundant 'Attribute' suffix",
          "enabled": true
        },
        {
          "shortName": "ConstantConditionalAccessQualifier",
          "displayName": "Conditional access qualifier expression is known to be null or not null",
          "enabled": true
        },
        {
          "shortName": "RedundantLambdaSignatureParentheses",
          "displayName": "Redundant lambda signature parentheses",
          "enabled": true
        },
        {
          "shortName": "RedundantMyClassQualifier",
          "displayName": "Redundant 'MyClass.' qualifier",
          "enabled": true
        },
        {
          "shortName": "ConstantNullCoalescingCondition",
          "displayName": "'??' condition is known to be null or not null",
          "enabled": true
        },
        {
          "shortName": "VbUnreachableCode",
          "displayName": "Unreachable code",
          "enabled": true
        },
        {
          "shortName": "RedundantExplicitNullableCreation",
          "displayName": "Redundant explicit nullable type creation",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantUpdateSourceTriggerAttribute",
          "displayName": "UpdateSourceTrigger=Default is redundant",
          "enabled": true
        },
        {
          "shortName": "RedundantBaseQualifier",
          "displayName": "Redundant 'base.' qualifier",
          "enabled": true
        },
        {
          "shortName": "RedundantAttributeUsageProperty",
          "displayName": "Redundant [AttributeUsage] attribute property assignment",
          "enabled": true
        },
        {
          "shortName": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract",
          "displayName": "Expression is always 'true' or 'false' according to nullable reference types' annotations",
          "enabled": true
        },
        {
          "shortName": "RedundantLambdaParameterType",
          "displayName": "Redundant lambda expression parameter type specification",
          "enabled": true
        },
        {
          "shortName": "CppRedundantInlineSpecifier",
          "displayName": "Redundant 'inline' specifier",
          "enabled": true
        },
        {
          "shortName": "CppRedundantElseKeywordInsideCompoundStatement",
          "displayName": "Redundant 'else' keyword inside compound statement",
          "enabled": true
        },
        {
          "shortName": "RedundantNullableTypeMark",
          "displayName": "Type check for nullable type is equal to underlying type check",
          "enabled": true
        },
        {
          "shortName": "NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract",
          "displayName": "'??' condition is never null according to nullable reference types' annotations",
          "enabled": true
        },
        {
          "shortName": "CppUnreachableCode",
          "displayName": "Unreachable code",
          "enabled": true
        },
        {
          "shortName": "CppFinalFunctionInFinalClass",
          "displayName": "Final function in a final class",
          "enabled": true
        },
        {
          "shortName": "RedundantIfElseBlock",
          "displayName": "Redundant 'else' keyword",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantNameAttribute",
          "displayName": "Redundant name attribute",
          "enabled": true
        },
        {
          "shortName": "RedundantRangeBound",
          "displayName": "Redundant range bound",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantGridDefinitions",
          "displayName": "Single grid row/column definition is redundant",
          "enabled": true
        },
        {
          "shortName": "RedundantToStringCallForValueType",
          "displayName": "Redundant 'object.ToString()' call for value types",
          "enabled": true
        },
        {
          "shortName": "RedundantCaseLabel",
          "displayName": "Redundant 'case' label",
          "enabled": true
        },
        {
          "shortName": "RedundantStringInterpolation",
          "displayName": "Redundant string interpolation",
          "enabled": true
        },
        {
          "shortName": "RedundantEnumerableCastCall",
          "displayName": "Redundant 'IEnumerable.Cast<T>' or 'IEnumerable.OfType<T>' call",
          "enabled": true
        },
        {
          "shortName": "RedundantMyBaseQualifier",
          "displayName": "Redundant 'MyBase.' qualifier",
          "enabled": true
        },
        {
          "shortName": "RedundantArgumentDefaultValue",
          "displayName": "Redundant argument with default value",
          "enabled": true
        },
        {
          "shortName": "RedundantTypeArgumentsOfMethod",
          "displayName": "Redundant type arguments of method",
          "enabled": true
        },
        {
          "shortName": "SuspiciousMathSignMethod",
          "displayName": "Math.Sign() method always gives the same result",
          "enabled": true
        },
        {
          "shortName": "RedundantAbstractModifier",
          "displayName": "Redundant 'abstract' modifier",
          "enabled": true
        },
        {
          "shortName": "RedundantMeQualifier",
          "displayName": "Redundant 'Me.' qualifier",
          "enabled": true
        },
        {
          "shortName": "RedundantCollectionInitializerElementBraces",
          "displayName": "Redundant braces in collection initializer",
          "enabled": true
        },
        {
          "shortName": "AssignmentIsFullyDiscarded",
          "displayName": "Assignment results are fully discarded",
          "enabled": true
        },
        {
          "shortName": "CppRedundantLambdaParameterList",
          "displayName": "Redundant parameter list in lambda declarator",
          "enabled": true
        },
        {
          "shortName": "CppConstParameterInDeclaration",
          "displayName": "Const-qualified parameter in a function declaration",
          "enabled": true
        },
        {
          "shortName": "CppRedundantBaseClassAccessSpecifier",
          "displayName": "Redundant base class access specifier",
          "enabled": true
        },
        {
          "shortName": "EmptyRegion",
          "displayName": "Empty region",
          "enabled": false
        },
        {
          "shortName": "CppRedundantQualifier",
          "displayName": "Redundant qualifier",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantNamespaceAlias",
          "displayName": "Redundant namespace alias",
          "enabled": true
        },
        {
          "shortName": "RedundantAnonymousTypePropertyName",
          "displayName": "Redundant anonymous type property explicit name",
          "enabled": true
        },
        {
          "shortName": "RedundantNullableAnnotationOnReferenceTypeConstraint",
          "displayName": "Redundant nullable annotation on 'class?' constraint of type parameter constrained by non-nullable base type",
          "enabled": true
        },
        {
          "shortName": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableTypeKind",
          "displayName": "Redundant nullable annotation on base type constraint of type parameter having non-nullable type kind",
          "enabled": true
        },
        {
          "shortName": "PatternIsAlwaysTrueOrFalse",
          "displayName": "Pattern is always 'true' or always 'false'",
          "enabled": true
        },
        {
          "shortName": "CppRedundantAccessSpecifier",
          "displayName": "Access specifier does not change accessibility level",
          "enabled": true
        },
        {
          "shortName": "RedundantTypeCheckInPattern",
          "displayName": "Redundant type check in a pattern",
          "enabled": true
        },
        {
          "shortName": "RedundantIteratorKeyword",
          "displayName": "Iterator function without 'Yield' statements",
          "enabled": true
        },
        {
          "shortName": "CppHeaderHasBeenAlreadyIncluded",
          "displayName": "Guarded header has already been included",
          "enabled": true
        },
        {
          "shortName": "RedundantEmptyObjectCreationArgumentList",
          "displayName": "Redundant empty argument list on object creation expression",
          "enabled": true
        },
        {
          "shortName": "RedundantTernaryExpression",
          "displayName": "Redundant conditional ternary expression usage",
          "enabled": true
        },
        {
          "shortName": "ConditionalAccessQualifierIsNonNullableAccordingToAPIContract",
          "displayName": "Conditional access qualifier expression is not null according to nullable reference types' annotations",
          "enabled": true
        },
        {
          "shortName": "CppStaticSpecifierOnAnonymousNamespaceMember",
          "displayName": "Redundant 'static' specifier on an anonymous namespace member",
          "enabled": true
        },
        {
          "shortName": "Xaml.RedundantBindingModeAttribute",
          "displayName": "Binding mode is equal to default",
          "enabled": true
        },
        {
          "shortName": "CppRedundantBooleanExpressionArgument",
          "displayName": "Redundant argument in conditional expression",
          "enabled": true
        },
        {
          "shortName": "WebConfig.UnusedRemoveOrClearTag",
          "displayName": "Redundant remove or clear element",
          "enabled": true
        },
        {
          "shortName": "CppRedundantBaseClassInitializer",
          "displayName": "Redundant base class initializer",
          "enabled": false
        },
        {
          "shortName": "RedundantEmptyObjectOrCollectionInitializer",
          "displayName": "Redundant empty object or collection initializer",
          "enabled": true
        },
        {
          "shortName": "RedundantParentheses",
          "displayName": "Remove redundant parentheses",
          "enabled": false
        },
        {
          "shortName": "RedundantArrayCreationExpression",
          "displayName": "Array creation can be replaced with array initializer",
          "enabled": true
        },
        {
          "shortName": "UseImplicitByValModifier",
          "displayName": "Use implicit 'ByVal' modifier",
          "enabled": true
        },
        {
          "shortName": "RedundantImmediateDelegateInvocation",
          "displayName": "Immediate delegate invocation",
          "enabled": true
        },
        {
          "shortName": "RedundantFixedPointerDeclaration",
          "displayName": "Redundant fixed pointer declaration",
          "enabled": true
        },
        {
          "shortName": "CppRedundantControlFlowJump",
          "displayName": "Redundant control flow jump statement",
          "enabled": true
        },
        {
          "shortName": "CppRedundantStaticSpecifierOnMemberAllocationFunction",
          "displayName": "Redundant 'static' specifier on a member allocation/deallocation function",
          "enabled": true
        },
        {
          "shortName": "ExpressionIsAlwaysNull",
          "displayName": "Expression is always 'null'",
          "enabled": true
        },
        {
          "shortName": "CppRedundantTemplateKeyword",
          "displayName": "Redundant 'template' keyword",
          "enabled": true
        },
        {
          "shortName": "RedundantJumpStatement",
          "displayName": "Redundant control flow jump statement",
          "enabled": true
        },
        {
          "shortName": "RedundantUsingDirective",
          "displayName": "Redundant using directive",
          "enabled": true
        },
        {
          "shortName": "RedundantQueryOrderByAscendingKeyword",
          "displayName": "Redundant 'orderby' clause 'ascending' keyword",
          "enabled": true
        },
        {
          "shortName": "RedundantVerbatimStringPrefix",
          "displayName": "Redundant verbatim string prefix",
          "enabled": true
        },
        {
          "shortName": "RedundantBoolCompare",
          "displayName": "Redundant boolean comparison",
          "enabled": true
        },
        {
          "shortName": "RedundantStringFormatCall",
          "displayName": "Redundant 'string.Format()' call",
          "enabled": true
        },
        {
          "shortName": "CppRedundantTemplateArguments",
          "displayName": "Redundant template arguments",
          "enabled": true
        },
        {
          "shortName": "RedundantAttributeParentheses",
          "displayName": "Parentheses are redundant if attribute has no arguments",
          "enabled": true
        },
        {
          "shortName": "CppRedundantElaboratedTypeSpecifier",
          "displayName": "Redundant elaborated type specifier",
          "enabled": true
        },
        {
          "shortName": "CppAccessSpecifierWithNoDeclarations",
          "displayName": "Access specifier does not affect any declaration",
          "enabled": true
        },
        {
          "shortName": "RedundantVerbatimPrefix",
          "displayName": "Redundant verbatim prefix",
          "enabled": true
        },
        {
          "shortName": "RedundantEmptySwitchSection",
          "displayName": "Redundant empty switch section",
          "enabled": true
        },
        {
          "shortName": "UnusedImportClause",
          "displayName": "Unused import clause",
          "enabled": true
        },
        {
          "shortName": "UseImplicitlyTypedVariable",
          "displayName": "Use implicitly typed variable declaration",
          "enabled": false
        },
        {
          "shortName": "Xaml.RedundantCollectionProperty",
          "displayName": "Redundant empty collection property setter",
          "enabled": true
        },
        {
          "shortName": "RedundantRecordBody",
          "displayName": "Redundant 'record' type declaration body",
          "enabled": true
        },
        {
          "shortName": "RedundantSetterValueParameterDeclaration",
          "displayName": "Explicit 'value' parameter declaration is redundant",
          "enabled": true
        },
        {
          "shortName": "WebConfig.UnusedAddTag",
          "displayName": "Redundant add element",
          "enabled": true
        },
        {
          "shortName": "RedundantCatchClause",
          "displayName": "Redundant catch clause",
          "enabled": true
        },
        {
          "shortName": "RedundantPropertyParentheses",
          "displayName": "Parameterless property parentheses are redundant",
          "enabled": true
        },
        {
          "shortName": "RedundantToStringCall",
          "displayName": "Redundant 'object.ToString()' call",
          "enabled": true
        },
        {
          "shortName": "RedundantStringType",
          "displayName": "Redundant string type",
          "enabled": true
        },
        {
          "shortName": "CppTemplateArgumentsCanBeDeduced",
          "displayName": "Template arguments can be deduced",
          "enabled": true
        },
        {
          "shortName": "RedundantStringToCharArrayCall",
          "displayName": "Redundant 'string.ToCharArray()' call",
          "enabled": true
        },
        {
          "shortName": "RedundantRecordClassKeyword",
          "displayName": "Redundant 'class' keyword in record declaration",
          "enabled": true
        },
        {
          "shortName": "ForStatementConditionIsTrue",
          "displayName": "'true' is redundant as 'for'-statement condition",
          "enabled": true
        },
        {
          "shortName": "RedundantExplicitTupleComponentName",
          "displayName": "Redundant explicit tuple component name",
          "enabled": true
        },
        {
          "shortName": "WebConfig.RedundantLocationTag",
          "displayName": "Redundant location element",
          "enabled": true
        },
        {
          "shortName": "CppFinalNonOverridingVirtualFunction",
          "displayName": "Final non-overriding virtual function",
          "enabled": true
        }
      ]
    },
    {
      "name": "Formatting",
      "inspections": [
        {
          "shortName": "BadSemicolonSpaces",
          "displayName": "Incorrect spacing (around semicolon)",
          "enabled": false
        },
        {
          "shortName": "CppBadSwitchBracesIndent",
          "displayName": "Incorrect indent (around switch statement)",
          "enabled": false
        },
        {
          "shortName": "CppBadColonSpaces",
          "displayName": "Incorrect spacing (around colon)",
          "enabled": false
        },
        {
          "shortName": "CppMissingIndent",
          "displayName": "Incorrect indent (line should be indented or outdented elsewhere)",
          "enabled": false
        },
        {
          "shortName": "CppBadCommaSpaces",
          "displayName": "Incorrect spacing (around comma)",
          "enabled": false
        },
        {
          "shortName": "CppBadParensSpaces",
          "displayName": "Incorrect spacing (around parenthesis)",
          "enabled": false
        },
        {
          "shortName": "BadIndent",
          "displayName": "Incorrect indent (line indent should not be changed relative to the previous line elsewhere)",
          "enabled": false
        },
        {
          "shortName": "CppWrongIndentSize",
          "displayName": "Incorrect indent (incorrect indent size)",
          "enabled": false
        },
        {
          "shortName": "CppBadParensLineBreaks",
          "displayName": "Incorrect line breaks (around parenthesis)",
          "enabled": false
        },
        {
          "shortName": "CppBadSymbolSpaces",
          "displayName": "Incorrect spacing (around operator symbols)",
          "enabled": false
        },
        {
          "shortName": "BadAttributeBracketsSpaces",
          "displayName": "Incorrect spacing (around attributes)",
          "enabled": false
        },
        {
          "shortName": "CppBadControlBracesIndent",
          "displayName": "Incorrect indent (around statement braces)",
          "enabled": false
        },
        {
          "shortName": "BadBracesSpaces",
          "displayName": "Incorrect spacing (around braces)",
          "enabled": false
        },
        {
          "shortName": "BadParensLineBreaks",
          "displayName": "Incorrect line breaks (around parenthesis)",
          "enabled": false
        },
        {
          "shortName": "BadSquareBracketsSpaces",
          "displayName": "Incorrect spacing (around square brackets within a statement)",
          "enabled": false
        },
        {
          "shortName": "CppBadEmptyBracesLineBreaks",
          "displayName": "Incorrect line breaks (around empty braces)",
          "enabled": false
        },
        {
          "shortName": "BadExpressionBracesLineBreaks",
          "displayName": "Incorrect line breaks (around expression braces)",
          "enabled": false
        },
        {
          "shortName": "CppRedundantLinebreak",
          "displayName": "Incorrect line breaks (line break is redundant elsewhere)",
          "enabled": false
        },
        {
          "shortName": "MissingSpace",
          "displayName": "Incorrect spacing (space is missing elsewhere)",
          "enabled": false
        },
        {
          "shortName": "CppBadAngleBracketsSpaces",
          "displayName": "Incorrect spacing (around angle brackets)",
          "enabled": false
        },
        {
          "shortName": "CppBadExpressionBracesIndent",
          "displayName": "Incorrect indent (around expression braces)",
          "enabled": false
        },
        {
          "shortName": "CppIncorrectBlankLinesNearBraces",
          "displayName": "Incorrect blank lines (incorrect number of blank lines near braces)",
          "enabled": false
        },
        {
          "shortName": "TabsAndSpacesMismatch",
          "displayName": "Incorrect indent (tabs/spaces mismatch)",
          "enabled": false
        },
        {
          "shortName": "CppUnnecessaryWhitespace",
          "displayName": "Incorrect spacing (redundant whitespaces at the end of a line)",
          "enabled": false
        },
        {
          "shortName": "MissingIndent",
          "displayName": "Incorrect indent (line should be indented or outdented elsewhere)",
          "enabled": false
        },
        {
          "shortName": "RedundantBlankLines",
          "displayName": "Incorrect blank lines (blank lines are redundant elsewhere)",
          "enabled": false
        },
        {
          "shortName": "MultipleTypeMembersOnOneLine",
          "displayName": "Incorrect line breaks (multiple type members on one line)",
          "enabled": false
        },
        {
          "shortName": "CppBadSquareBracketsSpaces",
          "displayName": "Incorrect spacing (around square brackets within a statement)",
          "enabled": false
        },
        {
          "shortName": "BadListLineBreaks",
          "displayName": "Incorrect line breaks (around comma in lists)",
          "enabled": false
        },
        {
          "shortName": "RedundantSpace",
          "displayName": "Incorrect spacing (space is redundant elsewhere)",
          "enabled": false
        },
        {
          "shortName": "CppTabsAreDisallowed",
          "displayName": "Incorrect spacing (tabs are prohibited)",
          "enabled": false
        },
        {
          "shortName": "WrongIndentSize",
          "displayName": "Incorrect indent (incorrect indent size)",
          "enabled": false
        },
        {
          "shortName": "BadSwitchBracesIndent",
          "displayName": "Incorrect indent (around switch statement)",
          "enabled": false
        },
        {
          "shortName": "BadNamespaceBracesIndent",
          "displayName": "Incorrect indent (around namespace braces)",
          "enabled": false
        },
        {
          "shortName": "BadControlBracesLineBreaks",
          "displayName": "Incorrect line breaks (around statement braces)",
          "enabled": false
        },
        {
          "shortName": "CppMultipleSpaces",
          "displayName": "Incorrect spacing (multiple spaces are prohibited)",
          "enabled": false
        },
        {
          "shortName": "CppBadIndent",
          "displayName": "Incorrect indent (line indent should not be changed relative to the previous line elsewhere)",
          "enabled": false
        },
        {
          "shortName": "BadDeclarationBracesLineBreaks",
          "displayName": "Incorrect line breaks (around declaration braces)",
          "enabled": false
        },
        {
          "shortName": "CppRedundantBlankLines",
          "displayName": "Incorrect blank lines (blank lines are redundant elsewhere)",
          "enabled": false
        },
        {
          "shortName": "CppRedundantSpace",
          "displayName": "Incorrect spacing (space is redundant elsewhere)",
          "enabled": false
        },
        {
          "shortName": "MissingLinebreak",
          "displayName": "Incorrect line breaks (line break is missing elsewhere)",
          "enabled": false
        },
        {
          "shortName": "CppBadMemberAccessSpaces",
          "displayName": "Incorrect spacing (around member access symbols)",
          "enabled": false
        },
        {
          "shortName": "BadEmptyBracesLineBreaks",
          "displayName": "Incorrect line breaks (around empty braces)",
          "enabled": false
        },
        {
          "shortName": "CppBadBracesSpaces",
          "displayName": "Incorrect spacing (around braces)",
          "enabled": false
        },
        {
          "shortName": "BadExpressionBracesIndent",
          "displayName": "Incorrect indent (around expression braces)",
          "enabled": false
        },
        {
          "shortName": "BadDeclarationBracesIndent",
          "displayName": "Incorrect indent (around declaration braces)",
          "enabled": false
        },
        {
          "shortName": "CppMissingSpace",
          "displayName": "Incorrect spacing (space is missing elsewhere)",
          "enabled": false
        },
        {
          "shortName": "BadParensSpaces",
          "displayName": "Incorrect spacing (around parenthesis)",
          "enabled": false
        },
        {
          "shortName": "CppBadNamespaceBracesIndent",
          "displayName": "Incorrect indent (around namespace braces)",
          "enabled": false
        },
        {
          "shortName": "BadCommaSpaces",
          "displayName": "Incorrect spacing (around comma)",
          "enabled": false
        },
        {
          "shortName": "RedundantLinebreak",
          "displayName": "Incorrect line breaks (line break is redundant elsewhere)",
          "enabled": false
        },
        {
          "shortName": "IncorrectBlankLinesNearBraces",
          "displayName": "Incorrect blank lines (incorrect number of blank lines near braces)",
          "enabled": false
        },
        {
          "shortName": "CppTabsAndSpacesMismatch",
          "displayName": "Incorrect indent (tabs/spaces mismatch)",
          "enabled": false
        },
        {
          "shortName": "CppBadDeclarationBracesIndent",
          "displayName": "Incorrect indent (around declaration braces)",
          "enabled": false
        },
        {
          "shortName": "BadSymbolSpaces",
          "displayName": "Incorrect spacing (around operator symbols)",
          "enabled": false
        },
        {
          "shortName": "BadLinqLineBreaks",
          "displayName": "Incorrect line breaks (around LINQ queries)",
          "enabled": false
        },
        {
          "shortName": "CppBadSemicolonSpaces",
          "displayName": "Incorrect spacing (around semicolon)",
          "enabled": false
        },
        {
          "shortName": "CppBadControlBracesLineBreaks",
          "displayName": "Incorrect line breaks (around statement braces)",
          "enabled": false
        },
        {
          "shortName": "OutdentIsOffPrevLevel",
          "displayName": "Incorrect indent (line indent should be restored to the previous level elsewhere)",
          "enabled": false
        },
        {
          "shortName": "CppBadListLineBreaks",
          "displayName": "Incorrect line breaks (around comma in lists)",
          "enabled": false
        },
        {
          "shortName": "MissingBlankLines",
          "displayName": "Incorrect blank lines (blank lines are missing elsewhere)",
          "enabled": false
        },
        {
          "shortName": "CppTabsOutsideIndent",
          "displayName": "Incorrect spacing (tabs are prohibited except for indentation)",
          "enabled": false
        },
        {
          "shortName": "CppBadDeclarationBracesLineBreaks",
          "displayName": "Incorrect line breaks (around declaration braces)",
          "enabled": false
        },
        {
          "shortName": "CppBadExpressionBracesLineBreaks",
          "displayName": "Incorrect line breaks (around expression braces)",
          "enabled": false
        },
        {
          "shortName": "CppBadChildStatementIndent",
          "displayName": "Incorrect indent (around child statement)",
          "enabled": false
        },
        {
          "shortName": "MultipleStatementsOnOneLine",
          "displayName": "Incorrect line breaks (multiple statements on one line)",
          "enabled": false
        },
        {
          "shortName": "CppBadSpacesAfterKeyword",
          "displayName": "Incorrect spacing (between keyword and parenthesis)",
          "enabled": false
        },
        {
          "shortName": "BadChildStatementIndent",
          "displayName": "Incorrect indent (around child statement)",
          "enabled": true
        },
        {
          "shortName": "BadPreprocessorIndent",
          "displayName": "Incorrect indent (around preprocessor directive)",
          "enabled": false
        },
        {
          "shortName": "BadSpacesAfterKeyword",
          "displayName": "Incorrect spacing (between keyword and parenthesis)",
          "enabled": false
        },
        {
          "shortName": "MultipleSpaces",
          "displayName": "Incorrect spacing (multiple spaces are prohibited)",
          "enabled": false
        },
        {
          "shortName": "BadGenericBracketsSpaces",
          "displayName": "Incorrect spacing (around generic brackets)",
          "enabled": false
        },
        {
          "shortName": "CppOutdentIsOffPrevLevel",
          "displayName": "Incorrect indent (line indent should be restored to the previous level elsewhere)",
          "enabled": false
        },
        {
          "shortName": "BadColonSpaces",
          "displayName": "Incorrect spacing (around colon)",
          "enabled": false
        },
        {
          "shortName": "CppMissingBlankLines",
          "displayName": "Incorrect blank lines (blank lines are missing elsewhere)",
          "enabled": false
        },
        {
          "shortName": "BadMemberAccessSpaces",
          "displayName": "Incorrect spacing (around member access symbols)",
          "enabled": false
        },
        {
          "shortName": "TabsOutsideIndent",
          "displayName": "Incorrect spacing (tabs are prohibited here)",
          "enabled": false
        },
        {
          "shortName": "BadControlBracesIndent",
          "displayName": "Incorrect indent (around statement braces)",
          "enabled": true
        },
        {
          "shortName": "CppMissingLinebreak",
          "displayName": "Incorrect line breaks (line break is missing elsewhere)",
          "enabled": false
        }
      ]
    },
    {
      "name": "SQL",
      "inspections": [
        {
          "shortName": "SqlMissingReturnInspection",
          "displayName": "Missing return statement",
          "enabled": false,
          "description": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n"
        },
        {
          "shortName": "SqlCaseVsIfInspection",
          "displayName": "Using CASE instead of conditional function and vice versa",
          "enabled": false,
          "description": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action."
        },
        {
          "shortName": "SqlShouldBeInGroupByInspection",
          "displayName": "Column should be in group by clause",
          "enabled": false,
          "description": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n"
        },
        {
          "shortName": "SqlMisleadingReferenceInspection",
          "displayName": "Misleading references",
          "enabled": false,
          "description": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n"
        },
        {
          "shortName": "SqlRedundantAliasInspection",
          "displayName": "Redundant alias expressions",
          "enabled": false,
          "description": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical."
        },
        {
          "shortName": "SqlUnusedCteInspection",
          "displayName": "Unused common table expression",
          "enabled": false,
          "description": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out."
        },
        {
          "shortName": "SqlDialectInspection",
          "displayName": "SQL dialect detection",
          "enabled": false,
          "description": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect."
        },
        {
          "shortName": "SqlMultipleLimitClausesInspection",
          "displayName": "Multiple row limiting/offset clauses in queries",
          "enabled": false,
          "description": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant."
        },
        {
          "shortName": "SqlAmbiguousColumnInspection",
          "displayName": "Ambiguous reference",
          "enabled": false,
          "description": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n"
        },
        {
          "shortName": "SqlNullComparisonInspection",
          "displayName": "Null comparison",
          "enabled": false,
          "description": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo ( id int );\n\n    SELECT * FROM foo WHERE NULL = NULL;\n    SELECT * FROM foo WHERE NULL != NULL;\n\nThe `NULL = NULL` can be replaced with `IS NULL`, the `NULL != NULL` comparison\nwith `IS NOT NULL`. To do this replacement, you can use **Use IS NULL operator** or **Use IS NOT NULL operator**\nquick-fixes.\n\n    SELECT * FROM foo WHERE NULL IS NULL;\n    SELECT * FROM foo WHERE NULL IS NOT NULL;\n"
        },
        {
          "shortName": "SqlInsertValuesInspection",
          "displayName": "VALUES clause cardinality",
          "enabled": false,
          "description": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four."
        },
        {
          "shortName": "SqlRedundantElseNullInspection",
          "displayName": "Redundant ELSE NULL clause",
          "enabled": false,
          "description": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted."
        },
        {
          "shortName": "SqlCurrentSchemaInspection",
          "displayName": "Current console schema introspected",
          "enabled": false,
          "description": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes."
        },
        {
          "shortName": "SqlInsertNullIntoNotNullInspection",
          "displayName": "Insert NULL into NOT NULL column",
          "enabled": false,
          "description": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```"
        },
        {
          "shortName": "SqlTriggerTransitionInspection",
          "displayName": "Suspicious code in triggers",
          "enabled": false,
          "description": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`."
        },
        {
          "shortName": "SqlNamedArgumentsInspection",
          "displayName": "Named arguments should be used",
          "enabled": false,
          "description": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names."
        },
        {
          "shortName": "SqlTransactionStatementInTriggerInspection",
          "displayName": "Use of transaction management statements in triggers",
          "enabled": false,
          "description": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n"
        },
        {
          "shortName": "SqlCheckUsingColumnsInspection",
          "displayName": "Check using clause columns",
          "enabled": false,
          "description": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n"
        },
        {
          "shortName": "SqlConstantConditionInspection",
          "displayName": "Constant condition",
          "enabled": false,
          "description": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n\nThe `'Cat' = 'Cat'` is always true and will be reported."
        },
        {
          "shortName": "SqlInsertIntoGeneratedColumnInspection",
          "displayName": "Insertion into generated columns",
          "enabled": false,
          "description": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`"
        },
        {
          "shortName": "SqlDeprecateTypeInspection",
          "displayName": "Deprecated type",
          "enabled": false,
          "description": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n"
        },
        {
          "shortName": "SqlGotoInspection",
          "displayName": "Usages of GOTO statements",
          "enabled": false,
          "description": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n"
        },
        {
          "shortName": "SqlDtInspection",
          "displayName": "Ill-formed date/time literals",
          "enabled": false,
          "description": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n"
        },
        {
          "shortName": "SqlNoDataSourceInspection",
          "displayName": "No data sources configured",
          "enabled": false,
          "description": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database**)."
        },
        {
          "shortName": "SqlConstantExpressionInspection",
          "displayName": "Constant expression",
          "enabled": false,
          "description": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported."
        },
        {
          "shortName": "SqlWithoutWhereInspection",
          "displayName": "Delete or update statement without where clauses",
          "enabled": false,
          "description": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n"
        },
        {
          "shortName": "SqlUnusedSubqueryItemInspection",
          "displayName": "Unused subquery item",
          "enabled": false,
          "description": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out."
        },
        {
          "shortName": "SqlSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode."
        },
        {
          "shortName": "SqlJoinWithoutOnInspection",
          "displayName": "Unsafe 'join' clause in 'delete' statement",
          "enabled": false,
          "description": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n"
        },
        {
          "shortName": "SqlDropIndexedColumnInspection",
          "displayName": "Index is dependent on column",
          "enabled": false,
          "description": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa)."
        },
        {
          "shortName": "SqlTypeInspection",
          "displayName": "Types compatibility",
          "enabled": false,
          "description": "Reports type-related errors."
        },
        {
          "shortName": "SqlUnicodeStringLiteralInspection",
          "displayName": "Unicode usage in SQL",
          "enabled": false,
          "description": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'абвгд' AS c;\n    SELECT N'абвгд' AS d;\n\nThe `SELECT 'абвгд' AS c;` does not have the `N` prefix, the `'абвгд'` part will be highlighted."
        },
        {
          "shortName": "SqlUnusedVariableInspection",
          "displayName": "Unused variable",
          "enabled": false,
          "description": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted."
        },
        {
          "shortName": "SqlStorageInspection",
          "displayName": "SQL source modification detection",
          "enabled": false,
          "description": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version."
        },
        {
          "shortName": "SqlSignatureInspection",
          "displayName": "Function signature",
          "enabled": false,
          "description": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct."
        },
        {
          "shortName": "SqlRedundantOrderingDirectionInspection",
          "displayName": "Redundant ordering direction",
          "enabled": false,
          "description": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant."
        },
        {
          "shortName": "SqlAutoIncrementDuplicateInspection",
          "displayName": "Auto-increment duplicate",
          "enabled": false,
          "description": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n"
        },
        {
          "shortName": "SqlStringLengthExceededInspection",
          "displayName": "Implicit string truncation",
          "enabled": false,
          "description": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n"
        },
        {
          "shortName": "SqlCallNotationInspection",
          "displayName": "Using of named and positional arguments",
          "enabled": false,
          "description": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n"
        },
        {
          "shortName": "SqlShadowingAliasInspection",
          "displayName": "Column is shadowed by alias",
          "enabled": false,
          "description": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable."
        },
        {
          "shortName": "SqlUnreachableCodeInspection",
          "displayName": "Unreachable code",
          "enabled": false,
          "description": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed."
        },
        {
          "shortName": "SqlResolveInspection",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause."
        },
        {
          "shortName": "SqlRedundantLimitInspection",
          "displayName": "Redundant row limiting in queries",
          "enabled": false,
          "description": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n"
        },
        {
          "shortName": "SqlDerivedTableAliasInspection",
          "displayName": "Each derived table should have alias",
          "enabled": false,
          "description": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n"
        },
        {
          "shortName": "SqlCaseVsCoalesceInspection",
          "displayName": "Using CASE instead of COALESCE function and vice versa",
          "enabled": false,
          "description": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page."
        },
        {
          "shortName": "SqlRedundantCodeInCoalesceInspection",
          "displayName": "Redundant code in COALESCE call",
          "enabled": false,
          "description": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out."
        },
        {
          "shortName": "SqlAggregatesInspection",
          "displayName": "Aggregate-related problems",
          "enabled": false,
          "description": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n"
        },
        {
          "shortName": "SqlMissingColumnAliasesInspection",
          "displayName": "Missing column aliases",
          "enabled": false,
          "description": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n"
        },
        {
          "shortName": "SqlAddNotNullColumnInspection",
          "displayName": "Adding not null column without default value",
          "enabled": false,
          "description": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix."
        },
        {
          "shortName": "SqlIllegalCursorStateInspection",
          "displayName": "Illegal cursor state",
          "enabled": false,
          "description": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n"
        },
        {
          "shortName": "SqlDuplicateColumnInspection",
          "displayName": "Duplicating column name in SELECT",
          "enabled": false,
          "description": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE."
        },
        {
          "shortName": "SqlIdentifierInspection",
          "displayName": "Identifier should be quoted",
          "enabled": false,
          "description": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n"
        }
      ]
    },
    {
      "name": "NUnit",
      "inspections": [
        {
          "shortName": "NUnit.ImplicitUnspecifiedNullValues",
          "displayName": "NUnit. Implicitly unspecified null values.",
          "enabled": true
        },
        {
          "shortName": "NUnit.TestCaseSourceShouldImplementIEnumerable",
          "displayName": "NUnit. Test case source must be non-abstract and implement IEnumerable.",
          "enabled": true
        },
        {
          "shortName": "NUnit.RangeAttributeBoundsAreOutOfRange",
          "displayName": "NUnit. Values in range do not fit the type of the test parameter.",
          "enabled": true
        },
        {
          "shortName": "NUnit.RedundantExpectedResultInTestCaseAttribute",
          "displayName": "NUnit. Redundant expected result for void test method.",
          "enabled": true
        },
        {
          "shortName": "NUnit.IgnoredParameterAttribute",
          "displayName": "NUnit. Ignored parameter attribute.",
          "enabled": true
        },
        {
          "shortName": "NUnit.RangeToValueIsNotReachable",
          "displayName": "NUnit. The maximum range value is not reachable with the step value.",
          "enabled": true
        },
        {
          "shortName": "NUnit.TestCaseResultPropertyIsObsolete",
          "displayName": "NUnit. Test case Result property is obsolete.",
          "enabled": true
        },
        {
          "shortName": "NUnit.NonPublicMethodWithTestAttribute",
          "displayName": "NUnit. Non-public test method.",
          "enabled": true
        },
        {
          "shortName": "NUnit.TestCaseSourceMustBeFieldPropertyMethod",
          "displayName": "NUnit. Test case source must be field, property, or method.",
          "enabled": true
        },
        {
          "shortName": "NUnit.AutoFixture.IncorrectArgumentType",
          "displayName": "NUnit.AutoFixture. Incompatible argument type or incorrect argument value.",
          "enabled": true
        },
        {
          "shortName": "NUnit.RedundantArgumentInsteadOfExpectedResult",
          "displayName": "NUnit. Redundant argument instead of ExpectedResult.",
          "enabled": true
        },
        {
          "shortName": "NUnit.RedundantArgumentInTestCaseAttribute",
          "displayName": "NUnit. Redundant argument in TestCase attribute.",
          "enabled": true
        },
        {
          "shortName": "NUnit.ParameterTypeIsNotCompatibleWithAttribute",
          "displayName": "NUnit. Specified values are not compatible with the test parameter type.",
          "enabled": true
        },
        {
          "shortName": "NUnit.TestCaseAttributeRequiresExpectedResult",
          "displayName": "NUnit. Missing expected result for non-void test method.",
          "enabled": true
        },
        {
          "shortName": "NUnit.MissingArgumentsInTestCaseAttribute",
          "displayName": "NUnit. Missing arguments in TestCase attribute.",
          "enabled": true
        },
        {
          "shortName": "NUnit.DuplicateValues",
          "displayName": "NUnit. Duplicate values.",
          "enabled": true
        },
        {
          "shortName": "NUnit.AutoFixture.MissedTestOrTestFixtureAttribute",
          "displayName": "NUnit.AutoFixture. Missing Test or TestFixture attribute.",
          "enabled": true
        },
        {
          "shortName": "NUnit.RangeStepValueMustNotBeZero",
          "displayName": "NUnit. Range 'step' parameter value must be non-zero.",
          "enabled": true
        },
        {
          "shortName": "NUnit.AttributeProducesTooManyTests",
          "displayName": "NUnit. Specified attribute values produce too many tests.",
          "enabled": false
        },
        {
          "shortName": "NUnit.TestCaseResultPropertyDuplicatesExpectedResult",
          "displayName": "NUnit. Test case Result property duplicates ExpectedResult.",
          "enabled": true
        },
        {
          "shortName": "NUnit.IncorrectArgumentType",
          "displayName": "NUnit. Incompatible argument type or incorrect argument value.",
          "enabled": true
        },
        {
          "shortName": "NUnit.AsyncMethodMustBeTask",
          "displayName": "NUnit. Async test method must return Task or Task<T>",
          "enabled": true
        },
        {
          "shortName": "NUnit.NoValuesProvided",
          "displayName": "NUnit. No values provided in the attributes.",
          "enabled": true
        },
        {
          "shortName": "NUnit.TestCaseSourceMustBeStatic",
          "displayName": "NUnit. Test case source must be static.",
          "enabled": true
        },
        {
          "shortName": "NUnit.IncorrectRangeBounds",
          "displayName": "NUnit. Incorrect range bounds. 'to' must be greater than or equal to 'from'.",
          "enabled": true
        },
        {
          "shortName": "NUnit.TestCaseSourceCannotBeResolved",
          "displayName": "NUnit. Cannot resolve symbol in TestCaseSource or ValueSource attribute.",
          "enabled": true
        },
        {
          "shortName": "NUnit.RangeStepSignMismatch",
          "displayName": "NUnit. Mismatch of the range step sign.",
          "enabled": true
        },
        {
          "shortName": "NUnit.AutoFixture.RedundantArgumentInInlineAutoDataAttribute",
          "displayName": "NUnit.AutoFixture. Redundant argument in InlineAutoData attribute.",
          "enabled": true
        },
        {
          "shortName": "NUnit.MethodWithParametersAndTestAttribute",
          "displayName": "NUnit. Values for test method parameters are not provided.",
          "enabled": true
        },
        {
          "shortName": "NUnit.IncorrectExpectedResultType",
          "displayName": "NUnit. Incompatible expected result type or incorrect value.",
          "enabled": true
        }
      ]
    },
    {
      "name": "Compiler Warnings",
      "inspections": [
        {
          "shortName": "CSharpWarnings__CS4014",
          "displayName": "Async method invocation without await expression",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8417",
          "displayName": "The given expression always matches the provided constant.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8416",
          "displayName": "The given expression never matches the provided pattern.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1574,CS1584,CS1581,CS1580",
          "displayName": "Cannot resolve reference in XML comment",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8425",
          "displayName": "Async-iterator has one or more parameters of type 'CancellationToken' but none of them is annotated with the 'EnumeratorCancellation' attribute.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8424",
          "displayName": "The 'EnumeratorCancellation' attribute is only effective on a parameter of type 'CancellationToken' in an async-iterator method returning 'IAsyncEnumerable<>'.",
          "enabled": true
        },
        {
          "shortName": "ObsoleteElementError",
          "displayName": "Use of obsolete type or type member (error)",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0420",
          "displayName": "Reference to a volatile field will not be treated as volatile",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8383",
          "displayName": "The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1723",
          "displayName": "XML comment has cref attribute that refers to a type parameter",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS7023",
          "displayName": "Static type in 'is' or 'as' operator.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS7022",
          "displayName": "The 'Main' method will not be used as an entry point because compilation unit with top-level statements was found.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0458",
          "displayName": "The result of the expression is always 'null' of nullable type",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0469",
          "displayName": "'goto case' value is not implicitly convertible to required type",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0464",
          "displayName": "Comparing with null of nullable value type always produces 'false'",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0465",
          "displayName": "Introducing a 'Finalize' method can interfere with destructor invocation",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS7095",
          "displayName": "Filter expression is a constant, consider removing the filter",
          "enabled": true
        },
        {
          "shortName": "CppOutParameterMustBeWritten",
          "displayName": "The 'out' parameter must be assigned",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0472",
          "displayName": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'",
          "enabled": true
        },
        {
          "shortName": "CppCoroutineCallResolveError",
          "displayName": "Cannot resolve a required coroutine function",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1717",
          "displayName": "Assignment made to same variable",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1711",
          "displayName": "XML comment has a 'typeparam' tag for 'TypeParameter', but there is no type parameter by that name",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1712",
          "displayName": "Type parameter has no matching typeparam tag in the XML comment",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1710",
          "displayName": "Duplicate typeparam tag in XML comment",
          "enabled": true
        },
        {
          "shortName": "CppUninitializedDependentBaseClass",
          "displayName": "Uninitialized dependent base class",
          "enabled": true
        },
        {
          "shortName": "UnusedField.Compiler",
          "displayName": "Field is never used",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42505",
          "displayName": "The CallerArgumentExpressionAttribute applied to parameter will have no effect. It is applied with an invalid parameter name.",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42504",
          "displayName": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__WME006",
          "displayName": "Namespace should be default namespace of this project",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8619",
          "displayName": "Nullability of reference types in source type doesn't match target type.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8618",
          "displayName": "Non-nullable member is uninitialized.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8617",
          "displayName": "Nullability of reference types in type of parameter doesn't match implemented member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8616",
          "displayName": "Nullability of reference types in return type doesn't match implemented member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8615",
          "displayName": "Nullability of reference types in type doesn't match implemented member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8614",
          "displayName": "Nullability of reference types in type of parameter doesn't match implicitly implemented member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8613",
          "displayName": "Nullability of reference types in return type doesn't match implicitly implemented member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8612",
          "displayName": "Nullability of reference types in type doesn't match implicitly implemented member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8611",
          "displayName": "Nullability of reference types in type of parameter doesn't match partial method declaration.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8610",
          "displayName": "Nullability of reference types in type of parameter doesn't match overridden member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8629",
          "displayName": "Nullable value type may be null.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8625",
          "displayName": "Cannot convert null literal to non-nullable reference type.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8624",
          "displayName": "Argument cannot be used as an output for parameter due to differences in the nullability of reference types.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8622",
          "displayName": "Nullability of reference types in type of a parameter doesn't match the target delegate (possibly because of nullability attributes).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8621",
          "displayName": "Nullability of reference types in return type doesn't match the target delegate (possibly because of nullability attributes).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8620",
          "displayName": "Argument cannot be used for corresponding parameter due to differences in the nullability of reference types.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8609",
          "displayName": "Nullability of reference types in return type doesn't match overridden member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8608",
          "displayName": "Nullability of reference types in type doesn't match overridden member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8607",
          "displayName": "A possible null value may not be used for a type marked with [NotNull] or [DisallowNull].",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8605",
          "displayName": "Unboxing a possibly null value.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8604",
          "displayName": "Possible null reference argument for a parameter.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8603",
          "displayName": "Possible null reference return.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8602",
          "displayName": "Dereference of a possibly null reference.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8601",
          "displayName": "Possible null reference assignment.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8600",
          "displayName": "Converting null literal or possible null value to non-nullable type.",
          "enabled": true
        },
        {
          "shortName": "NotAccessedVariable.Compiler",
          "displayName": "Non-accessed local variable",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8656",
          "displayName": "Call to a non-readonly member from a 'readonly' member results in an implicit copy of 'this'",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8655",
          "displayName": "The switch expression does not handle some null inputs (it is not exhaustive).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8669",
          "displayName": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8667",
          "displayName": "Partial method declarations have inconsistent nullability for type parameter.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8634",
          "displayName": "Nullability of type argument doesn't match 'class' constraint.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8633",
          "displayName": "Nullability mismatch in constraints for type parameter.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8632",
          "displayName": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8631",
          "displayName": "Nullability of type argument doesn't match constraint type.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8645",
          "displayName": "Type is already listed in the interface list with different nullability of reference types.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8644",
          "displayName": "Nullability of reference types in interface implemented by the base type doesn't match.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8643",
          "displayName": "Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0252,CS0253",
          "displayName": "Possible unintended reference comparison",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8670",
          "displayName": "Object or collection initializer implicitly dereferences possibly null member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0659",
          "displayName": "Class overrides Object.Equals(object o) but not Object.GetHashCode()",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0657",
          "displayName": "'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0658",
          "displayName": "'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0652",
          "displayName": "Comparison to integral constant is useless; the constant is outside the range of type 'type'.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1981",
          "displayName": "Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object' and will succeed for all non-null values",
          "enabled": true
        },
        {
          "shortName": "CppClassIsIncomplete",
          "displayName": "Use of an incomplete type inside a template",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1998",
          "displayName": "Async function without await expression",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0665",
          "displayName": "Assignment in conditional expression",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8597",
          "displayName": "Thrown value may be null.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0642",
          "displayName": "Possible mistaken empty statement",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0693",
          "displayName": "Type parameter has the same name as a type parameter from the outer type",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42353,BC42354,BC42355",
          "displayName": "Function doesn't return a struct value on all code paths",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0675",
          "displayName": "Bitwise-or operator used on a sign-extended operand.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0672",
          "displayName": "Member overrides obsolete member",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS9073",
          "displayName": "The 'scoped' modifier of a parameter doesn't match target delegate.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9074",
          "displayName": "The 'scoped' modifier of parameter doesn't match overridden or implemented member.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9080",
          "displayName": "Use of a variable in this context may expose referenced variables outside of their declaration scope.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9081",
          "displayName": "A result of a stackalloc expression in this context may be exposed outside of the containing method.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9082",
          "displayName": "A local variable is returned by reference but was initialized to a value that cannot be returned by reference.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9042",
          "displayName": "Obsolete members should not be required.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS9094",
          "displayName": "This returns a parameter by reference through a ref parameter; but it can only safely be returned in a return statement.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9095",
          "displayName": "This returns by reference a member of parameter through a ref parameter; but it can only safely be returned in a return statement.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9097",
          "displayName": "This ref-assigns a value that has a wider value escape scope than the target allowing assignment through the target of values with narrower escapes scopes.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9083",
          "displayName": "A member of a variable is returned by reference but was initialized to a value that cannot be returned by reference",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9084",
          "displayName": "Struct member returns 'this' or other instance members by reference.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9085",
          "displayName": "This ref-assigns an expression to a variable with a narrower escape scope.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9086",
          "displayName": "The branches of the ref conditional operator refer to variables with incompatible declaration scopes.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9087",
          "displayName": "This returns a parameter by reference but it is not a ref parameter.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9088",
          "displayName": "This returns a parameter by reference but it is scoped to the current method.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9089",
          "displayName": "This returns by reference a member of parameter that is not a ref or out parameter.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9090",
          "displayName": "This returns by reference a member of parameter that is scoped to the current method.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9091",
          "displayName": "This returns local by reference but it is not a ref local.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9092",
          "displayName": "This returns a member of local by reference but it is not a ref local.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS9093",
          "displayName": "This ref-assigns a value that can only escape the current method through a return statement.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS1066",
          "displayName": "Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional arguments",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC400005",
          "displayName": "Member shadows an overriable member",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1058",
          "displayName": "A previous catch clause already catches all exceptions",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8509",
          "displayName": "The switch expression does not handle all possible inputs (it is not exhaustive).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8500",
          "displayName": "This takes the address of, gets the size of, or declares a pointer to a managed type.",
          "enabled": false
        },
        {
          "shortName": "CSharpWarnings__CS1911",
          "displayName": "Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8524",
          "displayName": "The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0618",
          "displayName": "Use of obsolete symbol",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0612",
          "displayName": "Use of obsolete symbol (without message)",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1957",
          "displayName": "Multiple override candidates at run-time",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0628",
          "displayName": "Declaring new protected member in sealed class is the same as declaring it as private",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42356",
          "displayName": "Async method lacks 'Await' operators",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42358",
          "displayName": "Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'Await' operator to the result of the call.",
          "enabled": true
        },
        {
          "shortName": "NotAccessedField.Compiler",
          "displayName": "Non-accessed field",
          "enabled": true
        },
        {
          "shortName": "UnassignedField.Compiler",
          "displayName": "Unassigned field",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42322",
          "displayName": "Runtime errors are likely to occur when converting X to Y",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42349",
          "displayName": "Redundant DirectCast to the equals value type",
          "enabled": true
        },
        {
          "shortName": "UnassignedReadonlyField.Compiler",
          "displayName": "Unassigned readonly field",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0660,CS0661",
          "displayName": "Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overridden",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42309",
          "displayName": "XML comment has a tag with a 'cref' attribute that could not be resolved",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42304",
          "displayName": "Syntax error in XML comment",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1030",
          "displayName": "'#warning' directive",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8819",
          "displayName": "Nullability of reference types in return type doesn't match partial method declaration.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8825",
          "displayName": "Return value must be non-null because parameter mentioned in [NotNullIfNotNull] annotation is non-null.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8824",
          "displayName": "Parameter must have a non-null value when exiting because parameter mentioned in [NotNullIfNotNull] annotation is non-null.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0078",
          "displayName": "The 'l' suffix is easily confused with the digit '1'",
          "enabled": true
        },
        {
          "shortName": "CppUnionMemberOfReferenceType",
          "displayName": "Union member of reference type",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8851",
          "displayName": "Record defined 'Equals' but not 'GetHashCode'",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8860",
          "displayName": "Types and aliases should not be named 'record'",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8847",
          "displayName": "The switch expression does not handle some null inputs (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8846",
          "displayName": "The switch expression does not handle all possible values of its input type (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8892",
          "displayName": "Asynchronous 'Main' method will not be used as an entry point because a synchronous entry point was found.",
          "enabled": true
        },
        {
          "shortName": "CppTemplateParameterShadowing",
          "displayName": "Redeclaration of a template parameter from an outer scope",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42016",
          "displayName": "Runtime errors might occur when converting X to Y",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42025",
          "displayName": "Access of shared member through an instance",
          "enabled": true
        },
        {
          "shortName": "CppUserDefinedLiteralSuffixDoesNotStartWithUnderscore",
          "displayName": "User-defined literal suffixes must start with an underscore",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0108,CS0114",
          "displayName": "Keyword 'new' is required",
          "enabled": true
        },
        {
          "shortName": "ObsoleteElement",
          "displayName": "Use of obsolete type or type member",
          "enabled": true
        },
        {
          "shortName": "CppMutableSpecifierOnReferenceMember",
          "displayName": "Reference class member with 'mutable' specifier",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8714",
          "displayName": "Nullability of type argument doesn't match 'notnull' constraint.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8777",
          "displayName": "Parameter must have a non-null value when exiting.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8776",
          "displayName": "Member cannot be used in this attribute.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8775",
          "displayName": "Member must conditionally have a non-null value when exiting a function.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8774",
          "displayName": "Member must have a non-null value when exiting.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8770",
          "displayName": "Method lacks '[DoesNotReturn]' annotation in order to match implemented or overridden member.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8769",
          "displayName": "Nullability of type of parameter doesn't match implemented member (possibly because of nullability attributes).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8768",
          "displayName": "Nullability of return type doesn't match implemented member (possibly because of nullability attributes).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8767",
          "displayName": "Nullability of type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8766",
          "displayName": "Nullability of return type doesn't match implicitly implemented member (possibly because of nullability attributes).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8765",
          "displayName": "Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8764",
          "displayName": "Nullability of return type doesn't match overridden member (possibly because of nullability attributes).",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8763",
          "displayName": "A method marked [DoesNotReturn] should not return.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8762",
          "displayName": "Parameter must conditionally have a non-null value when exiting a function.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8794",
          "displayName": "Given expression always matches the provided pattern",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42104",
          "displayName": "Variable is used before it has been assigned a value",
          "enabled": true
        },
        {
          "shortName": "CppPrecompiledHeaderNotFound",
          "displayName": "Precompiled header is not found",
          "enabled": true
        },
        {
          "shortName": "CppDefaultInitializationWithNoUserConstructor",
          "displayName": "Default initialization of a const-qualified object of a type without a user-provided default constructor",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__WME006",
          "displayName": "Namespace should be default namespace of this project",
          "enabled": true
        },
        {
          "shortName": "CppPrecompiledHeaderIsNotIncluded",
          "displayName": "Precompiled header is not included",
          "enabled": true
        },
        {
          "shortName": "UnusedVariable.Compiler",
          "displayName": "Unused local variable",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC42105,BC42106,BC42107",
          "displayName": "Function doesn't return a reference type value on all code paths",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC40056",
          "displayName": "Namespace or type specified in the Imports 'name' doesn't contain any public member or cannot be found",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8123",
          "displayName": "The tuple element name is ignored because a different name or no name is specified by the target type.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1522",
          "displayName": "Empty switch block",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1587",
          "displayName": "XML comment is not placed on a valid language element",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1589",
          "displayName": "Unable to include XML fragment",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1584",
          "displayName": "Syntax error in XML comment",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1580",
          "displayName": "Incorrect signature in XML comment",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1590",
          "displayName": "Invalid XML include element",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1591",
          "displayName": "Missing XML comment for publicly visible type or member",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1592",
          "displayName": "Badly formed XML in included comments file",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1571",
          "displayName": "Duplicate param tag in XML comment",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1572",
          "displayName": "XML comment has a 'param' tag for 'Parameter', but there is no parameter by that name",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1573",
          "displayName": "Parameter has no matching param tag in the XML comment",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1574",
          "displayName": "Ambiguous reference in XML comment",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS1570",
          "displayName": "Invalid XML in XML comment",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC40000",
          "displayName": "Use obsolete member",
          "enabled": true
        },
        {
          "shortName": "VBWarnings__BC40008",
          "displayName": "Use obsolete member (without message)",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CA2252",
          "displayName": "Opt in to preview features before using them.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8947",
          "displayName": "Parameter occurs after interpolated string handler parameter in the parameter list.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0197",
          "displayName": "Taking address of marshal-by-reference class field",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8971",
          "displayName": "[InterpolatedStringHandlerArgument] has no effect when applied to lambda parameters and will be ignored at the call site.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8981",
          "displayName": "The type name only contains lower-cased ASCII characters. Such names may become reserved for the language",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8966",
          "displayName": "The CallerArgumentExpressionAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8965",
          "displayName": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8963",
          "displayName": "The CallerArgumentExpressionAttribute is applied with an invalid parameter name.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8962",
          "displayName": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerMemberNameAttribute",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8961",
          "displayName": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerFilePathAttribute",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8960",
          "displayName": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerLineNumberAttribute",
          "enabled": true
        },
        {
          "shortName": "CppExplicitSpecializationInNonNamespaceScope",
          "displayName": "Explicit specialization in non-namespace scope",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0109",
          "displayName": "Keyword 'new' is redundant",
          "enabled": true
        },
        {
          "shortName": "CppAwaiterTypeIsNotClass",
          "displayName": "Awaiter type is not a class",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8094",
          "displayName": "Alignment value 'value' has a magnitude greater than 'magnitude limit' and may result in a large formatted string.",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS8073",
          "displayName": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0183",
          "displayName": "Given expression is always of the provided type",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0184",
          "displayName": "Given expression is never of the provided type",
          "enabled": true
        },
        {
          "shortName": "CSharpWarnings__CS0162",
          "displayName": "Code is unreachable",
          "enabled": true
        }
      ]
    },
    {
      "name": "CSS",
      "inspections": [
        {
          "shortName": "CssConvertColorToRgbInspection",
          "displayName": "Color could be replaced with rgb()",
          "enabled": false,
          "description": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
        },
        {
          "shortName": "CssOverwrittenProperties",
          "displayName": "Overwritten property",
          "enabled": false,
          "description": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
        },
        {
          "shortName": "CssBrowserCompatibilityForProperties",
          "displayName": "Property is incompatible with selected browsers",
          "enabled": false,
          "description": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
        },
        {
          "shortName": "CssUnusedSymbol",
          "displayName": "Unused selector",
          "enabled": false,
          "description": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
        },
        {
          "shortName": "CssConvertColorToHexInspection",
          "displayName": "Color could be replaced with #-hex",
          "enabled": false,
          "description": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
        },
        {
          "shortName": "CssReplaceWithShorthandUnsafely",
          "displayName": "Properties may probably be replaced with a shorthand",
          "enabled": false,
          "description": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
        },
        {
          "shortName": "CssReplaceWithShorthandSafely",
          "displayName": "Properties may be safely replaced with a shorthand",
          "enabled": false,
          "description": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
        }
      ]
    },
    {
      "name": "Invalid elements",
      "inspections": [
        {
          "shortName": "CssInvalidFunction",
          "displayName": "Invalid function",
          "enabled": false,
          "description": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
        },
        {
          "shortName": "CssInvalidHtmlTagReference",
          "displayName": "Invalid type selector",
          "enabled": false,
          "description": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
        },
        {
          "shortName": "CssUnknownTarget",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
        },
        {
          "shortName": "CssInvalidCharsetRule",
          "displayName": "Misplaced or incorrect @charset",
          "enabled": false,
          "description": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
        },
        {
          "shortName": "CssInvalidPseudoSelector",
          "displayName": "Invalid pseudo-selector",
          "enabled": false,
          "description": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
        },
        {
          "shortName": "CssInvalidMediaFeature",
          "displayName": "Invalid media feature",
          "enabled": false,
          "description": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
        },
        {
          "shortName": "CssUnresolvedCustomProperty",
          "displayName": "Unresolved custom property",
          "enabled": false,
          "description": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
        },
        {
          "shortName": "CssUnknownProperty",
          "displayName": "Unknown property",
          "enabled": false,
          "description": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
        },
        {
          "shortName": "CssInvalidAtRule",
          "displayName": "Unknown at-rule",
          "enabled": false,
          "description": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
        },
        {
          "shortName": "CssNegativeValue",
          "displayName": "Negative property value",
          "enabled": false,
          "description": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
        },
        {
          "shortName": "CssInvalidPropertyValue",
          "displayName": "Invalid property value",
          "enabled": false,
          "description": "Reports an incorrect CSS property value."
        },
        {
          "shortName": "CssInvalidImport",
          "displayName": "Misplaced @import",
          "enabled": false,
          "description": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
        },
        {
          "shortName": "CssUnresolvedClassInComposesRule",
          "displayName": "Unresolved class in 'composes' rule",
          "enabled": false,
          "description": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
        }
      ]
    },
    {
      "name": "Potentially undesirable code constructs",
      "inspections": [
        {
          "shortName": "ContinueStatementJS",
          "displayName": "'continue' statement",
          "enabled": false,
          "description": "Reports a `continue` statement."
        },
        {
          "shortName": "CommaExpressionJS",
          "displayName": "Comma expression",
          "enabled": false,
          "description": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of `for` loops are ignored."
        },
        {
          "shortName": "BreakStatementWithLabelJS",
          "displayName": "'break' statement with label",
          "enabled": false,
          "description": "Reports a labeled `break` statement."
        },
        {
          "shortName": "AnonymousFunctionJS",
          "displayName": "Anonymous function",
          "enabled": false,
          "description": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a `name` property specified in the ECMAScript 6 standard. For example, `var bar = function() {};` is not reported."
        },
        {
          "shortName": "BreakStatementJS",
          "displayName": "'break' statement",
          "enabled": false,
          "description": "Reports a `break` statements. Ignores `break` statements that end case blocks."
        },
        {
          "shortName": "DebuggerStatementJS",
          "displayName": "'debugger' statement",
          "enabled": false,
          "description": "Reports a `debugger` statement used for interaction with the Javascript debuggers. Such statements should not appear in production code."
        },
        {
          "shortName": "ConditionalExpressionJS",
          "displayName": "Conditional expression",
          "enabled": false,
          "description": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit `if` statements."
        },
        {
          "shortName": "VoidExpressionJS",
          "displayName": "'void' expression",
          "enabled": false,
          "description": "Reports a `void` expression."
        },
        {
          "shortName": "ContinueStatementWithLabelJS",
          "displayName": "'continue' statement with label",
          "enabled": false,
          "description": "Reports a labeled `continue` statement."
        },
        {
          "shortName": "LabeledStatementJS",
          "displayName": "Labeled statement",
          "enabled": false,
          "description": "Reports a labeled statement."
        },
        {
          "shortName": "WithStatementJS",
          "displayName": "'with' statement",
          "enabled": false,
          "description": "Reports a `with` statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables."
        }
      ]
    },
    {
      "name": "Clang Static Analyzer Checks",
      "inspections": [
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusSmartPtrModeling",
          "displayName": "cplusplus.SmartPtrModeling clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxNSOrCFErrorDerefChecker",
          "displayName": "osx.NSOrCFErrorDerefChecker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinPerformancePadding",
          "displayName": "optin.performance.Padding clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedArraySubscript",
          "displayName": "core.uninitialized.ArraySubscript clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaSelfInit",
          "displayName": "osx.cocoa.SelfInit clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingTrustReturnsNonnull",
          "displayName": "apiModeling.TrustReturnsNonnull clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedCapturedBlockVariable",
          "displayName": "core.uninitialized.CapturedBlockVariable clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinOsxOSObjectCStyleCast",
          "displayName": "optin.osx.OSObjectCStyleCast clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixCstringBadSizeArg",
          "displayName": "unix.cstring.BadSizeArg clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullableReturnedFromNonnull",
          "displayName": "nullability.NullableReturnedFromNonnull clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerDeadcodeDeadStores",
          "displayName": "deadcode.DeadStores clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingLlvmCastValue",
          "displayName": "apiModeling.llvm.CastValue clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerFuchsiaHandleChecker",
          "displayName": "fuchsia.HandleChecker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaNSAutoreleasePool",
          "displayName": "osx.cocoa.NSAutoreleasePool clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaDealloc",
          "displayName": "osx.cocoa.Dealloc clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedBranch",
          "displayName": "core.uninitialized.Branch clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaVariadicMethodTypes",
          "displayName": "osx.cocoa.VariadicMethodTypes clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaMissingSuperCall",
          "displayName": "osx.cocoa.MissingSuperCall clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusPureVirtualCall",
          "displayName": "cplusplus.PureVirtualCall clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaClassRelease",
          "displayName": "osx.cocoa.ClassRelease clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIMktemp",
          "displayName": "security.insecureAPI.mktemp clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaRetainCount",
          "displayName": "osx.cocoa.RetainCount clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIUncheckedReturn",
          "displayName": "security.insecureAPI.UncheckedReturn clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreNonnilStringConstants",
          "displayName": "core.NonnilStringConstants clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIDeprecatedOrUnsafeBufferHandling",
          "displayName": "security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIMkstemp",
          "displayName": "security.insecureAPI.mkstemp clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixDynamicMemoryModeling",
          "displayName": "unix.DynamicMemoryModeling clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaAtSync",
          "displayName": "osx.cocoa.AtSync clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinMpiMPIChecker",
          "displayName": "optin.mpi.MPI-Checker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullReturnedFromNonnull",
          "displayName": "nullability.NullReturnedFromNonnull clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullabilityBase",
          "displayName": "nullability.NullabilityBase clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerValistValistBase",
          "displayName": "valist.ValistBase clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusNewDelete",
          "displayName": "cplusplus.NewDelete clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixCstringNullArg",
          "displayName": "unix.cstring.NullArg clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinPerformanceGCDAntipattern",
          "displayName": "optin.performance.GCDAntipattern clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaNonNilReturnValue",
          "displayName": "osx.cocoa.NonNilReturnValue clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxSecKeychainAPI",
          "displayName": "osx.SecKeychainAPI clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxMIG",
          "displayName": "osx.MIG clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIStrcpy",
          "displayName": "security.insecureAPI.strcpy clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersPointerSizedValues",
          "displayName": "osx.coreFoundation.containers.PointerSizedValues clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIBzero",
          "displayName": "security.insecureAPI.bzero clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreDynamicTypePropagation",
          "displayName": "core.DynamicTypePropagation clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersOutOfBounds",
          "displayName": "osx.coreFoundation.containers.OutOfBounds clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerWebkitRefCntblBaseVirtualDtor",
          "displayName": "webkit.RefCntblBaseVirtualDtor clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingTrustNonnull",
          "displayName": "apiModeling.TrustNonnull clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerValistUninitialized",
          "displayName": "valist.Uninitialized clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusInnerPointer",
          "displayName": "cplusplus.InnerPointer clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedUndefReturn",
          "displayName": "core.uninitialized.UndefReturn clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingGoogleGTest",
          "displayName": "apiModeling.google.GTest clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIGets",
          "displayName": "security.insecureAPI.gets clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullablePassedToNonnull",
          "displayName": "nullability.NullablePassedToNonnull clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIDecodeValueOfObjCType",
          "displayName": "security.insecureAPI.decodeValueOfObjCType clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingLlvmReturnValue",
          "displayName": "apiModeling.llvm.ReturnValue clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusStringChecker",
          "displayName": "cplusplus.StringChecker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreVLASize",
          "displayName": "core.VLASize clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreBuiltinBuiltinFunctions",
          "displayName": "core.builtin.BuiltinFunctions clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityEmptyLocalizationContextChecker",
          "displayName": "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaRunLoopAutoreleaseLeak",
          "displayName": "osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinCplusplusUninitializedObject",
          "displayName": "optin.cplusplus.UninitializedObject clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusPlacementNew",
          "displayName": "cplusplus.PlacementNew clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreStackAddressEscape",
          "displayName": "core.StackAddressEscape clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusMove",
          "displayName": "cplusplus.Move clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusNewDeleteLeaks",
          "displayName": "cplusplus.NewDeleteLeaks clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxAPI",
          "displayName": "osx.API clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullableDereferenced",
          "displayName": "nullability.NullableDereferenced clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixCstringCStringModeling",
          "displayName": "unix.cstring.CStringModeling clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusVirtualCallModeling",
          "displayName": "cplusplus.VirtualCallModeling clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerValistUnterminated",
          "displayName": "valist.Unterminated clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerValistCopyToSelf",
          "displayName": "valist.CopyToSelf clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaObjCGenerics",
          "displayName": "osx.cocoa.ObjCGenerics clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreStackAddrEscapeBase",
          "displayName": "core.StackAddrEscapeBase clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreCallAndMessageModeling",
          "displayName": "core.CallAndMessageModeling clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcmp",
          "displayName": "security.insecureAPI.bcmp clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaRetainCountBase",
          "displayName": "osx.cocoa.RetainCountBase clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaLoops",
          "displayName": "osx.cocoa.Loops clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxNumberObjectConversion",
          "displayName": "osx.NumberObjectConversion clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityNonLocalizedStringChecker",
          "displayName": "optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixMallocSizeof",
          "displayName": "unix.MallocSizeof clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationCFError",
          "displayName": "osx.coreFoundation.CFError clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIGetpw",
          "displayName": "security.insecureAPI.getpw clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUndefinedBinaryOperatorResult",
          "displayName": "core.UndefinedBinaryOperatorResult clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaNilArg",
          "displayName": "osx.cocoa.NilArg clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCplusplusSelfAssignment",
          "displayName": "cplusplus.SelfAssignment clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxOSObjectRetainCount",
          "displayName": "osx.OSObjectRetainCount clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPISecuritySyntaxChecker",
          "displayName": "security.insecureAPI.SecuritySyntaxChecker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingStdCLibraryFunctions",
          "displayName": "apiModeling.StdCLibraryFunctions clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIVfork",
          "displayName": "security.insecureAPI.vfork clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationCFRetainRelease",
          "displayName": "osx.coreFoundation.CFRetainRelease clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityFloatLoopCounter",
          "displayName": "security.FloatLoopCounter clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreCallAndMessage",
          "displayName": "core.CallAndMessage clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinCplusplusVirtualCall",
          "displayName": "optin.cplusplus.VirtualCall clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerWebkitUncountedLambdaCapturesChecker",
          "displayName": "webkit.UncountedLambdaCapturesChecker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreDivideZero",
          "displayName": "core.DivideZero clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixAPI",
          "displayName": "unix.API clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreNonNullParamChecker",
          "displayName": "core.NonNullParamChecker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreUninitializedAssign",
          "displayName": "core.uninitialized.Assign clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOptinPortabilityUnixAPI",
          "displayName": "optin.portability.UnixAPI clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCoreFoundationCFNumber",
          "displayName": "osx.coreFoundation.CFNumber clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerApiModelingErrno",
          "displayName": "apiModeling.Errno clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcopy",
          "displayName": "security.insecureAPI.bcopy clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreBuiltinNoReturnFunctions",
          "displayName": "core.builtin.NoReturnFunctions clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaIncompatibleMethodTypes",
          "displayName": "osx.cocoa.IncompatibleMethodTypes clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerSecurityInsecureAPIRand",
          "displayName": "security.insecureAPI.rand clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerWebkitNoUncountedMemberChecker",
          "displayName": "webkit.NoUncountedMemberChecker clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaNSError",
          "displayName": "osx.cocoa.NSError clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixVfork",
          "displayName": "unix.Vfork clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixMismatchedDeallocator",
          "displayName": "unix.MismatchedDeallocator clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerCoreNullDereference",
          "displayName": "core.NullDereference clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaSuperDealloc",
          "displayName": "osx.cocoa.SuperDealloc clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaUnusedIvars",
          "displayName": "osx.cocoa.UnusedIvars clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxCocoaAutoreleaseWrite",
          "displayName": "osx.cocoa.AutoreleaseWrite clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerNullabilityNullPassedToNonnull",
          "displayName": "nullability.NullPassedToNonnull clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerUnixMalloc",
          "displayName": "unix.Malloc clang static analyzer check",
          "enabled": false
        },
        {
          "shortName": "CppClangTidyClangAnalyzerOsxObjCProperty",
          "displayName": "osx.ObjCProperty clang static analyzer check",
          "enabled": false
        }
      ]
    },
    {
      "name": "Redundancies in Symbol Declarations",
      "inspections": [
        {
          "shortName": "UnusedTupleComponentInReturnValue",
          "displayName": "Component of the tuple is never used",
          "enabled": true
        },
        {
          "shortName": "MeaninglessDefaultParameterValue",
          "displayName": "'DefaultParameterValueAttribute' must be used in conjunction with 'OptionalAttribute'",
          "enabled": true
        },
        {
          "shortName": "RedundantExtendsListEntry",
          "displayName": "Redundant class or interface specification in base types list",
          "enabled": true
        },
        {
          "shortName": "RedundantDefaultMemberInitializer",
          "displayName": "Redundant member initializer",
          "enabled": true
        },
        {
          "shortName": "UnusedLabel",
          "displayName": "Unused label",
          "enabled": true
        },
        {
          "shortName": "UnusedMethodReturnValue.Global",
          "displayName": "Method return value is never used (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "UnusedMemberHierarchy.Local",
          "displayName": "Type member is only used in overrides (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "ClassWithVirtualMembersNeverInherited.Local",
          "displayName": "Class with virtual (overridable) members never inherited (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "EmptyConstructor",
          "displayName": "Empty constructor",
          "enabled": true
        },
        {
          "shortName": "PartialTypeWithSinglePart",
          "displayName": "Redundant 'partial' modifier on type declaration",
          "enabled": true
        },
        {
          "shortName": "ClassWithVirtualMembersNeverInherited.Global",
          "displayName": "Class with virtual (overridable) members never inherited (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "UnusedParameter.Local",
          "displayName": "Unused parameter (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "EnumUnderlyingTypeIsInt",
          "displayName": "Underlying type of enum is 'int'",
          "enabled": true
        },
        {
          "shortName": "UnusedLocalFunctionReturnValue",
          "displayName": "Local function return value is never used",
          "enabled": true
        },
        {
          "shortName": "UnusedMemberHierarchy.Global",
          "displayName": "Type member is only used in overrides (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "UnusedLocalFunction.Compiler",
          "displayName": "Local function is never used",
          "enabled": true
        },
        {
          "shortName": "NotAccessedVariable",
          "displayName": "Non-accessed local variable",
          "enabled": true
        },
        {
          "shortName": "OutParameterValueIsAlwaysDiscarded.Local",
          "displayName": "Parameter output value is always discarded (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "OutParameterValueIsAlwaysDiscarded.Global",
          "displayName": "Parameter output value is always discarded (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "RedundantOverload.Global",
          "displayName": "Redundant method overload (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "UnusedParameterInPartialMethod",
          "displayName": "Unused parameter in partial method",
          "enabled": true
        },
        {
          "shortName": "UnusedMember.Local",
          "displayName": "Type member is never used (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "ParameterOnlyUsedForPreconditionCheck.Global",
          "displayName": "Parameter is only used for precondition check (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "PartialMethodWithSinglePart",
          "displayName": "Redundant 'partial' modifier on method declaration",
          "enabled": true
        },
        {
          "shortName": "UnusedMethodReturnValue.Local",
          "displayName": "Method return value is never used (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "VirtualMemberNeverOverridden.Local",
          "displayName": "Virtual (overridable) member is never overridden (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "EntityNameCapturedOnly.Local",
          "displayName": "Entity is only used to capture its name (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "UnusedParameter.Global",
          "displayName": "Unused parameter (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "SealedMemberInSealedClass",
          "displayName": "Sealed member in sealed class",
          "enabled": true
        },
        {
          "shortName": "UnusedVariable",
          "displayName": "Unused local variable",
          "enabled": true
        },
        {
          "shortName": "UnusedTypeParameter",
          "displayName": "Unused type parameter",
          "enabled": true
        },
        {
          "shortName": "UnusedType.Global",
          "displayName": "Type is never used (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "VirtualMemberNeverOverridden.Global",
          "displayName": "Virtual (overridable) member is never overridden (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "UnusedMember.Global",
          "displayName": "Type member is never used (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "EmptyDestructor",
          "displayName": "Empty destructor",
          "enabled": true
        },
        {
          "shortName": "UnusedLocalFunction",
          "displayName": "Local function is never used",
          "enabled": true
        },
        {
          "shortName": "UnusedMemberInSuper.Global",
          "displayName": "Type member is never accessed via base type (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "UnusedMemberInSuper.Local",
          "displayName": "Type member is never accessed via base type (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "NotAccessedOutParameterVariable",
          "displayName": "Non-accessed local variable only used to discard the 'out' parameter value",
          "enabled": false
        },
        {
          "shortName": "RedundantParams",
          "displayName": "'params' modifier is always ignored on overrides",
          "enabled": true
        },
        {
          "shortName": "RedundantOverload.Local",
          "displayName": "Redundant method overload (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "RedundantBaseConstructorCall",
          "displayName": "Redundant base constructor call",
          "enabled": true
        },
        {
          "shortName": "EntityNameCapturedOnly.Global",
          "displayName": "Entity is only used to capture its name (non-private accessibility)",
          "enabled": true
        },
        {
          "shortName": "RedundantOverriddenMember",
          "displayName": "Redundant member override",
          "enabled": true
        },
        {
          "shortName": "ParameterOnlyUsedForPreconditionCheck.Local",
          "displayName": "Parameter is only used for precondition check (private accessibility)",
          "enabled": true
        },
        {
          "shortName": "UnusedPositionalParameterCompiler",
          "displayName": "Unused positional parameter",
          "enabled": true
        },
        {
          "shortName": "EmptyNamespace",
          "displayName": "Empty namespace declaration",
          "enabled": true
        },
        {
          "shortName": "UnusedType.Local",
          "displayName": "Type is never used (private accessibility)",
          "enabled": true
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "UseEllipsisInPropertyInspection",
          "displayName": "Three dot characters instead of the ellipsis",
          "enabled": false,
          "description": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
        },
        {
          "shortName": "AlphaUnsortedPropertiesFile",
          "displayName": "Properties file or resource bundle is alphabetically unsorted",
          "enabled": false,
          "description": "Reports alphabetically unsorted resource bundles or .properties files."
        },
        {
          "shortName": "UnusedProperty",
          "displayName": "Unused property",
          "enabled": false,
          "description": "Reports properties that are not referenced outside of the .properties file they are contained in."
        },
        {
          "shortName": "TrailingSpacesInProperty",
          "displayName": "Trailing spaces in property",
          "enabled": false,
          "description": "Reports properties whose keys or values end with a whitespace."
        },
        {
          "shortName": "WrongPropertyKeyValueDelimiter",
          "displayName": "Property key/value delimiter doesn't match code style settings",
          "enabled": false,
          "description": "Reports properties in which key or value delimiters do not match code style settings."
        },
        {
          "shortName": "DuplicatePropertyInspection",
          "displayName": "Duplicate property",
          "enabled": false,
          "description": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
        }
      ]
    },
    {
      "name": "XSLT",
      "inspections": [
        {
          "shortName": "XsltUnusedDeclaration",
          "displayName": "Unused variable or parameter",
          "enabled": false,
          "description": "Reports local variables and parameters that are never used."
        },
        {
          "shortName": "XsltDeclarations",
          "displayName": "Incorrect declaration",
          "enabled": false,
          "description": "Reports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:"
        },
        {
          "shortName": "XsltTemplateInvocation",
          "displayName": "Incorrect template invocation",
          "enabled": false,
          "description": "Reports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once in named XSLT template invocations.\n\n\nParameters declared with a default value are optional and will not be reported as missing."
        },
        {
          "shortName": "XsltVariableShadowing",
          "displayName": "Shadowed variable",
          "enabled": false,
          "description": "Reports shadowed XSLT variables."
        }
      ]
    },
    {
      "name": "Code Notification",
      "inspections": [
        {
          "shortName": "RouteTemplates.ParameterConstraintCanBeSpecified",
          "displayName": "Route parameter constraint can be added due to type of method argument",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.ParameterTypeAndConstraintsMismatch",
          "displayName": "Type of parameter doesn't satisfy constraints declared in route template",
          "enabled": true
        },
        {
          "shortName": "Xaml.EmptyGridLengthDefinition",
          "displayName": "Grid length definition must not be empty",
          "enabled": true
        },
        {
          "shortName": "Xaml.BindingWithContextNotResolved",
          "displayName": "Unresolved binding path when DataContext is known",
          "enabled": true
        },
        {
          "shortName": "Xaml.ResourceFilePathCaseMismatch",
          "displayName": "Path to resource is case-sensitive",
          "enabled": true
        },
        {
          "shortName": "Web.MappedPath",
          "displayName": "Mapped path",
          "enabled": true
        },
        {
          "shortName": "Xaml.CompiledBindingMissingDataTypeErrorHighlighting",
          "displayName": "x:DataType not specified for CompiledBinding",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.SyntaxError",
          "displayName": "Syntax error",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.ActionRoutePrefixCanBeExtractedToControllerRoute",
          "displayName": "Action's route prefix can be extracted to controller's route",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.RouteParameterConstraintNotResolved",
          "displayName": "Route parameter constraint not resolved",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.AmbiguousMatchingConstraintConstructor",
          "displayName": "More than one parameter constraint's constructor matched",
          "enabled": true
        },
        {
          "shortName": "Xaml.IgnoredPathHighlighting",
          "displayName": "Ignored path",
          "enabled": false
        },
        {
          "shortName": "RouteTemplates.ConstraintArgumentCannotBeConverted",
          "displayName": "Route parameter constraint argument cannot be converted to target type",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.MatchingConstraintConstructorNotResolved",
          "displayName": "Matching parameter constraint's constructor not found",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.OptionalParameterCanBePrecededOnlyBySinglePeriod",
          "displayName": "Optional parameter can be preceded only by single period ('.') in the segment",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.MethodMissingRouteParameters",
          "displayName": "Not all route parameters are passed to method",
          "enabled": true
        },
        {
          "shortName": "Xaml.ElementNameReferenceNotResolved",
          "displayName": "Element name reference is not resolved",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.RouteParameterIsNotPassedToMethod",
          "displayName": "Route parameter can be passed to method",
          "enabled": true
        },
        {
          "shortName": "Xaml.ConstructorWarning",
          "displayName": "Constructor not resolved",
          "enabled": true
        },
        {
          "shortName": "Xaml.InvalidResourceTargetType",
          "displayName": "XAML style of invalid target type",
          "enabled": true
        },
        {
          "shortName": "Xaml.DependencyPropertyResolveError",
          "displayName": "Dependency property descriptor field missing",
          "enabled": true
        },
        {
          "shortName": "Xaml.BindingWithoutContextNotResolved",
          "displayName": "Unresolved binding path when DataContext is unknown",
          "enabled": true
        },
        {
          "shortName": "Xaml.RoutedEventResolveError",
          "displayName": "Routed event descriptor field missing",
          "enabled": true
        },
        {
          "shortName": "Xaml.GridDefinitionsCanBeConvertedToAttribute",
          "displayName": "Grid columns/rows definitions can be converted to attribute",
          "enabled": true
        },
        {
          "shortName": "Xaml.DecimalParsingIsCultureDependent",
          "displayName": "Decimal numbers parsed depending on current machine culture",
          "enabled": true
        },
        {
          "shortName": "Xaml.InvalidType",
          "displayName": "Object/markup extension of invalid type",
          "enabled": true
        },
        {
          "shortName": "Xaml.OverloadsCollision",
          "displayName": "Multiple overloads with same arguments count found",
          "enabled": true
        },
        {
          "shortName": "Xaml.StaticResourceNotResolved",
          "displayName": "Static resource not resolved",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.OptionalParameterMustBeAtTheEndOfSegment",
          "displayName": "Optional parameter must be at the end of the segment",
          "enabled": true
        },
        {
          "shortName": "Web.IgnoredPath",
          "displayName": "Ignored path",
          "enabled": false
        },
        {
          "shortName": "Xaml.AvaloniaWrongBindingModeForStreamBindingOperator",
          "displayName": "Using stream binding operator in TwoWay or OneWayToSource binding modes",
          "enabled": true
        },
        {
          "shortName": "Xaml.InvalidMemberType",
          "displayName": "Member of invalid type",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.DuplicatedParameter",
          "displayName": "Parameter declared in route more than once",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.ParameterTypeCanBeMadeStricter",
          "displayName": "Parameter's type can be made stricter due to applied constraints",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.SymbolNotResolved",
          "displayName": "Symbol not resolved",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.ControllerRouteParameterIsNotPassedToMethods",
          "displayName": "Controller's route parameter can be passed to methods",
          "enabled": true
        },
        {
          "shortName": "NonParsableElement",
          "displayName": "Part of the code cannot be parsed",
          "enabled": true
        },
        {
          "shortName": "RouteTemplates.RouteTokenNotResolved",
          "displayName": "Route token not resolved",
          "enabled": true
        },
        {
          "shortName": "InactivePreprocessorBranch",
          "displayName": "Inactive preprocessor branch",
          "enabled": true
        },
        {
          "shortName": "InvocationIsSkipped",
          "displayName": "Method invocation is skipped",
          "enabled": true
        },
        {
          "shortName": "Xaml.StyleClassNotFound",
          "displayName": "Style class not found",
          "enabled": true
        },
        {
          "shortName": "Xaml.MappedPathHighlighting",
          "displayName": "Mapped path",
          "enabled": true
        },
        {
          "shortName": "Xaml.FieldModifierRequiresNameAttribute",
          "displayName": "x:FieldModifier attribute requires x:Name attribute",
          "enabled": true
        },
        {
          "shortName": "Xaml.InvalidResourceType",
          "displayName": "XAML resource of invalid type",
          "enabled": true
        },
        {
          "shortName": "Xaml.MethodArgumentsWillBeIgnored",
          "displayName": "Method arguments will be replaced by event's arguments in generated code",
          "enabled": true
        },
        {
          "shortName": "Xaml.ParentIsOutOfCurrentComponentTree",
          "displayName": "Parent is outside the current component tree",
          "enabled": true
        },
        {
          "shortName": "Xaml.DynamicResourceError",
          "displayName": "{DynamicResource} can only be used with dependency property",
          "enabled": true
        }
      ]
    },
    {
      "name": "ES2015 migration aids",
      "inspections": [
        {
          "shortName": "ES6ConvertModuleExportToExport",
          "displayName": "'module.exports' is used instead of 'export'",
          "enabled": false,
          "description": "Reports a `module.export` statement. Suggests replacing it with an `export` or `export default` statement.   \n\nPlease note that the quick-fix for converting `module.export` into `export` is not available for `module.export` inside functions or statements because `export` statements can only be at the top level of a module."
        },
        {
          "shortName": "ES6ConvertIndexedForToForOf",
          "displayName": "Indexed 'for' is used instead of 'for..of'",
          "enabled": false,
          "description": "Reports an indexed [for](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop used on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops are introduced in ECMAScript 6 and iterate over `iterable` objects."
        },
        {
          "shortName": "ES6ConvertVarToLetConst",
          "displayName": "'var' is used instead of 'let' or 'const'",
          "enabled": false,
          "description": "Reports a `var` declaration that is used instead of `let` or `const`.  \nBoth `let` and `const` are block-scoped and behave more strictly.   \n\nSuggests replacing all `var` declarations with `let` or `const` declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.   \nSelect the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action."
        },
        {
          "shortName": "ES6ConvertLetToConst",
          "displayName": "'let' is used instead of 'const'",
          "enabled": false,
          "description": "Reports a `let` declaration that can be made `const`.  "
        },
        {
          "shortName": "ES6ConvertRequireIntoImport",
          "displayName": "'require()' is used instead of 'import'",
          "enabled": false,
          "description": "Reports a `require()` statement. Suggests converting it to a `require()` call with an `import` statement.   \n\nEnable 'Convert require() inside inner scopes with Fix all action' to convert all `require()` calls inside the nested functions and statements when using the 'Fix all' action.   \n\nPlease note that converting `require()` statements inside inner scopes to `import` statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. `require()` calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used.   \nClear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action."
        },
        {
          "shortName": "JSFunctionExpressionToArrowFunction",
          "displayName": "Function expression is used instead of arrow function",
          "enabled": true,
          "description": "Reports a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) expression. Suggests converting it to an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nExample:\n\n    arr.map(function(el) {return el + 1})\n\nAfter applying the quick-fix the code looks as follows:\n\n    arr.map(el => el + 1)\n"
        },
        {
          "shortName": "JSStringConcatenationToES6Template",
          "displayName": "String concatenation is used instead of template literal",
          "enabled": true,
          "description": "Reports a string concatenation. Suggests replacing it with a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nExample\n\n     \"result: \" + a + \".\" \n\nAfter applying the quick-fix the code looks as follows:\n\n     `result: ${a}.` \n"
        },
        {
          "shortName": "ES6ConvertToForOf",
          "displayName": "'for..in' is used instead of 'for..of'",
          "enabled": false,
          "description": "Reports a usage of a [for..in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops, which are introduced in ECMAScript 6, iterate over `iterable` objects. For arrays, this structure is preferable to `for..in`, because it works only with array values but not with array object's properties."
        }
      ]
    },
    {
      "name": "DOM issues",
      "inspections": [
        {
          "shortName": "DocumentWriteJS",
          "displayName": "Call to 'document.write()'",
          "enabled": false,
          "description": "Reports a method call to `document.write()` or `document.writeln()`. Most usages of such calls are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, the `write()` and `writeln()` calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs."
        },
        {
          "shortName": "InnerHTMLJS",
          "displayName": "Use of 'innerHTML' property",
          "enabled": false,
          "description": "Reports a JavaScript access to DOM nodes as text using the `innerHTML` property. Most usages of `innerHTML` are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, `innerHTML` will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs."
        },
        {
          "shortName": "XHTMLIncompatabilitiesJS",
          "displayName": "Incompatible XHTML usages",
          "enabled": false,
          "description": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include **document.body** , **document.images** , **document.applets** , **document.links** , **document.forms** , and **document.anchors**."
        },
        {
          "shortName": "PlatformDetectionJS",
          "displayName": "Inaccurate platform detection",
          "enabled": false,
          "description": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform.\n\nPatterns detected include:\n\n* `document.all`\n* `document.layers`\n* `navigator.userAgent`\n* `navigator.oscpu`\n* `navigator.appName`\n* `navigator.appCodeName`\n* `navigator.platform`"
        }
      ]
    },
    {
      "name": "TypeScript",
      "inspections": [
        {
          "shortName": "TypeScriptValidateGenericTypes",
          "displayName": "Incorrect generic type argument",
          "enabled": false,
          "description": "Reports an invalid type argument in a function, interface, or class declaration."
        },
        {
          "shortName": "TypeScriptUMDGlobal",
          "displayName": "Referenced UMD global variable",
          "enabled": true,
          "description": "Reports a usage of a UMD global variable if the current file is a module (EcmaScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly."
        },
        {
          "shortName": "TypeScriptFieldCanBeMadeReadonly",
          "displayName": "Field can be readonly",
          "enabled": true,
          "description": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor)."
        },
        {
          "shortName": "TypeScriptConfig",
          "displayName": "Inconsistent tsconfig.json properties",
          "enabled": true,
          "description": "Reports inconsistency of a `paths`, `checkJs`, or `extends` property in a tsconfig.json file.   \nThe `checkJs` property requires `allowJs`.   \nThe `extends` property should be a valid file reference."
        },
        {
          "shortName": "TypeScriptUnresolvedFunction",
          "displayName": "Unresolved TypeScript function",
          "enabled": true,
          "description": "Reports a call of a function that is not resolved."
        },
        {
          "shortName": "TypeScriptUnresolvedVariable",
          "displayName": "Unresolved TypeScript variable",
          "enabled": true,
          "description": "Reports an unresolved reference to a variable or field."
        },
        {
          "shortName": "TypeScriptValidateTypes",
          "displayName": "Type mismatch",
          "enabled": false,
          "description": "Reports a parameter, return value, or assigned expression of incorrect type."
        },
        {
          "shortName": "TypeScriptSmartCast",
          "displayName": "Narrowed type",
          "enabled": true,
          "description": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection."
        },
        {
          "shortName": "TypeScriptJSXUnresolvedComponent",
          "displayName": "Unresolved JSX component",
          "enabled": false,
          "description": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
        },
        {
          "shortName": "TypeScriptCheckImport",
          "displayName": "Unresolved imported name",
          "enabled": true,
          "description": "Reports an unresolved name or binding in an `import` declaration in TypeScript code."
        },
        {
          "shortName": "TypeScriptRedundantGenericType",
          "displayName": "Redundant type arguments",
          "enabled": true,
          "description": "Reports a type argument that is equal to the default one and can be removed.\n\n\nExample:\n\n```\ntype Foo<T=number> = T;\nlet z: Foo<number>;\n```"
        },
        {
          "shortName": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
          "displayName": "Abstract class constructor can be made protected",
          "enabled": true,
          "description": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public)."
        },
        {
          "shortName": "TypeScriptValidateJSTypes",
          "displayName": "Type mismatch in 'any' type",
          "enabled": false,
          "description": "Reports a function call with a parameter, return value, or assigned expression or incorrect type, if the context symbol can be implicitly resolved to the `any` type.\n\n```\ndeclare var test: any;\ntest.hasOwnProperty(true); //reports 'true'\n```"
        },
        {
          "shortName": "TypeScriptExplicitMemberType",
          "displayName": "Explicit types",
          "enabled": true,
          "description": "Reports a type annotation that doesn't match the current code style for explicit types.\n\n\nType declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\n\n`\nvar pi: number = 3.14\n`\n\nIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit."
        },
        {
          "shortName": "TypeScriptDuplicateUnionOrIntersectionType",
          "displayName": "Duplicate union or intersection type component",
          "enabled": true,
          "description": "Reports a duplicate type inside a union or intersection."
        },
        {
          "shortName": "TypeScriptMissingConfigOption",
          "displayName": "Missing tsconfig.json option ",
          "enabled": true,
          "description": "Reports a usage that requires an explicit option in `tsconfig.json`. For example, to use JSX in `.tsx` files, `tsconfig.json` must contain `\"jsx\"` property."
        },
        {
          "shortName": "TypeScriptLibrary",
          "displayName": "Missing global library",
          "enabled": true,
          "description": "Reports a TypeScript library file that is required for a symbol but is not listed under the `lib` compiler option in `tsconfig.json`."
        },
        {
          "shortName": "TypeScriptMissingAugmentationImport",
          "displayName": "Missing augmentation import",
          "enabled": true,
          "description": "Reports a usage from [augmentation module](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) without an explicit import."
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion.TS",
          "displayName": "Equality operator may cause type coercion",
          "enabled": false,
          "description": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing `==` or `!=` equality operators with type-safe `===` or `!==` operators.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
        },
        {
          "shortName": "TypeScriptSuspiciousConstructorParameterAssignment",
          "displayName": "Assigned constructor field parameter",
          "enabled": true,
          "description": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.  \nIn this case, the corresponding field *won't* be assigned, only the local parameter value is modified.\n\n```\nclass Foo {\n  constructor(private p: number) {\n    p = 1; //must be this.p = 1;\n  }\n}\n```"
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "CheckXmlFileWithXercesValidator",
          "displayName": "Failed external validation",
          "enabled": false,
          "description": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
        },
        {
          "shortName": "XmlUnusedNamespaceDeclaration",
          "displayName": "Unused schema declaration",
          "enabled": false,
          "description": "Reports an unused namespace declaration or location hint in XML."
        },
        {
          "shortName": "CheckDtdRefs",
          "displayName": "Unresolved DTD reference",
          "enabled": false,
          "description": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
        },
        {
          "shortName": "CheckTagEmptyBody",
          "displayName": "Empty element content",
          "enabled": false,
          "description": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
        },
        {
          "shortName": "XmlWrongRootElement",
          "displayName": "Wrong root element",
          "enabled": false,
          "description": "Reports a root tag name different from the name specified in the `<doctype>` tag."
        },
        {
          "shortName": "XmlDuplicatedId",
          "displayName": "Duplicate 'id' attribute",
          "enabled": false,
          "description": "Reports a duplicate `id` attribute in XML."
        },
        {
          "shortName": "XmlUnboundNsPrefix",
          "displayName": "Unbound namespace prefix",
          "enabled": false,
          "description": "Reports an unbound namespace prefix in XML."
        },
        {
          "shortName": "XmlPathReference",
          "displayName": "Unresolved file reference",
          "enabled": false,
          "description": "Reports an unresolved file reference in XML."
        },
        {
          "shortName": "XmlDefaultAttributeValue",
          "displayName": "Redundant attribute with default value",
          "enabled": false,
          "description": "Reports a redundant assignment of the default value to an XML attribute."
        },
        {
          "shortName": "XmlInvalidId",
          "displayName": "Unresolved 'id' reference",
          "enabled": false,
          "description": "Reports an unresolved `id` reference in XML."
        },
        {
          "shortName": "XmlDeprecatedElement",
          "displayName": "Deprecated symbol",
          "enabled": false,
          "description": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
        },
        {
          "shortName": "XmlHighlighting",
          "displayName": "XML highlighting",
          "enabled": false,
          "description": "Reports XML validation problems in the results of a batch code inspection."
        }
      ]
    },
    {
      "name": "Unity Burst Compiler Warnings",
      "inspections": [
        {
          "shortName": "Unity.BurstAccessingManagedMethod",
          "displayName": "Accessing managed methods is not supported",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstCreatingManagedType",
          "displayName": "Creating a managed type is not supported",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstFunctionSignatureContainsManagedTypes",
          "displayName": "Function signature cannot contain managed types",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstTryNotSupported",
          "displayName": "Try statement is not supported",
          "enabled": true
        },
        {
          "shortName": "Unity.SharedStaticUnmanagedType",
          "displayName": "Shared static type parameter requires the unmanaged constraint",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstLoadingManagedType",
          "displayName": "Loading managed type is not supported",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstBoxingNotSupported",
          "displayName": "Boxing is not supported",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstWriteStaticField",
          "displayName": "Writing to a static field is not supported",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstLoadingStaticNotReadonly",
          "displayName": "Loading from a non-readonly static field is not supported",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstForeachNotSupported",
          "displayName": "The 'foreach' construction is not supported",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstTypeofExpression",
          "displayName": "Typeof is prohibited in Burst",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstSharedStaticCreate",
          "displayName": "Some SharedStatic`1.GetOrCreate overloads cause compiler errors",
          "enabled": true
        },
        {
          "shortName": "Unity.BurstDebugLogInvalidArgument",
          "displayName": "Debug logging functions accepts only strings",
          "enabled": true
        }
      ]
    },
    {
      "name": "RegExp",
      "inspections": [
        {
          "shortName": "RegExpEscapedMetaCharacter",
          "displayName": "Escaped meta character",
          "enabled": true,
          "description": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpUnnecessaryNonCapturingGroup",
          "displayName": "Unnecessary non-capturing group",
          "enabled": true,
          "description": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
        },
        {
          "shortName": "RegExpSingleCharAlternation",
          "displayName": "Single character alternation",
          "enabled": true,
          "description": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpRedundantEscape",
          "displayName": "Redundant character escape",
          "enabled": true,
          "description": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
        },
        {
          "shortName": "RegExpRedundantNestedCharacterClass",
          "displayName": "Redundant nested character class",
          "enabled": true,
          "description": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
        },
        {
          "shortName": "RegExpOctalEscape",
          "displayName": "Octal escape",
          "enabled": true,
          "description": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpDuplicateAlternationBranch",
          "displayName": "Duplicate branch in alternation",
          "enabled": true,
          "description": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
        },
        {
          "shortName": "CustomRegExpInspection",
          "displayName": "Custom RegExp inspection",
          "enabled": false,
          "description": "Custom Regex Inspection"
        },
        {
          "shortName": "RegExpUnexpectedAnchor",
          "displayName": "Begin or end anchor in unexpected position",
          "enabled": true,
          "description": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
        },
        {
          "shortName": "RegExpSimplifiable",
          "displayName": "Regular expression can be simplified",
          "enabled": false,
          "description": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
        },
        {
          "shortName": "RegExpEmptyAlternationBranch",
          "displayName": "Empty branch in alternation",
          "enabled": true,
          "description": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
        },
        {
          "shortName": "RegExpSuspiciousBackref",
          "displayName": "Suspicious back reference",
          "enabled": true,
          "description": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
        },
        {
          "shortName": "RegExpAnonymousGroup",
          "displayName": "Anonymous capturing group or numeric back reference",
          "enabled": false,
          "description": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
        },
        {
          "shortName": "RegExpRepeatedSpace",
          "displayName": "Consecutive spaces",
          "enabled": true,
          "description": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
        },
        {
          "shortName": "RegExpDuplicateCharacterInClass",
          "displayName": "Duplicate character in character class",
          "enabled": true,
          "description": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
        },
        {
          "shortName": "RegExpRedundantClassElement",
          "displayName": "Redundant '\\d', '[:digit:]', or '\\D' class elements",
          "enabled": false,
          "description": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
        }
      ]
    },
    {
      "name": "Potentially confusing code constructs",
      "inspections": [
        {
          "shortName": "NestedFunctionJS",
          "displayName": "Nested function",
          "enabled": false,
          "description": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing.\n\n\nUse the checkbox below to ignore anonymous nested functions."
        },
        {
          "shortName": "DynamicallyGeneratedCodeJS",
          "displayName": "Execution of dynamically generated code",
          "enabled": false,
          "description": "Reports a call of the `eval()`, `setTimeout()`, or `setInterval()` function or an allocation of a `Function` object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk.   \n\nIgnores the cases when a callback function is provided to these methods statically, without code generation."
        },
        {
          "shortName": "NegatedIfStatementJS",
          "displayName": "Negated 'if' statement",
          "enabled": false,
          "description": "Reports **if** statements which have an **else** branch and a negated condition. Flipping the order of the **if** and **else** branches will usually increase the clarity of such statements."
        },
        {
          "shortName": "CallerJS",
          "displayName": "Use of 'caller' property",
          "enabled": true,
          "description": "Reports a usage of the `caller` property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs."
        },
        {
          "shortName": "NestedConditionalExpressionJS",
          "displayName": "Nested conditional expression",
          "enabled": false,
          "description": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic."
        },
        {
          "shortName": "IncrementDecrementResultUsedJS",
          "displayName": "Result of increment or decrement used",
          "enabled": false,
          "description": "Reports an increment (`++`) or decrement (`--`) expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: `var a = b++`"
        },
        {
          "shortName": "ConfusingPlusesOrMinusesJS",
          "displayName": "Confusing sequence of '+' or '-'",
          "enabled": false,
          "description": "Reports a suspicious combination of `+` or `-` characters in JavaScript code (for example, `a+++b`. Such sequences are confusing, and their semantics may change through changes in the whitespace."
        },
        {
          "shortName": "OverlyComplexBooleanExpressionJS",
          "displayName": "Overly complex boolean expression",
          "enabled": false,
          "description": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
        },
        {
          "shortName": "OverlyComplexArithmeticExpressionJS",
          "displayName": "Overly complex arithmetic expression",
          "enabled": false,
          "description": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
        },
        {
          "shortName": "PointlessArithmeticExpressionJS",
          "displayName": "Pointless arithmetic expression",
          "enabled": false,
          "description": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring."
        },
        {
          "shortName": "ConfusingFloatingPointLiteralJS",
          "displayName": "Confusing floating point literal",
          "enabled": false,
          "description": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards."
        },
        {
          "shortName": "BlockStatementJS",
          "displayName": "Unnecessary block statement",
          "enabled": false,
          "description": "Reports a block statement that is not used as the body of `if`, `for`, `while`, `do`, `with`, or `try` statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for `let` and `const` variables, but still free-standing block statements may be confusing and result in subtle bugs when used with `var` variables."
        },
        {
          "shortName": "NegatedConditionalExpressionJS",
          "displayName": "Negated conditional expression",
          "enabled": false,
          "description": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: `!condition ? 2 : 1`"
        },
        {
          "shortName": "MagicNumberJS",
          "displayName": "Magic number",
          "enabled": false,
          "description": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored."
        },
        {
          "shortName": "EmptyStatementBodyJS",
          "displayName": "Statement with empty body",
          "enabled": true,
          "description": "Reports an `if`, `while`, `for`, or `with` statement with an empty body. Such statements often result from typos, and may cause confusion.\n\n\nUse the checkbox below to specify whether the statements with empty block statements as bodies\nshould be reported."
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "UnnecessaryReturnJS",
          "displayName": "Unnecessary 'return' statement",
          "enabled": true,
          "description": "Reports an unnecessary `return` statement, that is, a `return` statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed."
        },
        {
          "shortName": "IfStatementWithIdenticalBranchesJS",
          "displayName": "'if' statement with identical branches",
          "enabled": false,
          "description": "Reports an `if` statement with identical `then` and `else` branches. Such statements are almost certainly an error."
        },
        {
          "shortName": "UnnecessaryContinueJS",
          "displayName": "Unnecessary 'continue' statement",
          "enabled": true,
          "description": "Reports an unnecessary `continue` statement at the end of a loop. Suggests removing such statements."
        },
        {
          "shortName": "ConditionalExpressionWithIdenticalBranchesJS",
          "displayName": "Conditional expression with identical branches",
          "enabled": false,
          "description": "Reports a ternary conditional expression with identical `then` and `else` branches."
        },
        {
          "shortName": "SuspiciousTypeOfGuard",
          "displayName": "Unsound type guard check",
          "enabled": false,
          "description": "Reports a `typeof` or `instanceof` unsound type guard check. The `typeof x` type guard can be unsound in one of the following two cases:\n\n* `typeof x` never corresponds to the specified value (for example, `typeof x === 'number'` when `x` is of the type 'string \\| boolean')\n* `typeof x` always corresponds to the specified value (for example, `typeof x === 'string'` when `x` is of the type 'string')\n\n<br />\n\nThe `x instanceof A` type guard can be unsound in one of the following two cases:\n\n* The type of `x` is not related to `A`\n* The type of `x` is `A` or a subtype of `A`"
        },
        {
          "shortName": "LoopStatementThatDoesntLoopJS",
          "displayName": "Loop statement that doesn't loop",
          "enabled": true,
          "description": "Reports a `for`, `while`, or `do` statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error."
        },
        {
          "shortName": "TailRecursionJS",
          "displayName": "Tail recursion",
          "enabled": false,
          "description": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments."
        },
        {
          "shortName": "DuplicateConditionJS",
          "displayName": "Duplicate condition in 'if' statement",
          "enabled": false,
          "description": "Reports duplicate conditions in different branches of an `if` statement. Duplicate conditions usually represent programmer oversight.\n\nExample:\n\n\n      if (a) {\n        ...\n      } else if (a) {\n        ...\n      }\n\n"
        },
        {
          "shortName": "UnnecessaryLabelJS",
          "displayName": "Unnecessary label",
          "enabled": false,
          "description": "Reports an unused label."
        },
        {
          "shortName": "ForLoopReplaceableByWhileJS",
          "displayName": "'for' loop may be replaced by 'while' loop",
          "enabled": false,
          "description": "Reports a `for` loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler `while` statement.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nUse the checkbox below if you wish this inspection to ignore **for** loops with trivial or non-existent conditions."
        },
        {
          "shortName": "ConstantConditionalExpressionJS",
          "displayName": "Constant conditional expression",
          "enabled": false,
          "description": "Reports a conditional expression in the format `true? result1: result2` or `false? result1: result2``.\nSuggests simplifying the expression.\n`"
        },
        {
          "shortName": "JSObjectNullOrUndefined",
          "displayName": "Object is 'null' or 'undefined'",
          "enabled": true,
          "description": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is `undefined` or `null`."
        },
        {
          "shortName": "TrivialIfJS",
          "displayName": "Redundant 'if' statement",
          "enabled": false,
          "description": "Reports an `if` statement that can be simplified to a single assignment or a `return` statement.\n\nExample:\n\n\n    if(foo())\n     {\n      return true;\n     }\n     else\n     {\n       return false;\n     }\n\nAfter applying the quick-fix the code looks as follows:\n\n     return foo();\n"
        },
        {
          "shortName": "TrivialConditionalJS",
          "displayName": "Redundant conditional expression",
          "enabled": false,
          "description": "Reports a conditional expression of the form\n\n\n    condition ? true : false\n    condition ? false : true\n\n\nThese expressions may be safely converted to\n\n\n    condition\n    !condition\n"
        },
        {
          "shortName": "IfStatementWithTooManyBranchesJS",
          "displayName": "'if' statement with too many branches",
          "enabled": false,
          "description": "Reports an `if` statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction.\n\n\nUse the field below to specify the maximum number of branches expected."
        },
        {
          "shortName": "PointlessBooleanExpressionJS",
          "displayName": "Pointless statement or boolean expression",
          "enabled": false,
          "description": "Reports a pointless or pointlessly complicated boolean expression or statement.\n\nExample:\n\n\n      let a = !(false && x);\n      let b = false || x;\n\nAfter the quick fix is applied the result looks like:\n\n\n      let a = true;\n      let b = x;\n"
        },
        {
          "shortName": "UnnecessaryLabelOnContinueStatementJS",
          "displayName": "Unnecessary label on 'continue' statement",
          "enabled": false,
          "description": "Reports a labeled `continue` statement whose labels may be removed without changing the flow of control."
        },
        {
          "shortName": "UnnecessaryLabelOnBreakStatementJS",
          "displayName": "Unnecessary label on 'break' statement",
          "enabled": false,
          "description": "Reports a labeled `break` statement whose labels may be removed without changing the flow of control."
        },
        {
          "shortName": "UnreachableCodeJS",
          "displayName": "Unreachable code",
          "enabled": false,
          "description": "Reports code that can never be executed, which almost certainly indicates an error"
        }
      ]
    },
    {
      "name": "Code quality tools",
      "inspections": [
        {
          "shortName": "StandardJS",
          "displayName": "Standard code style",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [JavaScript Standard Style](https://standardjs.com/) linter.   \n\nThe highlighting severity in the editor is based on the severity level the linter reports."
        },
        {
          "shortName": "JSHint",
          "displayName": "JSHint",
          "enabled": false,
          "description": "Reports a problem detected by the [JSHint](https://jshint.com/) linter."
        },
        {
          "shortName": "Eslint",
          "displayName": "ESLint",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [ESLint](https://eslint.org) linter.   \n\nThe highlighting is based on the rule severity specified in the [ESLint configuration file](https://eslint.org/docs/user-guide/configuring) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules."
        },
        {
          "shortName": "TsLint",
          "displayName": "TSLint",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [TSLint](https://github.com/palantir/tslint) linter.   \n\nThe highlighting is based on the rule severity specified in the [TSLint configuration file](https://palantir.github.io/tslint/usage/configuration/) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules."
        },
        {
          "shortName": "Stylelint",
          "displayName": "Stylelint",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [Stylelint](http://stylelint.io) linter.   \n\nThe highlighting is based on the rule severity specified in the [Stylelint configuration file](https://stylelint.io/user-guide/configure) for each individual rule."
        },
        {
          "shortName": "W3CssValidation",
          "displayName": "W3C CSS validator",
          "enabled": false,
          "description": "Reports a discrepancy detected by the [W3C CSS Validator](https://jigsaw.w3.org/css-validator/)."
        }
      ]
    },
    {
      "name": "Pug/Jade",
      "inspections": [
        {
          "shortName": "JadeTabsAndSpaces",
          "displayName": "Tabs and spaces both used",
          "enabled": false,
          "description": "Reports use of spaces and tabs for indentation in a Pug file."
        }
      ]
    },
    {
      "name": "Function metrics",
      "inspections": [
        {
          "shortName": "FunctionWithMultipleReturnPointsJS",
          "displayName": "Function with multiple return points",
          "enabled": false,
          "description": "Reports a function with multiple return points. Such functions are hard to understand and maintain."
        },
        {
          "shortName": "ParametersPerFunctionJS",
          "displayName": "Function with too many parameters",
          "enabled": false,
          "description": "Reports a function with too many parameters. Such functions often indicate problems with design.\n\n\nUse the field below to specify the maximum acceptable number of parameters for a function."
        },
        {
          "shortName": "FunctionWithMultipleLoopsJS",
          "displayName": "Function with multiple loops",
          "enabled": false,
          "description": "Reports a function with multiple loop statements."
        },
        {
          "shortName": "CyclomaticComplexityJS",
          "displayName": "Overly complex function",
          "enabled": false,
          "description": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test.\n\n\nUse the field provided below to specify the maximum acceptable cyclomatic complexity for a function."
        },
        {
          "shortName": "ThreeNegationsPerFunctionJS",
          "displayName": "Function with more than three negations",
          "enabled": false,
          "description": "Reports a function with three or more negation operations (`!` or `!=`). Such functions may be unnecessarily confusing."
        },
        {
          "shortName": "StatementsPerFunctionJS",
          "displayName": "Overly long function",
          "enabled": false,
          "description": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test.\n\n\nUse the field below to specify the maximum acceptable number of statements in a function."
        },
        {
          "shortName": "NestingDepthJS",
          "displayName": "Overly nested function",
          "enabled": false,
          "description": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary.\n\n\nUse the field provided below to specify the maximum acceptable nesting depth allowed in a function."
        }
      ]
    },
    {
      "name": "JSON and JSON5",
      "inspections": [
        {
          "shortName": "JsonPathUnknownFunction",
          "displayName": "Unknown JSONPath function",
          "enabled": false,
          "description": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
        },
        {
          "shortName": "JsonSchemaCompliance",
          "displayName": "Compliance with JSON schema",
          "enabled": false,
          "description": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
        },
        {
          "shortName": "JsonPathUnknownOperator",
          "displayName": "Unknown JSONPath operator",
          "enabled": false,
          "description": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
        },
        {
          "shortName": "JsonSchemaDeprecation",
          "displayName": "Deprecated JSON property",
          "enabled": false,
          "description": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
        },
        {
          "shortName": "JsonPathEvaluateUnknownKey",
          "displayName": "Unknown property key used for JSONPath evaluate expression",
          "enabled": false,
          "description": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
        },
        {
          "shortName": "JsonStandardCompliance",
          "displayName": "Compliance with JSON standard",
          "enabled": false,
          "description": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
        },
        {
          "shortName": "JsonSchemaRefReference",
          "displayName": "Unresolved '$ref' and '$schema' references",
          "enabled": false,
          "description": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
        },
        {
          "shortName": "Json5StandardCompliance",
          "displayName": "Compliance with JSON5 standard",
          "enabled": false,
          "description": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
        },
        {
          "shortName": "JsonDuplicatePropertyKeys",
          "displayName": "Duplicate keys in object literals",
          "enabled": false,
          "description": "Reports a duplicate key in an object literal."
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "JSRemoveUnnecessaryParentheses",
          "displayName": "Unnecessary parentheses",
          "enabled": true,
          "description": "Reports redundant parentheses.\n\nIn expressions:\n`var x = ((1) + 2) + 3`\n\nIn arrow function argument lists:\n`var incrementer = (x) => x + 1`\n\nIn TypeScript and Flow type declarations:\n`type Card = (Suit & Rank) | (Suit & Number)`"
        },
        {
          "shortName": "JSDeclarationsAtScopeStart",
          "displayName": "'var' declared not at the beginning of a function",
          "enabled": false,
          "description": "Checks that declarations of local variables declared with **var** are at the top of a function scope.   \n\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code."
        },
        {
          "shortName": "ChainedFunctionCallJS",
          "displayName": "Chained function call",
          "enabled": false,
          "description": "Reports a function call whose target is another function call, for example, `foo().bar()`"
        },
        {
          "shortName": "ConstantOnLHSOfComparisonJS",
          "displayName": "Constant on left side of comparison",
          "enabled": false,
          "description": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons."
        },
        {
          "shortName": "NonBlockStatementBodyJS",
          "displayName": "Statement body without braces",
          "enabled": false,
          "description": "Reports a `if`, `while`, `for`, or `with` statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance."
        },
        {
          "shortName": "ConstantOnRHSOfComparisonJS",
          "displayName": "Constant on right side of comparison",
          "enabled": false,
          "description": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons."
        },
        {
          "shortName": "UnterminatedStatementJS",
          "displayName": "Unterminated statement",
          "enabled": false,
          "description": "Reports a statement without a semicolon or a newline at the end.\n\nSelect the 'Terminate statements with semicolons' option in *Editor \\| Code Style \\| JavaScript or TypeScript - Punctuation* to report any statement that doesn't end with a semicolon, even if a newline is used.\nAccording to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages."
        },
        {
          "shortName": "NestedFunctionCallJS",
          "displayName": "Nested function call",
          "enabled": false,
          "description": "Reports a function call that is used as an argument in another function call, for example, `foo(bar())`"
        },
        {
          "shortName": "ChainedEqualityJS",
          "displayName": "Chained equality",
          "enabled": false,
          "description": "Reports a chained equality comparison (i.e. `a==b==c`). Such comparisons are confusing."
        },
        {
          "shortName": "JSArrowFunctionBracesCanBeRemoved",
          "displayName": "Redundant braces around arrow function body",
          "enabled": true,
          "description": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces.\n\n\n`\nlet incrementer = (x) => {return x + 1};\n`\n\nAfter the quick-fix is applied, the code fragment looks as follows:\n\n\n`\nlet incrementer = (x) => x + 1;\n`"
        },
        {
          "shortName": "JSUndefinedPropertyAssignment",
          "displayName": "Undefined property assignment",
          "enabled": true,
          "description": "Reports an assignment to a property that is not defined in the type of a variable.\n\nExample:\n\n\n    /**\n     * @type {{ property1: string, property2: number }}\n     */\n    let myVariable = create();\n\n    myVariable.newProperty = 3; // bad\n"
        },
        {
          "shortName": "CssMissingSemicolon",
          "displayName": "Missing semicolon",
          "enabled": false,
          "description": "Reports a missing semicolon at the end of a declaration."
        },
        {
          "shortName": "CssRedundantUnit",
          "displayName": "Redundant measure unit",
          "enabled": false,
          "description": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
        }
      ]
    },
    {
      "name": "Constraints Violations",
      "inspections": [
        {
          "shortName": "AssignNullToNotNullAttribute",
          "displayName": "Possible 'null' assignment to non-nullable entity",
          "enabled": true
        },
        {
          "shortName": "NotNullOrRequiredMemberIsNotInitialized",
          "displayName": "Non-nullable or required member is not initialized at constructor exit",
          "enabled": true
        },
        {
          "shortName": "ContractAnnotationNotParsed",
          "displayName": "Problem in contract annotation definition",
          "enabled": true
        },
        {
          "shortName": "RequiredBaseTypesConflict",
          "displayName": "Required base type conflicting another type",
          "enabled": true
        },
        {
          "shortName": "UnsupportedRequiredBaseType",
          "displayName": "BaseTypeRequired attribute supports only classes and interfaces",
          "enabled": true
        },
        {
          "shortName": "RequiredBaseTypesIsNotInherited",
          "displayName": "Base type is required",
          "enabled": true
        },
        {
          "shortName": "CppInconsistentNaming",
          "displayName": "Inconsistent Naming",
          "enabled": false
        },
        {
          "shortName": "RequiredBaseTypesDirectConflict",
          "displayName": "Type specified in '[BaseTypeRequired]' attribute conflicts another type",
          "enabled": true
        },
        {
          "shortName": "InconsistentNaming",
          "displayName": "Inconsistent Naming",
          "enabled": false
        },
        {
          "shortName": "Xaml.AssignNullToNotNullAttribute",
          "displayName": "Possible 'null' assignment to non-nullable entity",
          "enabled": true
        },
        {
          "shortName": "CheckNamespace",
          "displayName": "Namespace does not correspond to file location",
          "enabled": true
        },
        {
          "shortName": "CannotApplyEqualityOperatorToType",
          "displayName": "Compare with '==' types marked by 'CannotApplyEqualityOperatorAttribute'",
          "enabled": true
        },
        {
          "shortName": "ValueRangeAttributeViolation",
          "displayName": "Possible violation of 'ValueRange'/'NonNegativeValue' attribute",
          "enabled": true
        }
      ]
    },
    {
      "name": "Accessibility",
      "inspections": [
        {
          "shortName": "HtmlRequiredSummaryAttribute",
          "displayName": "Missing required 'summary' attribute",
          "enabled": false,
          "description": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
        },
        {
          "shortName": "HtmlRequiredTitleAttribute",
          "displayName": "Missing required 'title' attribute",
          "enabled": false,
          "description": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
        },
        {
          "shortName": "HtmlRequiredAltAttribute",
          "displayName": "Missing required 'alt' attribute",
          "enabled": false,
          "description": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
        },
        {
          "shortName": "HtmlFormInputWithoutLabel",
          "displayName": "Missing associated label",
          "enabled": false,
          "description": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
        },
        {
          "shortName": "HtmlRequiredTitleElement",
          "displayName": "Missing required 'title' element",
          "enabled": false,
          "description": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
        },
        {
          "shortName": "HtmlRequiredLangAttribute",
          "displayName": "Missing required 'lang' attribute",
          "enabled": false,
          "description": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
        }
      ]
    },
    {
      "name": "XPath",
      "inspections": [
        {
          "shortName": "RedundantTypeConversion",
          "displayName": "Redundant type conversion",
          "enabled": false,
          "description": "Reports unnecessary type conversions. Type conversions are unnecessary when the argument type of a `string()`, `number()`, or `boolean()` function is already the same as the function's return type or if the expected expression type is `any`. Suggests removing the unnecessary conversion."
        },
        {
          "shortName": "CheckNodeTest",
          "displayName": "Unknown element or attribute name",
          "enabled": false,
          "description": "Reports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not defined in the referenced schemas. Such names are often the result of typos and would otherwise probably only be discovered at runtime.\n\n**Example:**\n\n\n      <xsl:template match=\"h:txtarea\" />\n\n\nIf the `h` is bound to the XHTML namespace, the inspection will report this part of the `match` expression as an\nunknown element name because the correct name of the element is \"textarea\"."
        },
        {
          "shortName": "HardwiredNamespacePrefix",
          "displayName": "Hardcoded namespace prefix",
          "enabled": false,
          "description": "Reports comparisons of the `name()` function with a string that contains a colon (`:`). Such usages usually indicate a hardcoded namespace prefix in the comparison. As a result, the code will break when run against XML that uses another prefix for the same namespace.\n\n**Example:**\n\n\n      <xsl:if test=\"name() = 'xlink:href'\">...<xsl:if>\n"
        },
        {
          "shortName": "ImplicitTypeConversion",
          "displayName": "Implicit type conversion",
          "enabled": false,
          "description": "Reports implicit conversions between the predefined XPath-types `STRING`, `NUMBER`, `BOOLEAN`, and `NODESET`. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs:\n\n**Example:**\n\n\n      <xsl:if test=\"foo\" />\n\nis not the same as\n\n\n      <xsl:if test=\"string(foo)\" />\n\n\nThe first test checks whether the element \"foo\" exists (`count(foo) > 0)`; the latter one however is only\ntrue if the element actually contains any text (`string-length(foo) > 0`). Suggests making\nthe type conversion more explicit.\n\n\nUse the following options to configure the inspection:\n\n* Enable or disable implicit conversions between certain types\n* Always report explicit conversions that do not result in the actually expected type, for example, `<xsl:if test=\"number(foo)\" />`\n* Ignore conversion from `NODESET` to `BOOLEAN` by using the `string()` function as a shortcut for writing `string-length() > 0`."
        },
        {
          "shortName": "IndexZeroUsage",
          "displayName": "XPath predicate with index 0",
          "enabled": false,
          "description": "Reports usages of `0` in a predicate index or in a comparison with the function `position()`. Such usage is almost always a bug because in XPath, the index starts at `1`, *not* at `0`.\n\n**Example:**\n\n\n      //someelement[position() = 0] or //something[0]\n"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "ES6BindWithArrowFunction",
          "displayName": "Suspicious usage of 'bind' with arrow function",
          "enabled": false,
          "description": "Reports `bind` used together with an arrow function.  \nBecause arrow functions use lexical `this`, a `bind` call will have no effect on them.  \nSee [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this) for details."
        },
        {
          "shortName": "JSConsecutiveCommasInArrayLiteral",
          "displayName": "Consecutive commas in array literal",
          "enabled": true,
          "description": "Reports a consecutive comma in an array literal. The skipped element accepts the `undefined` value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one."
        },
        {
          "shortName": "JSPotentiallyInvalidUsageOfClassThis",
          "displayName": "Potentially invalid reference to 'this' of a class from closure",
          "enabled": true,
          "description": "Reports an attempt to reference a member of an ECMAScript class via the `this.` qualifier in a nested function that is not a lambda.  \n`this` in a nested function that is not a lambda is the function's own `this` and doesn't relate to the outer class."
        },
        {
          "shortName": "JSPotentiallyInvalidUsageOfThis",
          "displayName": "Potentially invalid reference to 'this' from closure",
          "enabled": true,
          "description": "Reports a `this` in closure that is used for referencing properties of outer context.\n\nExample:\n\n\n    function Outer() {\n      this.outerProp = 1;\n      function inner() {\n        // bad, because 'outerProp' of Outer\n        // won't be updated here\n        // on calling 'new Outer()' as may be expected\n        this.outerProp = 2;\n      }\n      inner();\n    }\n"
        },
        {
          "shortName": "JSIncompatibleTypesComparison",
          "displayName": "Comparison of expressions having incompatible types",
          "enabled": true,
          "description": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values."
        },
        {
          "shortName": "JSSuspiciousNameCombination",
          "displayName": "Suspicious variable/parameter name combination",
          "enabled": true,
          "description": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample:\n\n\n      var x = 0;\n      var y = x;\n\nor\n\n\n      var x = 0, y = 0;\n      var rc = new Rectangle(y, x, 20, 20);\n\nSpecify the names that should not be used together. An error is reported\nif a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\nvariable contains words from another group."
        },
        {
          "shortName": "ObjectAllocationIgnoredJS",
          "displayName": "Result of object allocation ignored",
          "enabled": false,
          "description": "Reports object allocation where the result of the allocated object is ignored, for example, `new Error();` as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy."
        },
        {
          "shortName": "JSSuspiciousEqPlus",
          "displayName": "Suspicious '=+' assignment",
          "enabled": true,
          "description": "Reports an assignment in the form `a =+ b`. Suggests replacing with `a += b`."
        },
        {
          "shortName": "InfiniteRecursionJS",
          "displayName": "Infinite recursion",
          "enabled": false,
          "description": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally."
        },
        {
          "shortName": "ForLoopThatDoesntUseLoopVariableJS",
          "displayName": "'for' loop where update or condition does not use loop variable",
          "enabled": false,
          "description": "Reports a `for` loop where the condition or update does not use the `for` loop variable."
        },
        {
          "shortName": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
          "displayName": "Possibly incorrect target of indexed property access",
          "enabled": true,
          "description": "Reports a potentially invalid indexed property access, for example, `Array[1]`."
        },
        {
          "shortName": "JSTypeOfValues",
          "displayName": "'typeof' comparison with non-standard value",
          "enabled": true,
          "description": "Reports a comparison of a `typeof` expression with a literal string which is not one of the standard types: `undefined`, `object`, `boolean`, `number`, `string`, `function`, or `symbol`. Such comparisons always return `false`."
        },
        {
          "shortName": "JSEqualityComparisonWithCoercion",
          "displayName": "Equality operator may cause type coercion",
          "enabled": true,
          "description": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing `==` and `!=` with type-safe equality operators `===` and `!==`.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
        },
        {
          "shortName": "DivideByZeroJS",
          "displayName": "Division by zero",
          "enabled": false,
          "description": "Reports division by zero or a remainder by zero."
        },
        {
          "shortName": "JSComparisonWithNaN",
          "displayName": "Comparison with NaN",
          "enabled": true,
          "description": "Reports a comparison with NaN. Comparisons like `expr == NaN` or `expr === NaN` are always evaluated to `false`."
        },
        {
          "shortName": "JSConstructorReturnsPrimitive",
          "displayName": "Constructor returns primitive value",
          "enabled": false,
          "description": "Reports a constructor function that returns a primitive value. When called with `new`, this value will be lost and an object will be returned instead. To avoid warnings, use the `@return` tag to specify the return of the function."
        },
        {
          "shortName": "JSVoidFunctionReturnValueUsed",
          "displayName": "Void function return value used",
          "enabled": true,
          "description": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an `undefined` value and such assignment may indicate an error.\n\nExample:\n\n\n    let a = console.log('foo');\n\n<br />\n\nThe following usages are ignored:\n\n* Inside a return statement\n* In some binary operations\n* For overridden non-void functions"
        },
        {
          "shortName": "JSPotentiallyInvalidConstructorUsage",
          "displayName": "Potentially invalid constructor usage",
          "enabled": true,
          "description": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after `new`, using a constructor's prototype or calling a constructor without `new`. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc `@constructor` tag."
        },
        {
          "shortName": "InfiniteLoopJS",
          "displayName": "Infinite loop statement",
          "enabled": false,
          "description": "Reports a `for`, `while`, or `do` statement which can only exit by throwing an exception. Such statements often indicate coding errors."
        },
        {
          "shortName": "CssMissingComma",
          "displayName": "Missing comma in selector list",
          "enabled": false,
          "description": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
        },
        {
          "shortName": "CssNonIntegerLengthInPixels",
          "displayName": "Non-integer length in pixels",
          "enabled": false,
          "description": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
        },
        {
          "shortName": "CssNoGenericFontName",
          "displayName": "Missing generic font family name",
          "enabled": false,
          "description": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
        }
      ]
    },
    {
      "name": "Vue",
      "inspections": [
        {
          "shortName": "VueMissingComponentImportInspection",
          "displayName": "Missing component import",
          "enabled": true,
          "description": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import."
        },
        {
          "shortName": "VueDeprecatedSymbol",
          "displayName": "Deprecated symbol",
          "enabled": false,
          "description": "Reports a deprecated Vue symbol."
        },
        {
          "shortName": "VueUnrecognizedDirective",
          "displayName": "Unrecognized directive",
          "enabled": false,
          "description": "Reports an unrecognized Vue directive."
        },
        {
          "shortName": "VueDuplicateTag",
          "displayName": "Duplicate template/script tag",
          "enabled": true,
          "description": "Reports multiple usages of the `template` or `script` tag in a Vue file.\n\n[Vue Component specification](https://vue-loader.vuejs.org/spec.html) indicates that each `*.vue` file can contain at most one `template` or `script` block at a time."
        },
        {
          "shortName": "VueDataFunction",
          "displayName": "Data function",
          "enabled": true,
          "description": "Reports a Vue component [data](https://vuejs.org/v2/api/#data) property that is not a function. Suggests wrapping an object literal with a function.\n\nWhen defining a component, `data` must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for `data`, that very object will be shared by reference across all instances created! With a `data` function, every time a new instance is created we can simply call it to return a fresh copy of the initial data."
        },
        {
          "shortName": "VueUnrecognizedSlot",
          "displayName": "Unrecognized slot",
          "enabled": false,
          "description": "Reports an unrecognized Vue slot."
        }
      ]
    },
    {
      "name": "MongoJS",
      "inspections": [
        {
          "shortName": "MongoJSResolveInspection",
          "displayName": "Resolution problems",
          "enabled": false,
          "description": "Reports unresolved references in MongoDB and JavaScript code.\n\nExample:\n\n    db\n    use foo\n      -- a reference to a non-existing collection\n    db.non_existing_collection\n    db['non_existing_collection']\n    db['non_existing_collection'].find().hasNext()\n\nThe `non_existing_collection` collection does not exist in the database and will be reported."
        },
        {
          "shortName": "MongoJSExtDeprecationInspection",
          "displayName": "Deprecated element",
          "enabled": false,
          "description": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n\n      db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n\n      db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSDeprecationInspection",
          "displayName": "Deprecated element",
          "enabled": false,
          "description": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n    db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n    db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSExtSideEffectsInspection",
          "displayName": "Statement with side effects",
          "enabled": false,
          "description": "Reports statements that may cause side effects while the data source is in read-only mode.\n\nThe quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
        },
        {
          "shortName": "MongoJSExtResolveInspection",
          "displayName": "Resolution problems",
          "enabled": false,
          "description": "Reports unresolved references in MongoDB and JavaScript code."
        }
      ]
    },
    {
      "name": "Spelling Issues",
      "inspections": [
        {
          "shortName": "MarkupAttributeTypo",
          "displayName": "Typo in markup attribute value",
          "enabled": false
        },
        {
          "shortName": "MarkupTextTypo",
          "displayName": "Typo in markup text",
          "enabled": false
        },
        {
          "shortName": "CommentTypo",
          "displayName": "Typo in comment",
          "enabled": false
        },
        {
          "shortName": "StringLiteralTypo",
          "displayName": "Typo in string literal",
          "enabled": false
        },
        {
          "shortName": "IdentifierTypo",
          "displayName": "Typo in identifier",
          "enabled": false
        }
      ]
    },
    {
      "name": "Try statement issues",
      "inspections": [
        {
          "shortName": "UnusedCatchParameterJS",
          "displayName": "Unused 'catch' parameter",
          "enabled": false,
          "description": "Reports a `catch` parameter that is not used in the corresponding block. The `catch` parameters named `ignore` or `ignored` are ignored.\n\n\nUse the checkbox below to disable this inspection for `catch`\nblocks with comments."
        },
        {
          "shortName": "EmptyCatchBlockJS",
          "displayName": "Empty 'catch' block",
          "enabled": false,
          "description": "Reports an empty `catch` block. This indicates that errors are simply ignored instead of handling them.   \n\nAny comment in a `catch` block mutes the inspection."
        },
        {
          "shortName": "ThrowFromFinallyBlockJS",
          "displayName": "'throw' inside 'finally' block",
          "enabled": false,
          "description": "Reports s `throw` statement inside a `finally` block. Such `throw` statements may mask exceptions thrown, and complicate debugging."
        },
        {
          "shortName": "ExceptionCaughtLocallyJS",
          "displayName": "Exception used for local control-flow",
          "enabled": false,
          "description": "Reports a `throw` statement whose exceptions are always caught by the containing `try` statement. Using `throw` statements as a `goto` to change the local flow of control is confusing."
        },
        {
          "shortName": "ContinueOrBreakFromFinallyBlockJS",
          "displayName": "'continue' or 'break' inside 'finally' block",
          "enabled": false,
          "description": "Reports a `break` or `continue` statement inside a `finally` block. Such statements are very confusing, may hide exceptions, and complicate debugging."
        },
        {
          "shortName": "EmptyFinallyBlockJS",
          "displayName": "Empty 'finally' block",
          "enabled": false,
          "description": "Reports an empty `finally` block, which usually indicates an error."
        },
        {
          "shortName": "EmptyTryBlockJS",
          "displayName": "Empty 'try' block",
          "enabled": false,
          "description": "Reports an empty `try` block, which usually indicates an error."
        },
        {
          "shortName": "ReturnFromFinallyBlockJS",
          "displayName": "'return' inside 'finally' block",
          "enabled": false,
          "description": "Reports a `return` statement inside a `finally` block. Such `return` statements may mask exceptions thrown, and complicate debugging."
        }
      ]
    },
    {
      "name": "SQL server",
      "inspections": [
        {
          "shortName": "MsBuiltinInspection",
          "displayName": "Builtin functions",
          "enabled": false,
          "description": "Reports truncations of string arguments in ISNULL functions.\n\nThe ISNULL syntax is `ISNULL(check_expression, replacement_value)`.\n\nAccording to [ISNULL at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql), `replacement_value` will be truncated if `replacement_value` is longer than\n`check_expression`.\n\nExample (Microsoft SQL Server):\n\n    DECLARE @name1 VARCHAR(2) = NULL;\n    DECLARE @name2 VARCHAR(10) = 'Example';\n    DECLARE @name3 VARCHAR(2) = 'Hi';\n\n      -- `@name2` is VARCHAR(10) and will be truncated\n    SELECT ISNULL(@name1, @name2);\n\n      -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\n    SELECT ISNULL(@name1, @name3);\n"
        },
        {
          "shortName": "MsOrderByInspection",
          "displayName": "ORDER BY in queries",
          "enabled": false,
          "description": "Reports usages when the `ORDER BY` clause is used without `TOP`, `OFFSET`, or `FOR XML` in views, inline functions, derived tables, subqueries, and common table expressions.\n\nFor more information about usages of `ORDER BY`, see [SELECT - ORDER BY Clause (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql).\n\nExample (Microsoft SQL server):\n\n    CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89\n    ORDER BY b) ALIAS;\n\nIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\nAlternatively, use the **Delete element** quick-fix to delete the ORDER BY section.\n\nAfter the quick-fix is applied:\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89) ALIAS;\n"
        }
      ]
    },
    {
      "name": "Async code and promises",
      "inspections": [
        {
          "shortName": "ES6TopLevelAwaitExpression",
          "displayName": "Top-level 'await' expression",
          "enabled": false,
          "description": "Reports a usage of a top-level `await` expression. While the new 'top-level async' proposal is on its way, using `await` outside async functions is not allowed."
        },
        {
          "shortName": "ES6RedundantAwait",
          "displayName": "Redundant 'await' expression",
          "enabled": false,
          "description": "Reports a redundant usage of `await`, such as `await await`, or awaiting a non-promise result.\n\n\nWhen the 'Report for promises' option is selected, suggests removing `await` before promises when applicable\n(in `return` statements, and with `Promise.resolve/reject`).\n\nRemoving `await` in such contexts causes two problems.\n\n* Surrounding your code with `try-catch` and forgetting to add `await` will change code semantics while you may fail to notice that.\n* Having an explicit `await` may prevent the V8 runtime from providing [async stack traces](http://bit.ly/v8-zero-cost-async-stack-traces)."
        },
        {
          "shortName": "ES6PossiblyAsyncFunction",
          "displayName": "'await' in non-async function",
          "enabled": false,
          "description": "Reports a usage of `await` in a function that was possibly intended to be async but is actually missing the `async` modifier. Although `await` can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made `async`."
        },
        {
          "shortName": "ES6MissingAwait",
          "displayName": "Missing await for an async function call",
          "enabled": false,
          "description": "Reports an `async` function call without an expected `await` prefix inside an `async` function. Such call returns a `Promise` and control flow is continued immediately.\n\nExample:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        bar(); // bad\n    }\n\n\nAfter the quick-fix is applied, the `await` prefix is added:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        await bar(); // good\n    }\n\n<br />\n\nWhen the 'Report for promises in return statements' checkbox is selected, also suggests adding `await` in return statements.  \nWhile this is generally not necessary, it gives two main benefits.  \n\n* You won't forget to add `await` when surrounding your code with `try-catch`.\n* An explicit `await` helps V8 runtime to provide [async stack traces](https://bit.ly/v8-zero-cost-async-stack-traces)."
        },
        {
          "shortName": "JSIgnoredPromiseFromCall",
          "displayName": "Result of method call returning a promise is ignored",
          "enabled": true,
          "description": "Reports a function call that returns a `Promise` that is not used later. Such calls are usually unintended and indicate an error."
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "ParameterNamingConventionJS",
          "displayName": "Function parameter naming convention",
          "enabled": false,
          "description": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length and regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
        },
        {
          "shortName": "JSNonASCIINames",
          "displayName": "Identifiers with non-ASCII symbols",
          "enabled": true,
          "description": "Reports a non-ASCII symbol in a name.  \n\nIf the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.  \nOtherwise reports all names that contain both ASCII and non-ASCII symbols."
        },
        {
          "shortName": "FunctionNamingConventionJS",
          "displayName": "Function naming convention",
          "enabled": false,
          "description": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard `java.util.regex` format for regular expressions."
        },
        {
          "shortName": "JSClassNamingConvention",
          "displayName": "Class naming convention",
          "enabled": false,
          "description": "Reports a class or a function that is annotated with a JSDoc `@constructor` or `@class` tag whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for classes names. Use the standard `java.util.regex` format for regular expressions."
        },
        {
          "shortName": "LocalVariableNamingConventionJS",
          "displayName": "Local variable naming convention",
          "enabled": false,
          "description": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "AssignmentToFunctionParameterJS",
          "displayName": "Assignment to function parameter",
          "enabled": false,
          "description": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
        },
        {
          "shortName": "JSAssignmentUsedAsCondition",
          "displayName": "Assignment used as condition",
          "enabled": true,
          "description": "Reports an assignment that is used as the condition of an `if`, `while`, `for`, or `do` statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, `=` instead of `==`)."
        },
        {
          "shortName": "AssignmentResultUsedJS",
          "displayName": "Result of assignment used",
          "enabled": false,
          "description": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, `=` instead of `==`. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways.\n\nExpressions in parentheses are ignored."
        },
        {
          "shortName": "SillyAssignmentJS",
          "displayName": "Variable is assigned to itself",
          "enabled": false,
          "description": "Reports an assignment in the form `x = x`."
        },
        {
          "shortName": "ReplaceAssignmentWithOperatorAssignmentJS",
          "displayName": "Assignment could be replaced with operator assignment",
          "enabled": false,
          "description": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\n\nExample:\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied the result looks like:\n\n      x += 3;\n      x /= 3;\n"
        },
        {
          "shortName": "NestedAssignmentJS",
          "displayName": "Nested assignment",
          "enabled": false,
          "description": "Reports an assignment expression nested inside another expression, for example, `a = b = 1`. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing."
        },
        {
          "shortName": "AssignmentToForLoopParameterJS",
          "displayName": "Assignment to 'for' loop parameter",
          "enabled": false,
          "description": "Reports an assignment to a variable declared as a `for` loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
        }
      ]
    },
    {
      "name": "Switch statement issues",
      "inspections": [
        {
          "shortName": "FallThroughInSwitchStatementJS",
          "displayName": "Fallthrough in 'switch' statement",
          "enabled": true,
          "description": "Reports a `switch` statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing `break` or `return`."
        },
        {
          "shortName": "JSSwitchVariableDeclarationIssue",
          "displayName": "Variable is declared and being used in different 'case' clauses",
          "enabled": true,
          "description": "Reports a variable that is declared in one `case` clause of a `switch` statement but is used in another `case` clause of the same statement. For block-scoped variables, this results in throwing a `ReferenceError`. For `var` variables, it indicates a potential error.\n\nDisable the inspection for `var` variables if this pattern is used intentionally."
        },
        {
          "shortName": "JSMissingSwitchDefault",
          "displayName": "'switch' statement has no 'default' branch",
          "enabled": true,
          "description": "Reports a `switch` statement without a `default` clause when some possible values are not enumerated."
        },
        {
          "shortName": "DefaultNotLastCaseInSwitchJS",
          "displayName": "'default' not last case in 'switch'",
          "enabled": false,
          "description": "Reports a `switch` statement where the `default` case comes before another case instead of being the very last case, which may cause confusion."
        },
        {
          "shortName": "JSUnreachableSwitchBranches",
          "displayName": "Unreachable 'case' branch of a 'switch' statement",
          "enabled": true,
          "description": "Reports an unreachable `case` branch of a `switch` statement.\n\nExample:\n\n\n    /**\n     * @param {('foo' | 'bar')} p\n     */\n    function foo(p) {\n        switch (p) {\n            case 'foo': break;\n            case 'bar': break;\n            case 'baz': break; // unreachable\n        }\n    }\n"
        },
        {
          "shortName": "JSDuplicateCaseLabel",
          "displayName": "Duplicate 'case' label",
          "enabled": true,
          "description": "Reports a duplicated `case` label on a `switch` statement, which normally indicates an error."
        },
        {
          "shortName": "JSRedundantSwitchStatement",
          "displayName": "'switch' statement is redundant and can be replaced",
          "enabled": true,
          "description": "Reports a `switch` statement with an empty body, or with only one `case` branch, or with a `default` branch only."
        },
        {
          "shortName": "TextLabelInSwitchStatementJS",
          "displayName": "Text label in 'switch' statement",
          "enabled": false,
          "description": "Reports a labeled statement inside a `switch` statement, which often results from a typo.\n\nExample:\n\n\n        switch(x)\n        {\n            case 1:\n            case2:   //typo!\n            case 3:\n                break;\n        }\n"
        },
        {
          "shortName": "NestedSwitchStatementJS",
          "displayName": "Nested 'switch' statement",
          "enabled": false,
          "description": "Reports a `switch` statement that is nested in another `switch` statement. Nested `switch` statements may be very confusing, particularly if indenting is inconsistent."
        },
        {
          "shortName": "JSMissingSwitchBranches",
          "displayName": "'switch' statement has missing branches",
          "enabled": true,
          "description": "Reports a `switch` statement on a variable of the type `enum` or `union` when the statement doesn't cover some value options from the type."
        }
      ]
    },
    {
      "name": "Shell script",
      "inspections": [
        {
          "shortName": "ShellCheck",
          "displayName": "ShellCheck",
          "enabled": false,
          "description": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool."
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "ReuseOfLocalVariableJS",
          "displayName": "Reuse of local variable",
          "enabled": false,
          "description": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity."
        },
        {
          "shortName": "UnnecessaryLocalVariableJS",
          "displayName": "Redundant local variable",
          "enabled": false,
          "description": "Reports an unnecessary local variable that does not make a function more comprehensible:\n\n* a local variable that is immediately returned\n* a local variable that is immediately assigned to another variable and is not used anymore\n* a local variable that always has the same value as another local variable or parameter.\n\n\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging."
        }
      ]
    },
    {
      "name": "UnrealHeaderTool",
      "inspections": [
        {
          "shortName": "UnrealHeaderToolWarning",
          "displayName": "UnrealHeaderTool warnings",
          "enabled": true
        },
        {
          "shortName": "UnrealHeaderToolError",
          "displayName": "UnrealHeaderTool errors",
          "enabled": true
        }
      ]
    },
    {
      "name": "Imports and dependencies",
      "inspections": [
        {
          "shortName": "ES6CheckImport",
          "displayName": "Unresolved imported name",
          "enabled": false,
          "description": "Reports an unresolved name or binding in an `import` declaration.\n\nTypeScript code is ignored."
        },
        {
          "shortName": "JSXNamespaceValidation",
          "displayName": "Missing JSX namespace",
          "enabled": true,
          "description": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation."
        },
        {
          "shortName": "ES6UnusedImports",
          "displayName": "Unused import",
          "enabled": false,
          "description": "Reports a redundant `import` statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import `import 'packageName'` instead of the regular one."
        },
        {
          "shortName": "NpmUsedModulesInstalled",
          "displayName": "Missing module dependency",
          "enabled": true,
          "description": "Reports a module from a `require()` call or an `import` statement that is not installed or is not listed in package.json dependencies.\n\nSuggests installing the module and/or including it into package.json.\n\nFor `require()` calls, works only in the files from the scope of *Node.js Core* JavaScript library."
        },
        {
          "shortName": "UpdateDependencyToLatestVersion",
          "displayName": "Update package.json dependencies to latest versions",
          "enabled": false,
          "description": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions."
        },
        {
          "shortName": "JSUrlImportUsage",
          "displayName": "URL import is used",
          "enabled": false,
          "description": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation.   \n\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language."
        },
        {
          "shortName": "PackageJsonMismatchedDependency",
          "displayName": "Mismatched dependencies in package.json",
          "enabled": true,
          "description": "Reports a dependency from package.json that is not installed or doesn't match the specified [version range](https://docs.npmjs.com/about-semantic-versioning)."
        }
      ]
    },
    {
      "name": "YAML",
      "inspections": [
        {
          "shortName": "YAMLUnresolvedAlias",
          "displayName": "Unresolved alias",
          "enabled": false,
          "description": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
        },
        {
          "shortName": "YAMLDuplicatedKeys",
          "displayName": "Duplicated YAML keys",
          "enabled": false,
          "description": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
        },
        {
          "shortName": "YAMLSchemaValidation",
          "displayName": "Validation by JSON Schema",
          "enabled": false,
          "description": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
        },
        {
          "shortName": "YAMLSchemaDeprecation",
          "displayName": "Deprecated YAML key",
          "enabled": false,
          "description": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
        },
        {
          "shortName": "YAMLRecursiveAlias",
          "displayName": "Recursive alias",
          "enabled": false,
          "description": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
        },
        {
          "shortName": "YAMLUnusedAnchor",
          "displayName": "Unused anchor",
          "enabled": false,
          "description": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
        }
      ]
    },
    {
      "name": "T4",
      "inspections": [
        {
          "shortName": "UnexpectedAttribute",
          "displayName": "The attribute is unknown and will be ignored",
          "enabled": true
        },
        {
          "shortName": "UnexpectedDirective",
          "displayName": "The directive is unknown and will be ignored",
          "enabled": true
        },
        {
          "shortName": "IgnoredDirective",
          "displayName": "The directive will be ignored and can be safely removed",
          "enabled": true
        },
        {
          "shortName": "EscapedKeyword",
          "displayName": "Keyword will be escaped during code generation",
          "enabled": true
        },
        {
          "shortName": "RedundantInclude",
          "displayName": "Redundant include",
          "enabled": true
        },
        {
          "shortName": "NoSupportForVB",
          "displayName": "Visual Basic is not supported yet",
          "enabled": true
        }
      ]
    },
    {
      "name": "Unused symbols",
      "inspections": [
        {
          "shortName": "JSUnusedGlobalSymbols",
          "displayName": "Unused global symbol",
          "enabled": false,
          "description": "Reports an unused globally accessible public function, variable, class, or property."
        },
        {
          "shortName": "JSUnusedAssignment",
          "displayName": "Unused assignment",
          "enabled": true,
          "description": "Reports a variable whose value is never used after assignment.  \nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\nThe following cases are reported:\n\n* A variable is never read after assignment.\n* The value of a variable is always overwritten with another assignment before the variable is read next time.\n* The initializer of a variable is redundant (for one of the above-mentioned reasons)."
        },
        {
          "shortName": "JSUnusedLocalSymbols",
          "displayName": "Unused local symbol",
          "enabled": true,
          "description": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration."
        }
      ]
    },
    {
      "name": "Less",
      "inspections": [
        {
          "shortName": "LessResolvedByNameOnly",
          "displayName": "Missing import",
          "enabled": false,
          "description": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly [imported](http://lesscss.org/features/#import-atrules-feature) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: @var-in-other-file;\n    }\n"
        },
        {
          "shortName": "LessUnresolvedVariable",
          "displayName": "Unresolved variable",
          "enabled": false,
          "description": "Reports a reference to a [Less variable](http://lesscss.org/features/#variables-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      margin: @unknown-var;\n    }\n"
        },
        {
          "shortName": "LessUnresolvedMixin",
          "displayName": "Unresolved mixin",
          "enabled": false,
          "description": "Reports a reference to a [Less mixin](http://lesscss.org/features/#mixins-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      .unknown-mixin();\n    }\n"
        }
      ]
    },
    {
      "name": "Oracle",
      "inspections": [
        {
          "shortName": "OraMissingBodyInspection",
          "displayName": "Missing body for package/object type specification",
          "enabled": false,
          "description": "Reports package and object type specifications that are missing body declarations.\n\nPackage specifications and object types that declare routines as well as package specifications with cursors must have body\ndeclarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\ninvoked in program code.\n\nExample (Oracle):\n\n    CREATE OR REPLACE PACKAGE ppp IS\n        FUNCTION foo(a INT) RETURN INT;\n    END;\n"
        },
        {
          "shortName": "OraUnmatchedForwardDeclarationInspection",
          "displayName": "Forward declaration without definition",
          "enabled": false,
          "description": "Reports declarations of procedures and functions that are missing their implementation in code.\n\nIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\n\nExample (Oracle):\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n    BEGIN\n        NULL;\n    END;\n\nThe `foo` procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n      PROCEDURE foo(a int, b varchar2) IS\n    BEGIN\n        NULL;\n    END;\n    BEGIN\n        NULL;\n    END;\n"
        },
        {
          "shortName": "OraOverloadInspection",
          "displayName": "Overloading errors",
          "enabled": false,
          "description": "Reports invalid cases of subprogram overloading in Oracle.\n\nExample (Oracle):\n\n    DECLARE\n        SUBTYPE fff IS BINARY_INTEGER;\n        SUBTYPE ggg IS NATURAL;\n        PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n        PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\n    BEGIN\n        NULL;\n    END;\n\nYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\nBINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee [Restrictions on Overloading at docs.oracle.com](https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm)."
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "LossyEncoding",
          "displayName": "Lossy encoding",
          "enabled": false,
          "description": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
        },
        {
          "shortName": "NonAsciiCharacters",
          "displayName": "Non-ASCII characters",
          "enabled": false,
          "description": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
        }
      ]
    },
    {
      "name": "Unity Performance Inspections",
      "inspections": [
        {
          "shortName": "Unity.PerformanceCriticalCodeInvocation",
          "displayName": "Expensive method invocation",
          "enabled": true
        },
        {
          "shortName": "Unity.InefficientMultiplicationOrder",
          "displayName": "Order of multiplication operations is inefficient",
          "enabled": true
        },
        {
          "shortName": "Unity.InefficientMultidimensionalArrayUsage",
          "displayName": "Use jagged or one-dimensional array instead of multidimensional array",
          "enabled": true
        },
        {
          "shortName": "Unity.PerformanceCriticalCodeNullComparison",
          "displayName": "Expensive null comparison",
          "enabled": true
        },
        {
          "shortName": "Unity.PerformanceCriticalCodeCameraMain",
          "displayName": "'Camera.main' is expensive",
          "enabled": true
        }
      ]
    },
    {
      "name": "RELAX NG",
      "inspections": [
        {
          "shortName": "UnusedDefine",
          "displayName": "Unused define",
          "enabled": false,
          "description": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
        },
        {
          "shortName": "UnresolvedReference",
          "displayName": "Unresolved reference",
          "enabled": false,
          "description": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
        }
      ]
    },
    {
      "name": "Unit testing",
      "inspections": [
        {
          "shortName": "JSTestFailedLine",
          "displayName": "Highlight failure line in test code",
          "enabled": true,
          "description": "Reports a failed method call or an assertion in a test."
        },
        {
          "shortName": "KarmaConfigFile",
          "displayName": "Invalid Karma configuration file",
          "enabled": false,
          "description": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, `karma.conf.js`."
        }
      ]
    },
    {
      "name": "Unreal Build System",
      "inspections": [
        {
          "shortName": "CSharpMissingPluginDependency",
          "displayName": "Dependency for the plugin is missing in the project file",
          "enabled": true
        },
        {
          "shortName": "CSharpBuildCSInvalidModuleName",
          "displayName": "Module with this name does not exist",
          "enabled": true
        }
      ]
    },
    {
      "name": "MySQL",
      "inspections": [
        {
          "shortName": "MysqlLoadDataPathInspection",
          "displayName": "LOAD statement path",
          "enabled": false,
          "description": "Reports paths that start with the tilde character in LOAD statements.\n\nExample (MySQL):\n\n    CREATE TABLE table_name (id int);\n    LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\n    INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\n    IGNORE 1 LINES;\n\nInstead of the tilde character, use a full path to the file."
        },
        {
          "shortName": "MysqlSpaceAfterFunctionNameInspection",
          "displayName": "Whitespace between the function name and the open parenthesis",
          "enabled": false,
          "description": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.\n\nExample (MySQL):\n\n    SELECT MAX (qty) FROM orders;\n"
        },
        {
          "shortName": "MysqlParsingInspection",
          "displayName": "Unsupported syntax in pre-8.0 versions",
          "enabled": false,
          "description": "Reports invalid usages of UNION in queries.\n\nThe inspection works in MySQL versions that are earlier than 8.0.\n\nExample (MySQL):\n\n\n    SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n"
        }
      ]
    },
    {
      "name": ".NET Core",
      "inspections": [
        {
          "shortName": "CppThisArgMemberFuncDelegateCtorIsUnsuportedByDotNetCore",
          "displayName": "Delegate constructors with a member pointer parameter are unsupported by .NET Core",
          "enabled": false
        }
      ]
    },
    {
      "name": "Proofreading",
      "inspections": [
        {
          "shortName": "SpellCheckingInspection",
          "displayName": "Typo",
          "enabled": false,
          "description": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
        }
      ]
    },
    {
      "name": "Ini files",
      "inspections": [
        {
          "shortName": "DuplicateSectionInFile",
          "displayName": "Duplicate section in file",
          "enabled": false,
          "description": "Reports duplicate sections in the `ini` file."
        },
        {
          "shortName": "DuplicateKeyInSection",
          "displayName": "Duplicate directive in section",
          "enabled": false,
          "description": "Reports duplicate properties in the `ini` file section."
        }
      ]
    },
    {
      "name": "Version control",
      "inspections": [
        {
          "shortName": "IgnoreFileDuplicateEntry",
          "displayName": "Ignore file duplicates",
          "enabled": false,
          "description": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
        }
      ]
    },
    {
      "name": "PostgreSQL",
      "inspections": [
        {
          "shortName": "PgSelectFromProcedureInspection",
          "displayName": "Postgres: Select from procedure call",
          "enabled": false,
          "description": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, `AS t1(s VARCHAR)`).\n\nThis requirement does not apply to scalar functions.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\n    SELECT 1;\n    $$ LANGUAGE sql;\n    SELECT * FROM produce_a_table() AS s (c1 INT);\n    SELECT * FROM produce_a_table() AS s (c1);\n    SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;\n\nThe `AS s (c1 INT)` has a typed alias, while `AS s (c1)` and `AS t1` do not.\nIn this case, the second call of `produce_a_table()` and `DBLINK()` will be highlighted."
        }
      ]
    },
    {
      "name": "File Watchers",
      "inspections": [
        {
          "shortName": "TaskProblemsInspection",
          "displayName": "File watcher problems",
          "enabled": false,
          "description": "Reports an error detected by the output filters from a File Watcher.\n\n\nA File Watcher tracks changes in files and executes the configured command when a change is detected."
        }
      ]
    },
    {
      "name": "React",
      "inspections": [
        {
          "shortName": "JSXDomNesting",
          "displayName": "Invalid DOM element nesting",
          "enabled": false,
          "description": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements."
        }
      ]
    },
    {
      "name": "MSBuild",
      "inspections": [
        {
          "shortName": "MsbuildTargetFrameworkTagInspection",
          "displayName": "TargetFramework tag checks",
          "enabled": false,
          "description": "[RIDER-83136](https://youtrack.jetbrains.com/issue/RIDER-83136/)"
        }
      ]
    },
    {
      "name": "Handlebars/Mustache",
      "inspections": [
        {
          "shortName": "HbEmptyBlock",
          "displayName": "Missing block helper argument",
          "enabled": false,
          "description": "Reports an `if`, `each`, or `with` block helper without an argument."
        }
      ]
    },
    {
      "name": "Node.js",
      "inspections": [
        {
          "shortName": "NodeCoreCodingAssistance",
          "displayName": "Unresolved Node.js APIs",
          "enabled": false,
          "description": "Suggests configuring coding assistance for Node.js, for example, `require` and/or core modules ('path', 'http', 'fs', etc.).\n\n\nSee <https://nodejs.org/api/> for the complete list."
        }
      ]
    },
    {
      "name": "Xunit",
      "inspections": [
        {
          "shortName": "Xunit.XunitTestWithConsoleOutput",
          "displayName": "Console output in Xunit tests",
          "enabled": true
        }
      ]
    }
  ]
}