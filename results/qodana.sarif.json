{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "QDNET",
          "fullName": "Qodana for .NET",
          "version": "231.5593.88.172",
          "rules": [],
          "taxa": [
            {
              "id": "Potential Code Quality Issues",
              "name": "Potential Code Quality Issues"
            },
            {
              "id": "Clang Diagnostics",
              "name": "Clang Diagnostics"
            },
            {
              "id": "Unreal Engine",
              "name": "Unreal Engine"
            },
            {
              "id": "Language Usage Opportunities",
              "name": "Language Usage Opportunities"
            },
            {
              "id": "Clang-Tidy Checks",
              "name": "Clang-Tidy Checks"
            },
            {
              "id": "Sass/SCSS",
              "name": "Sass/SCSS"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "JavaScript and TypeScript",
              "name": "JavaScript and TypeScript"
            },
            {
              "id": "JavaScript and TypeScript/Flow type checker",
              "name": "Flow type checker",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Common Practices and Code Improvements",
              "name": "Common Practices and Code Improvements"
            },
            {
              "id": "JavaScript and TypeScript/Bitwise operation issues",
              "name": "Bitwise operation issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Unity",
              "name": "Unity"
            },
            {
              "id": "EditorConfig",
              "name": "EditorConfig"
            },
            {
              "id": "Syntax Style",
              "name": "Syntax Style"
            },
            {
              "id": "JavaScript and TypeScript/Validity issues",
              "name": "Validity issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Redundancies in Code",
              "name": "Redundancies in Code"
            },
            {
              "id": "Formatting",
              "name": "Formatting"
            },
            {
              "id": "SQL",
              "name": "SQL"
            },
            {
              "id": "NUnit",
              "name": "NUnit"
            },
            {
              "id": "Compiler Warnings",
              "name": "Compiler Warnings"
            },
            {
              "id": "CSS",
              "name": "CSS"
            },
            {
              "id": "CSS/Invalid elements",
              "name": "Invalid elements",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 21,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
              "name": "Potentially undesirable code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Clang Static Analyzer Checks",
              "name": "Clang Static Analyzer Checks"
            },
            {
              "id": "Redundancies in Symbol Declarations",
              "name": "Redundancies in Symbol Declarations"
            },
            {
              "id": "Properties files",
              "name": "Properties files"
            },
            {
              "id": "XSLT",
              "name": "XSLT"
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "Code Notification",
              "name": "Code Notification"
            },
            {
              "id": "JavaScript and TypeScript/ES2015 migration aids",
              "name": "ES2015 migration aids",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/DOM issues",
              "name": "DOM issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/TypeScript",
              "name": "TypeScript",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "Unity Burst Compiler Warnings",
              "name": "Unity Burst Compiler Warnings"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "JavaScript and TypeScript/Potentially confusing code constructs",
              "name": "Potentially confusing code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Control flow issues",
              "name": "Control flow issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Pug/Jade",
              "name": "Pug/Jade"
            },
            {
              "id": "JavaScript and TypeScript/Function metrics",
              "name": "Function metrics",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "JavaScript and TypeScript/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Constraints Violations",
              "name": "Constraints Violations"
            },
            {
              "id": "HTML/Accessibility",
              "name": "Accessibility",
              "relationships": [
                {
                  "target": {
                    "id": "HTML",
                    "index": 6,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "XPath",
              "name": "XPath"
            },
            {
              "id": "JavaScript and TypeScript/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Vue",
              "name": "Vue"
            },
            {
              "id": "MongoJS",
              "name": "MongoJS"
            },
            {
              "id": "Spelling Issues",
              "name": "Spelling Issues"
            },
            {
              "id": "JavaScript and TypeScript/Try statement issues",
              "name": "Try statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SQL server",
              "name": "SQL server"
            },
            {
              "id": "JavaScript and TypeScript/Async code and promises",
              "name": "Async code and promises",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Naming conventions",
              "name": "Naming conventions",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Assignment issues",
              "name": "Assignment issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Switch statement issues",
              "name": "Switch statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Shell script",
              "name": "Shell script"
            },
            {
              "id": "JavaScript and TypeScript/Data flow",
              "name": "Data flow",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnrealHeaderTool",
              "name": "UnrealHeaderTool"
            },
            {
              "id": "CSS/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 21,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Imports and dependencies",
              "name": "Imports and dependencies",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "YAML",
              "name": "YAML"
            },
            {
              "id": "T4",
              "name": "T4"
            },
            {
              "id": "JavaScript and TypeScript/Unused symbols",
              "name": "Unused symbols",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Less",
              "name": "Less"
            },
            {
              "id": "Oracle",
              "name": "Oracle"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "Unity Performance Inspections",
              "name": "Unity Performance Inspections"
            },
            {
              "id": "CSS/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 21,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "JavaScript and TypeScript/Unit testing",
              "name": "Unit testing",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Unreal Build System",
              "name": "Unreal Build System"
            },
            {
              "id": "MySQL",
              "name": "MySQL"
            },
            {
              "id": ".NET Core",
              "name": ".NET Core"
            },
            {
              "id": "CSS/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 21,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "Ini files",
              "name": "Ini files"
            },
            {
              "id": "Version control",
              "name": "Version control"
            },
            {
              "id": "PostgreSQL",
              "name": "PostgreSQL"
            },
            {
              "id": "File Watchers",
              "name": "File Watchers"
            },
            {
              "id": "JavaScript and TypeScript/React",
              "name": "React",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MSBuild",
              "name": "MSBuild"
            },
            {
              "id": "Handlebars/Mustache",
              "name": "Handlebars/Mustache"
            },
            {
              "id": "JavaScript and TypeScript/Node.js",
              "name": "Node.js",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 7,
                    "toolComponent": {
                      "name": "QDNET"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Xunit",
              "name": "Xunit"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "rider.intellij.plugin.appender",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "SwitchStatementHandlesSomeKnownEnumValuesWithDefault",
                "shortDescription": {
                  "text": "Some values of the enum are not processed inside 'switch' statement and are handled via default section"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14CompatPedantic",
                "shortDescription": {
                  "text": "c++98-c++11-c++14-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUEBlueprintImplementableEventNotImplemented",
                "shortDescription": {
                  "text": "BlueprintImplementableEvent function is not implemented in any blueprint"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToCompoundAssignment",
                "shortDescription": {
                  "text": "Use compound assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseConfigureAwaitFalseForAsyncDisposable",
                "shortDescription": {
                  "text": "Missing '.ConfigureAwait(false)' for async disposable in library code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumConversion",
                "shortDescription": {
                  "text": "enum-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeReinterpretCast",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-reinterpret-cast clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompareDistinctPointerTypes",
                "shortDescription": {
                  "text": "compare-distinct-pointer-types clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAssignedValueIsNeverUsed",
                "shortDescription": {
                  "text": "Assigned value is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppCVQualifierCanNotBeAppliedToReference",
                "shortDescription": {
                  "text": "Adding cv-qualifiers to references has no effect"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreOpenmp51Compat",
                "shortDescription": {
                  "text": "pre-openmp-51-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatiblePointerTypes",
                "shortDescription": {
                  "text": "incompatible-pointer-types clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInitializerOverrides",
                "shortDescription": {
                  "text": "initializer-overrides clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStdlibcxxNotFound",
                "shortDescription": {
                  "text": "stdlibcxx-not-found clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalUnsignedEnumZeroCompare",
                "shortDescription": {
                  "text": "tautological-unsigned-enum-zero-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClassNeedsConstructorBecauseOfUninitializedMember",
                "shortDescription": {
                  "text": "Class should have a user-defined constructor because of an uninitialized data member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTargetClonesMixedSpecifiers",
                "shortDescription": {
                  "text": "target-clones-mixed-specifiers clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftExists",
                "shortDescription": {
                  "text": "microsoft-exists clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecAccept",
                "shortDescription": {
                  "text": "android-cloexec-accept clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CoVariantArrayConversion",
                "shortDescription": {
                  "text": "Co-variant array conversion"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeMadeStatic.Global",
                "shortDescription": {
                  "text": "Member can be made static (shared) (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseElementsView",
                "shortDescription": {
                  "text": "std::views::keys/values can be used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.Entities.SingletonMustBeRequested",
                "shortDescription": {
                  "text": "To use the result of a 'GetSingleton<{0}>' call in the function, 'OnCreate' must include a 'RequireForUpdate' call."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionNeverUpdated.Global",
                "shortDescription": {
                  "text": "Collection is never updated (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11CompatPedantic",
                "shortDescription": {
                  "text": "c++98-c++11-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredPragmaIntrinsic",
                "shortDescription": {
                  "text": "ignored-pragma-intrinsic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeModifiersOrder",
                "shortDescription": {
                  "text": "Adjust modifiers declaration order"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownLayer",
                "shortDescription": {
                  "text": "The layer is not defined in the 'Tags & Layers'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantDelegateCreation",
                "shortDescription": {
                  "text": "Explicit delegate creation expression is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSemicolonSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around semicolon)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVarargs",
                "shortDescription": {
                  "text": "varargs clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.IncorrectScriptableObjectInstantiation",
                "shortDescription": {
                  "text": "'ScriptableObject' instances must be instantiated with 'ScriptableObject.CreateInstance<T>()' instead of 'new'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFunctionDoesntReturnValue",
                "shortDescription": {
                  "text": "No return statement in a function or a lambda returning non-void"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerArith",
                "shortDescription": {
                  "text": "pointer-arith clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMaxUnsignedZero",
                "shortDescription": {
                  "text": "max-unsigned-zero clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeReplaceRandomShuffle",
                "shortDescription": {
                  "text": "modernize-replace-random-shuffle clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSpirvCompat",
                "shortDescription": {
                  "text": "spirv-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CompareNonConstrainedGenericWithNull",
                "shortDescription": {
                  "text": "Possible comparison of value type with 'null'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.ImplicitUnspecifiedNullValues",
                "shortDescription": {
                  "text": "NUnit. Implicitly unspecified null values."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDoxygenUndocumentedParameter",
                "shortDescription": {
                  "text": "Missing function parameter description in a documentation comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS4014",
                "shortDescription": {
                  "text": "Async method invocation without await expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSwitchBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around switch statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitConstIntFloatConversion",
                "shortDescription": {
                  "text": "implicit-const-int-float-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleExplicitConstructor",
                "shortDescription": {
                  "text": "google-explicit-constructor clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowUncapturedLocal",
                "shortDescription": {
                  "text": "shadow-uncaptured-local clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseIsOperator.1",
                "shortDescription": {
                  "text": "Use 'is' operator"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusSmartPtrModeling",
                "shortDescription": {
                  "text": "cplusplus.SmartPtrModeling clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseIsOperator.2",
                "shortDescription": {
                  "text": "Use 'is' operator"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuComplexInteger",
                "shortDescription": {
                  "text": "gnu-complex-integer clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Single.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Single()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Single.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Single() (replace with OfType<T>().Single(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilTimeSubtraction",
                "shortDescription": {
                  "text": "abseil-time-subtraction clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeallocInCategory",
                "shortDescription": {
                  "text": "dealloc-in-category clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20Compat",
                "shortDescription": {
                  "text": "c++20-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeleteIncomplete",
                "shortDescription": {
                  "text": "delete-incomplete clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyAnalysis",
                "shortDescription": {
                  "text": "thread-safety-analysis clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscNoRecursion",
                "shortDescription": {
                  "text": "misc-no-recursion clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventUnsubscriptionViaAnonymousDelegate",
                "shortDescription": {
                  "text": "Event unsubscription via anonymous delegate"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantConstSpecifier",
                "shortDescription": {
                  "text": "Redundant 'const' specifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNullableAnnotationInsteadOfAttribute",
                "shortDescription": {
                  "text": "Use nullable annotation instead of an attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14CompatPedantic",
                "shortDescription": {
                  "text": "c++14-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingIncludeGuard",
                "shortDescription": {
                  "text": "Missing include guard"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedTupleComponentInReturnValue",
                "shortDescription": {
                  "text": "Component of the tuple is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMacroRedefined",
                "shortDescription": {
                  "text": "macro-redefined clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRetainedLanguageLinkage",
                "shortDescription": {
                  "text": "retained-language-linkage clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticKeywordMacro",
                "shortDescription": {
                  "text": "keyword-macro clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityUseAnyofallof",
                "shortDescription": {
                  "text": "readability-use-anyofallof clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReadonlyIboutletProperty",
                "shortDescription": {
                  "text": "readonly-iboutlet-property clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGccCompat",
                "shortDescription": {
                  "text": "gcc-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeprecatedRegisterStorageClassSpecifier",
                "shortDescription": {
                  "text": "Deprecated 'register' storage class specifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMemsizeComparison",
                "shortDescription": {
                  "text": "memsize-comparison clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNegatedPatternInIsExpression",
                "shortDescription": {
                  "text": "Convert negated 'is' expression into 'is' expression with negated pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppAvoidCArrays",
                "shortDescription": {
                  "text": "hicpp-avoid-c-arrays clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToLast",
                "shortDescription": {
                  "text": "Replace with single call to Last(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Blazor.EditorRequired",
                "shortDescription": {
                  "text": "Missed value for required attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBackslashNewlineEscape",
                "shortDescription": {
                  "text": "backslash-newline-escape clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSizeofExpression",
                "shortDescription": {
                  "text": "bugprone-sizeof-expression clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseSourceShouldImplementIEnumerable",
                "shortDescription": {
                  "text": "NUnit. Test case source must be non-abstract and implement IEnumerable."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionNeverUpdated.Local",
                "shortDescription": {
                  "text": "Collection is never updated (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8417",
                "shortDescription": {
                  "text": "The given expression always matches the provided constant."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8416",
                "shortDescription": {
                  "text": "The given expression never matches the provided pattern."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmp51Extensions",
                "shortDescription": {
                  "text": "openmp-51-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadColonSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around colon)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeNestedPropertyPatterns",
                "shortDescription": {
                  "text": "Merge nested property patterns"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStrictPrototypes",
                "shortDescription": {
                  "text": "strict-prototypes clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XKeyAttributeDisallowed",
                "shortDescription": {
                  "text": "x:Key is allowed for resources and dictionary elements only"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JoinNullCheckWithUsage",
                "shortDescription": {
                  "text": "Join null check with assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReceiverExpr",
                "shortDescription": {
                  "text": "receiver-expr clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1574,CS1584,CS1581,CS1580",
                "shortDescription": {
                  "text": "Cannot resolve reference in XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneUnexistingScene",
                "shortDescription": {
                  "text": "Scene does not exist"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8425",
                "shortDescription": {
                  "text": "Async-iterator has one or more parameters of type 'CancellationToken' but none of them is annotated with the 'EnumeratorCancellation' attribute."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8424",
                "shortDescription": {
                  "text": "The 'EnumeratorCancellation' attribute is only effective on a parameter of type 'CancellationToken' in an async-iterator method returning 'IAsyncEnumerable<>'."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeletingVoidPointer",
                "shortDescription": {
                  "text": "Deleting a void pointer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStrictSelectorMatch",
                "shortDescription": {
                  "text": "strict-selector-match clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullableToNonnullConversion",
                "shortDescription": {
                  "text": "nullable-to-nonnull-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ParameterConstraintCanBeSpecified",
                "shortDescription": {
                  "text": "Route parameter constraint can be added due to type of method argument"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftCommentPaste",
                "shortDescription": {
                  "text": "microsoft-comment-paste clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppThrowExpressionCanBeReplacedWithRethrow",
                "shortDescription": {
                  "text": "Throw expression can be replaced with a rethrow expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlMismatchedDeviceFamilyViewClrNameHighlighting",
                "shortDescription": {
                  "text": "DeviceFamily-specific view type name does not match generic type name"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Compat",
                "shortDescription": {
                  "text": "c++98-c++11-c++14-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp14CompatPedantic",
                "shortDescription": {
                  "text": "pre-c++14-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedCopy",
                "shortDescription": {
                  "text": "deprecated-copy-with-user-provided-copy clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRangeBasedForIncompatibleReference",
                "shortDescription": {
                  "text": "Possibly unintended incompatible reference type in range declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicAccess",
                "shortDescription": {
                  "text": "atomic-access clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalTypeLimitCompare",
                "shortDescription": {
                  "text": "tautological-type-limit-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertCon36C",
                "shortDescription": {
                  "text": "cert-con36-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftUnionMemberReference",
                "shortDescription": {
                  "text": "microsoft-union-member-reference clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToLocalFunction",
                "shortDescription": {
                  "text": "Convert delegate variable into local function"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonModularIncludeInModule",
                "shortDescription": {
                  "text": "non-modular-include-in-module clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleMsStruct",
                "shortDescription": {
                  "text": "incompatible-ms-struct clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNoArrayDecay",
                "shortDescription": {
                  "text": "hicpp-no-array-decay clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxNSOrCFErrorDerefChecker",
                "shortDescription": {
                  "text": "osx.NSOrCFErrorDerefChecker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerIntegerCompare",
                "shortDescription": {
                  "text": "pointer-integer-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingIndent",
                "shortDescription": {
                  "text": "Incorrect indent (line should be indented or outdented elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.AttributeValueNotResolved",
                "shortDescription": {
                  "text": "Unknown attribute value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConceptsTsCompat",
                "shortDescription": {
                  "text": "concepts-ts-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrintfExtraArg",
                "shortDescription": {
                  "text": "Too many arguments in a call to printf"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityElseAfterReturn",
                "shortDescription": {
                  "text": "readability-else-after-return clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaClangAttribute",
                "shortDescription": {
                  "text": "pragma-clang-attribute clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProBoundsPointerArithmetic",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-bounds-pointer-arithmetic clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExternInitializer",
                "shortDescription": {
                  "text": "extern-initializer clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesAvoidMagicNumbers",
                "shortDescription": {
                  "text": "cppcoreguidelines-avoid-magic-numbers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BaseObjectGetHashCodeCallInGetHashCode",
                "shortDescription": {
                  "text": "Overridden GetHashCode calls base 'Object.GetHashCode()'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityUppercaseLiteralSuffix",
                "shortDescription": {
                  "text": "readability-uppercase-literal-suffix clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDirectIvarAccess",
                "shortDescription": {
                  "text": "direct-ivar-access clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIdenticalOperandsInBinaryExpression",
                "shortDescription": {
                  "text": "Binary operator acts on identical operands"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedRegister",
                "shortDescription": {
                  "text": "deprecated-register clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMismatchedNewDelete",
                "shortDescription": {
                  "text": "mismatched-new-delete clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstAccessingManagedMethod",
                "shortDescription": {
                  "text": "Accessing managed methods is not supported"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftExpressionResultEqualsZero",
                "shortDescription": {
                  "text": "Constant shift expression with non-zero operands results in a zero value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantStringInit",
                "shortDescription": {
                  "text": "readability-redundant-string-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedTargetOpt",
                "shortDescription": {
                  "text": "unsupported-target-opt clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalConstantInRangeCompare",
                "shortDescription": {
                  "text": "tautological-constant-in-range-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownEscapeSequence",
                "shortDescription": {
                  "text": "unknown-escape-sequence clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseArrayEmptyMethod",
                "shortDescription": {
                  "text": "Use 'Array.Empty<T>()'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadCommaSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around comma)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAbstractClassWithoutSpecifier",
                "shortDescription": {
                  "text": "Class is abstract but not explicitly declared as such"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Single.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Single() (replace with OfType(Of ..)().Single(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Single.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Single() (replace with OfType(Of ..)().Single())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatSecurity",
                "shortDescription": {
                  "text": "format-security clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatBadCode",
                "shortDescription": {
                  "text": "Incorrect format directive in boost::format"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadParensSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around parenthesis)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPessimizingMove",
                "shortDescription": {
                  "text": "pessimizing-move clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInterfaceMemberAmbiguity",
                "shortDescription": {
                  "text": "Possible ambiguity while accessing member by interface"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodHasAsyncOverloadWithCancellation",
                "shortDescription": {
                  "text": "Method has async overload with cancellation support"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleFunctionPointerTypes",
                "shortDescription": {
                  "text": "incompatible-function-pointer-types clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeleteNonAbstractNonVirtualDtor",
                "shortDescription": {
                  "text": "delete-non-abstract-non-virtual-dtor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesAvoidGoto",
                "shortDescription": {
                  "text": "cppcoreguidelines-avoid-goto clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrivateSpecialMemberFunctionIsNotImplemented",
                "shortDescription": {
                  "text": "Private special member function is not implemented"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefPrefix",
                "shortDescription": {
                  "text": "undef-prefix clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityInconsistentDeclarationParameterName",
                "shortDescription": {
                  "text": "readability-inconsistent-declaration-parameter-name clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObsoleteElementError",
                "shortDescription": {
                  "text": "Use of obsolete type or type member (error)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.DuplicateShortcut",
                "shortDescription": {
                  "text": "The same shortcut is defined for another menu item"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUnhandledExceptionAtNew",
                "shortDescription": {
                  "text": "bugprone-unhandled-exception-at-new clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDllexportExplicitInstantiationDecl",
                "shortDescription": {
                  "text": "dllexport-explicit-instantiation-decl clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIntegralToPointerConversion",
                "shortDescription": {
                  "text": "Implicit integer to pointer conversion"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0420",
                "shortDescription": {
                  "text": "Reference to a volatile field will not be treated as volatile"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFourCharConstants",
                "shortDescription": {
                  "text": "four-char-constants clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8383",
                "shortDescription": {
                  "text": "The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlRelativeSourceDefaultModeWarningHighlighting",
                "shortDescription": {
                  "text": "RelativeSourceMode is not set explicitly"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RangeAttributeBoundsAreOutOfRange",
                "shortDescription": {
                  "text": "NUnit. Values in range do not fit the type of the test parameter."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaVirtualInheritance",
                "shortDescription": {
                  "text": "fuchsia-virtual-inheritance clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuPointerArith",
                "shortDescription": {
                  "text": "gnu-pointer-arith clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadIndent",
                "shortDescription": {
                  "text": "Incorrect indent (line indent should not be changed relative to the previous line elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertCon54Cpp",
                "shortDescription": {
                  "text": "cert-con54-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidPpToken",
                "shortDescription": {
                  "text": "invalid-pp-token clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAssignedOutParameter",
                "shortDescription": {
                  "text": "'out' parameter is not assigned upon exit"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1723",
                "shortDescription": {
                  "text": "XML comment has cref attribute that refers to a type parameter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RedundantExpectedResultInTestCaseAttribute",
                "shortDescription": {
                  "text": "NUnit. Redundant expected result for void test method."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownTag",
                "shortDescription": {
                  "text": "The tag is not defined in the 'Tags & Layers'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleObjcFunctionNaming",
                "shortDescription": {
                  "text": "google-objc-function-naming clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinPerformancePadding",
                "shortDescription": {
                  "text": "optin.performance.Padding clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitParamsArrayCreation",
                "shortDescription": {
                  "text": "Redundant explicit array creation in argument of 'params' parameter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS7023",
                "shortDescription": {
                  "text": "Static type in 'is' or 'as' operator."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.Warning",
                "shortDescription": {
                  "text": "ASP.NET Warning"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS7022",
                "shortDescription": {
                  "text": "The 'Main' method will not be used as an entry point because compilation unit with top-level statements was found."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedArraySubscript",
                "shortDescription": {
                  "text": "core.uninitialized.ArraySubscript clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseIndexFromEndExpression",
                "shortDescription": {
                  "text": "Use index from end expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ParameterTypeAndConstraintsMismatch",
                "shortDescription": {
                  "text": "Type of parameter doesn't satisfy constraints declared in route template"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMsc32C",
                "shortDescription": {
                  "text": "cert-msc32-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuBinaryLiteral",
                "shortDescription": {
                  "text": "gnu-binary-literal clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertTypeCheckToNullCheck",
                "shortDescription": {
                  "text": "Use null check instead of a type check succeeding on any not-null value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseEqualsDefault",
                "shortDescription": {
                  "text": "hicpp-use-equals-default clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.IgnoredParameterAttribute",
                "shortDescription": {
                  "text": "NUnit. Ignored parameter attribute."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseTransparentFunctors",
                "shortDescription": {
                  "text": "modernize-use-transparent-functors clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MeaninglessDefaultParameterValue",
                "shortDescription": {
                  "text": "'DefaultParameterValueAttribute' must be used in conjunction with 'OptionalAttribute'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnneededInternalDeclaration",
                "shortDescription": {
                  "text": "unneeded-internal-declaration clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstCreatingManagedType",
                "shortDescription": {
                  "text": "Creating a managed type is not supported"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDangling",
                "shortDescription": {
                  "text": "dangling clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWeakVtables",
                "shortDescription": {
                  "text": "weak-vtables clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingNoreturn",
                "shortDescription": {
                  "text": "missing-noreturn clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIfCanBeReplacedByConstexprIf",
                "shortDescription": {
                  "text": "If statement with constant condition can be replaced with 'if constexpr'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseNoexcept",
                "shortDescription": {
                  "text": "hicpp-use-noexcept clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0458",
                "shortDescription": {
                  "text": "The result of the expression is always 'null' of nullable type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedButSetParameter",
                "shortDescription": {
                  "text": "unused-but-set-parameter clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDefaultCaseNotHandledInSwitchStatement",
                "shortDescription": {
                  "text": "Default case is not handled in a switch statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowFieldInConstructorModified",
                "shortDescription": {
                  "text": "shadow-field-in-constructor-modified clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotOverriddenInSpecificCulture",
                "shortDescription": {
                  "text": "Resource is not overridden in specific culture"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscConfusableIdentifiers",
                "shortDescription": {
                  "text": "misc-confusable-identifiers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonReadonlyMemberInGetHashCode",
                "shortDescription": {
                  "text": "Non-readonly type member referenced in 'GetHashCode()'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonportableSystemIncludePath",
                "shortDescription": {
                  "text": "nonportable-system-include-path clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaOnceOutsideHeader",
                "shortDescription": {
                  "text": "pragma-once-outside-header clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMsc30C",
                "shortDescription": {
                  "text": "cert-msc30-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicAlignment",
                "shortDescription": {
                  "text": "atomic-alignment clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0469",
                "shortDescription": {
                  "text": "'goto case' value is not implicitly convertible to required type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedAnonymousMethodSignature",
                "shortDescription": {
                  "text": "Anonymous method signature is not necessary"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingExceptionSpec",
                "shortDescription": {
                  "text": "missing-exception-spec clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPoisonSystemDirectories",
                "shortDescription": {
                  "text": "poison-system-directories clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0464",
                "shortDescription": {
                  "text": "Comparing with null of nullable value type always produces 'false'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0465",
                "shortDescription": {
                  "text": "Introducing a 'Finalize' method can interfere with destructor invocation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedLambdaCapture",
                "shortDescription": {
                  "text": "unused-lambda-capture clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormat",
                "shortDescription": {
                  "text": "format clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredReferenceQualifiers",
                "shortDescription": {
                  "text": "ignored-reference-qualifiers clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.EmptyGridLengthDefinition",
                "shortDescription": {
                  "text": "Grid length definition must not be empty"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.1",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.2",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS7095",
                "shortDescription": {
                  "text": "Filter expression is a constant, consider removing the filter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.3",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.4",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodAny.5",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUsedButMarkedUnused",
                "shortDescription": {
                  "text": "used-but-marked-unused clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverloadedShiftOpParentheses",
                "shortDescription": {
                  "text": "overloaded-shift-op-parentheses clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFieldKeyword",
                "shortDescription": {
                  "text": "Replace with 'field' keyword"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeTypeModifiers",
                "shortDescription": {
                  "text": "Use explicit or implicit modifier definition for types"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonModularIncludeInFrameworkModule",
                "shortDescription": {
                  "text": "non-modular-include-in-framework-module clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalFunctionHidesMethod",
                "shortDescription": {
                  "text": "Local function hides method"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneAmbiguousSceneName",
                "shortDescription": {
                  "text": "Short scene name is not unique"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneDisabledSceneName",
                "shortDescription": {
                  "text": "Scene is disabled in the build settings"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDefaultedFunctionDeleted",
                "shortDescription": {
                  "text": "defaulted-function-deleted clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnTypeCanBeNotNullable",
                "shortDescription": {
                  "text": "Return type of a function can be non-nullable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingBodyTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (missing <body>)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppOutParameterMustBeWritten",
                "shortDescription": {
                  "text": "The 'out' parameter must be assigned"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.BindingWithContextNotResolved",
                "shortDescription": {
                  "text": "Unresolved binding path when DataContext is known"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOutOfScopeFunction",
                "shortDescription": {
                  "text": "out-of-scope-function clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeConstructorOrDestructorBody",
                "shortDescription": {
                  "text": "Use preferred body style (convert into constructor or destructor with preferred body style)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.TagShouldNotBeSelfClosed",
                "shortDescription": {
                  "text": "Wrong self-closed tag"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModuleConflict",
                "shortDescription": {
                  "text": "module-conflict clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExtendsListEntry",
                "shortDescription": {
                  "text": "Redundant class or interface specification in base types list"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnValueOfPureMethodIsNotUsed",
                "shortDescription": {
                  "text": "Return value of pure method is not used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConfigMacros",
                "shortDescription": {
                  "text": "config-macros clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentationUnknownCommand",
                "shortDescription": {
                  "text": "documentation-unknown-command clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatement",
                "shortDescription": {
                  "text": "Empty statement is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedPositionalProperty.Local",
                "shortDescription": {
                  "text": "Non-accessed positional property (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.IncorrectMethodSignatureInStringLiteral",
                "shortDescription": {
                  "text": "Method referenced in string literal does not have the expected signature"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantFreezeAttribute",
                "shortDescription": {
                  "text": "Redundant 'Freeze' attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedGetOnlyAutoProperty",
                "shortDescription": {
                  "text": "Get-only auto-property is never assigned"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4BlueprintCallableFunctionMayBeStatic",
                "shortDescription": {
                  "text": "BlueprintCallable function can be made static"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUnhandledSelfAssignment",
                "shortDescription": {
                  "text": "bugprone-unhandled-self-assignment clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousMemoryComparison",
                "shortDescription": {
                  "text": "bugprone-suspicious-memory-comparison clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignNullToNotNullAttribute",
                "shortDescription": {
                  "text": "Possible 'null' assignment to non-nullable entity"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclarationSpecifierWithoutDeclarators",
                "shortDescription": {
                  "text": "Declaration specifier with no declarators"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateMethodArg",
                "shortDescription": {
                  "text": "duplicate-method-arg clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesNonPrivateMemberVariablesInClasses",
                "shortDescription": {
                  "text": "cppcoreguidelines-non-private-member-variables-in-classes clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaSelfInit",
                "shortDescription": {
                  "text": "osx.cocoa.SelfInit clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.ModuleQualificationResolve",
                "shortDescription": {
                  "text": "Module qualification required"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntroduceOptionalParameters.Global",
                "shortDescription": {
                  "text": "Introduce optional parameters (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DoubleNegationOperator",
                "shortDescription": {
                  "text": "Double negation operator"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleBuildNamespaces",
                "shortDescription": {
                  "text": "google-build-namespaces clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneForwardingReferenceOverload",
                "shortDescription": {
                  "text": "bugprone-forwarding-reference-overload clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseNullptr",
                "shortDescription": {
                  "text": "modernize-use-nullptr clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizePassByValue",
                "shortDescription": {
                  "text": "modernize-pass-by-value clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToSingle",
                "shortDescription": {
                  "text": "Replace with single call to Single(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRegister",
                "shortDescription": {
                  "text": "register clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0472",
                "shortDescription": {
                  "text": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstFunctionSignatureContainsManagedTypes",
                "shortDescription": {
                  "text": "Function signature cannot contain managed types"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuConditionalOmittedOperand",
                "shortDescription": {
                  "text": "gnu-conditional-omitted-operand clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RoslynAnalyzersOutputInspection",
                "shortDescription": {
                  "text": "Roslyn analyzers output"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticClassVarargs",
                "shortDescription": {
                  "text": "class-varargs clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastFunctionType",
                "shortDescription": {
                  "text": "cast-function-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppWrongIndentSize",
                "shortDescription": {
                  "text": "Incorrect indent (incorrect indent size)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeRedundantParentheses",
                "shortDescription": {
                  "text": "Remove redundant parentheses"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.ResourceFilePathCaseMismatch",
                "shortDescription": {
                  "text": "Path to resource is case-sensitive"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithLastOrDefault.2",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingPrototypes",
                "shortDescription": {
                  "text": "missing-prototypes clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithLastOrDefault.3",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInvalidCastExceptionInForeachLoop",
                "shortDescription": {
                  "text": "Possible 'System.InvalidCastException' in foreach loop"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithLastOrDefault.1",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossiblyImpureMethodCallOnReadonlyVariable",
                "shortDescription": {
                  "text": "Possibly impure struct method is called on readonly variable: struct value always copied before invocation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecPipe2",
                "shortDescription": {
                  "text": "android-cloexec-pipe2 clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithLastOrDefault.4",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftTemplate",
                "shortDescription": {
                  "text": "microsoft-template clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4CodingStandardUClassNamingViolationError",
                "shortDescription": {
                  "text": "Inconsistent Unreal Engine UCLASS Naming"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstTryNotSupported",
                "shortDescription": {
                  "text": "Try statement is not supported"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEnumCaseLabelForDefaultSection",
                "shortDescription": {
                  "text": "Redundant 'case' label before default section"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadParensLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around parenthesis)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceTypePromotionInMathFn",
                "shortDescription": {
                  "text": "performance-type-promotion-in-math-fn clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsequenced",
                "shortDescription": {
                  "text": "unsequenced clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateDeclSpecifier",
                "shortDescription": {
                  "text": "duplicate-decl-specifier clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSymbolSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around operator symbols)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesExplicitVirtualFunctions",
                "shortDescription": {
                  "text": "cppcoreguidelines-explicit-virtual-functions clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Any.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Any() (replace with OfType<T>().Any(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Any.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInvalidOperationException",
                "shortDescription": {
                  "text": "Possible 'System.InvalidOperationException'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIndependentClassAttribute",
                "shortDescription": {
                  "text": "IndependentClass-attribute clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSignedEnumBitfield",
                "shortDescription": {
                  "text": "signed-enum-bitfield clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingTrustReturnsNonnull",
                "shortDescription": {
                  "text": "apiModeling.TrustReturnsNonnull clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeVarKeywordsInDeconstructingDeclaration",
                "shortDescription": {
                  "text": "Join or separate 'var' in deconstruction declarations"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.InstantiateWithoutParent",
                "shortDescription": {
                  "text": "Setting 'parent' property immediately after object instantiation is inefficient"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftSignOverflow",
                "shortDescription": {
                  "text": "shift-sign-overflow clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowFieldInConstructor",
                "shortDescription": {
                  "text": "shadow-field-in-constructor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseObjectOrCollectionInitializer",
                "shortDescription": {
                  "text": "Use object or collection initializer when possible"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBePrivate.Global",
                "shortDescription": {
                  "text": "Member can be made private (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDiscardedPostfixOperatorResult",
                "shortDescription": {
                  "text": "Result of a postfix operator is discarded"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseCollectionCountProperty",
                "shortDescription": {
                  "text": "Use collection's count property"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaPack",
                "shortDescription": {
                  "text": "pragma-pack clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityTodo",
                "shortDescription": {
                  "text": "google-readability-todo clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedType",
                "shortDescription": {
                  "text": "deprecated-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEmptyDeclaration",
                "shortDescription": {
                  "text": "Declaration does not declare anything"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIncompatiblePointerConversion",
                "shortDescription": {
                  "text": "Implicit conversion to incompatible pointer type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedCapturedBlockVariable",
                "shortDescription": {
                  "text": "core.uninitialized.CapturedBlockVariable clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DlTagContainsNonDtOrDdElements",
                "shortDescription": {
                  "text": "Elements not allowed in context (<dl> contains elements other than <dt> or <dd> or they are unclosed)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringConversion",
                "shortDescription": {
                  "text": "string-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotNullOrRequiredMemberIsNotInitialized",
                "shortDescription": {
                  "text": "Non-nullable or required member is not initialized at constructor exit"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseUnsignedRightShiftOperator",
                "shortDescription": {
                  "text": "Use unsigned right shift operator '>>>'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedDeclarations",
                "shortDescription": {
                  "text": "deprecated-declarations clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeLoopIncrement",
                "shortDescription": {
                  "text": "unreachable-code-loop-increment clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Last.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Last() (replace with OfType(Of ..)().Last())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotateCanBeNullTypeMember",
                "shortDescription": {
                  "text": "Declaration nullability inferred (type member is inferred to be nullable)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Last.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Last() (replace with OfType(Of ..)().Last(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OneWayOperationContractWithReturnType",
                "shortDescription": {
                  "text": "One way operations must not return values"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseThrowIfNullMethod",
                "shortDescription": {
                  "text": "Use 'ArgumentNullException.ThrowIfNull'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToAutoPropertyWhenPossible",
                "shortDescription": {
                  "text": "Convert property into auto-property (when possible)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyStringInterpolation",
                "shortDescription": {
                  "text": "Use format specifier in interpolated strings"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MoveVariableDeclarationInsideLoopCondition",
                "shortDescription": {
                  "text": "Move variable declaration inside loop condition"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuIncludeNext",
                "shortDescription": {
                  "text": "gnu-include-next clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReferenceEqualsWithValueType",
                "shortDescription": {
                  "text": "'Object.ReferenceEquals' is always false because it is called with value type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyConditionalTernaryExpression",
                "shortDescription": {
                  "text": "Simplify conditional ternary expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmbeddedDirective",
                "shortDescription": {
                  "text": "embedded-directive clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinOsxOSObjectCStyleCast",
                "shortDescription": {
                  "text": "optin.osx.OSObjectCStyleCast clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadAttributeBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around attributes)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.AreaNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown area)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceImplicitConversionInLoop",
                "shortDescription": {
                  "text": "performance-implicit-conversion-in-loop clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.ResolveWarning",
                "shortDescription": {
                  "text": "ASP.NET Resolve Warning"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMalformedWarningCheck",
                "shortDescription": {
                  "text": "malformed-warning-check clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilitySimplifyBooleanExpr",
                "shortDescription": {
                  "text": "readability-simplify-boolean-expr clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkupAttributeTypo",
                "shortDescription": {
                  "text": "Typo in markup attribute value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedAltivecSrcCompat",
                "shortDescription": {
                  "text": "deprecated-altivec-src-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExtraSemiStmt",
                "shortDescription": {
                  "text": "extra-semi-stmt clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedConstVariable",
                "shortDescription": {
                  "text": "unused-const-variable clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InternalOrPrivateMemberNotDocumented",
                "shortDescription": {
                  "text": "Missing XML comment for private or internal type or member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDllAttributeOnRedeclaration",
                "shortDescription": {
                  "text": "dll-attribute-on-redeclaration clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IsExpressionAlwaysFalse",
                "shortDescription": {
                  "text": "The expression of 'is' operator is never of the provided type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUENonExistentInputAction",
                "shortDescription": {
                  "text": "Action with this name does not exist"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcPerformSelectorLeaks",
                "shortDescription": {
                  "text": "arc-performSelector-leaks clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeAvoidCArrays",
                "shortDescription": {
                  "text": "modernize-avoid-c-arrays clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadControlBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around statement braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAnonEnumEnumConversion",
                "shortDescription": {
                  "text": "anon-enum-enum-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppCoroutineCallResolveError",
                "shortDescription": {
                  "text": "Cannot resolve a required coroutine function"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRemoveRedundantBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (remove redundant braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteUmbrella",
                "shortDescription": {
                  "text": "incomplete-umbrella clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDefaultIsUsedAsIdentifier",
                "shortDescription": {
                  "text": "Keyword 'default' is used as identifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleOther",
                "shortDescription": {
                  "text": "Use preferred argument style"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantDefaultMemberInitializer",
                "shortDescription": {
                  "text": "Redundant member initializer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantXamarinFormsClassDeclaration",
                "shortDescription": {
                  "text": "Resource cannot be accessed by class name because of x:Key attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLabel",
                "shortDescription": {
                  "text": "Unused label"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCopy",
                "shortDescription": {
                  "text": "deprecated-copy clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUESourceFileWithoutStandardLibrary",
                "shortDescription": {
                  "text": "C++ standard library headers not found"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDelegatingCtorCycles",
                "shortDescription": {
                  "text": "delegating-ctor-cycles clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeMakeShared",
                "shortDescription": {
                  "text": "modernize-make-shared clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompoundTokenSplitBySpace",
                "shortDescription": {
                  "text": "compound-token-split-by-space clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAbstractFinalClass",
                "shortDescription": {
                  "text": "abstract-final-class clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedStringInterpolation",
                "shortDescription": {
                  "text": "Nested string interpolation can be inlined"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReadAccessInDoubleCheckLocking",
                "shortDescription": {
                  "text": "Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMsc50Cpp",
                "shortDescription": {
                  "text": "cert-msc50-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLiteralRange",
                "shortDescription": {
                  "text": "literal-range clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TooWideLocalVariableScope",
                "shortDescription": {
                  "text": "Local variable has too wide declaration scope"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AspOdsMethodReferenceResolveError",
                "shortDescription": {
                  "text": "Object data source method resolve problem"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RangeToValueIsNotReachable",
                "shortDescription": {
                  "text": "NUnit. The maximum range value is not reachable with the step value."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticQualifiedVoidReturnType",
                "shortDescription": {
                  "text": "qualified-void-return-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticFloatInit",
                "shortDescription": {
                  "text": "static-float-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Web.MappedPath",
                "shortDescription": {
                  "text": "Mapped path"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr33C",
                "shortDescription": {
                  "text": "cert-err33-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneNarrowingConversions",
                "shortDescription": {
                  "text": "bugprone-narrowing-conversions clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadBracesSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr60Cpp",
                "shortDescription": {
                  "text": "cert-err60-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceSliceWithRangeIndexer",
                "shortDescription": {
                  "text": "Replace 'Slice' with range indexer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantPropertyPatternClause",
                "shortDescription": {
                  "text": "Redundant property pattern clause"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixCstringBadSizeArg",
                "shortDescription": {
                  "text": "unix.cstring.BadSizeArg clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftMutableReference",
                "shortDescription": {
                  "text": "microsoft-mutable-reference clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRewriteNotBool",
                "shortDescription": {
                  "text": "rewrite-not-bool clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterMayBeConst",
                "shortDescription": {
                  "text": "Parameter can be made const"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadParensLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around parenthesis)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityFunctionCognitiveComplexity",
                "shortDescription": {
                  "text": "readability-function-cognitive-complexity clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPortabilityRestrictSystemIncludes",
                "shortDescription": {
                  "text": "portability-restrict-system-includes clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIncompleteSwitchStatement",
                "shortDescription": {
                  "text": "Possibly erroneous incomplete switch-statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentInConditionalExpression",
                "shortDescription": {
                  "text": "Assignment in conditional expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullableReturnedFromNonnull",
                "shortDescription": {
                  "text": "nullability.NullableReturnedFromNonnull clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.TypeNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve symbol"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticKeywordCompat",
                "shortDescription": {
                  "text": "keyword-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntegerOverflow",
                "shortDescription": {
                  "text": "integer-overflow clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentationDeprecatedSync",
                "shortDescription": {
                  "text": "documentation-deprecated-sync clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExpansionToDefined",
                "shortDescription": {
                  "text": "expansion-to-defined clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDllimportStaticFieldDef",
                "shortDescription": {
                  "text": "dllimport-static-field-def clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.ExpectedComponent",
                "shortDescription": {
                  "text": "Expected type derived from 'Component' or 'MonoBehaviour'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwapViaDeconstruction",
                "shortDescription": {
                  "text": "Use deconstruction to swap variables"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveConstructorInvocation",
                "shortDescription": {
                  "text": "Remove constructor invocation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.CompiledBindingMissingDataTypeErrorHighlighting",
                "shortDescription": {
                  "text": "x:DataType not specified for CompiledBinding"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InlineOutVariableDeclaration",
                "shortDescription": {
                  "text": "Inline 'out' variable declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExportUsingDirective",
                "shortDescription": {
                  "text": "export-using-directive clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr34C",
                "shortDescription": {
                  "text": "cert-err34-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToFirstOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to FirstOrDefault(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Compat",
                "shortDescription": {
                  "text": "c++98-c++11-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VirtualMemberCallInConstructor",
                "shortDescription": {
                  "text": "Virtual member call in constructor"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeBreak",
                "shortDescription": {
                  "text": "unreachable-code-break clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AddressOfMarshalByRefObject",
                "shortDescription": {
                  "text": "Captured field reference of a marshal-by-reference class may cause a runtime exception"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotationRedundancyAtValueType",
                "shortDescription": {
                  "text": "Nullability attribute usage with declaration of void or value type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClearAttributeIsObsolete",
                "shortDescription": {
                  "text": "Obsolete tags and attributes (attribute 'clear' is obsolete)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitPositionalPropertyDeclaration",
                "shortDescription": {
                  "text": "Redundant explicit positional property declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OperationContractWithoutServiceContract",
                "shortDescription": {
                  "text": "Method is marked as OperationContract but containing type is not marked as ServiceContract"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSquareBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around square brackets within a statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMethodReturnValue.Global",
                "shortDescription": {
                  "text": "Method return value is never used (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidConstexpr",
                "shortDescription": {
                  "text": "invalid-constexpr clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp2bCompat",
                "shortDescription": {
                  "text": "pre-c++2b-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcMissingHash",
                "shortDescription": {
                  "text": "objc-missing-hash clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClearAttributeIsObsolete.All",
                "shortDescription": {
                  "text": "Obsolete tags and attributes (attribute 'clear' is obsolete)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingDeclarations",
                "shortDescription": {
                  "text": "missing-declarations clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableSwitchArmDueToIntegerAnalysis",
                "shortDescription": {
                  "text": "Heuristically unreachable switch arm according to integer analysis"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceDoWhileStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'do-while' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppWrongSlashesInIncludeDirective",
                "shortDescription": {
                  "text": "Use preferred include directive style (slash symbol used in #include directive does not match code style settings)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyCanBeMadeInitOnly.Global",
                "shortDescription": {
                  "text": "Property can be made init-only (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseWithExpressionToCopyTuple",
                "shortDescription": {
                  "text": "Use 'with' expression to copy tuple"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantPreprocessor",
                "shortDescription": {
                  "text": "readability-redundant-preprocessor clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestVarOrType_SimpleTypes",
                "shortDescription": {
                  "text": "Use preferred 'var' style (when type is simple)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantQualifier",
                "shortDescription": {
                  "text": "Redundant qualifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantGridSpan",
                "shortDescription": {
                  "text": "Single-cell grid column/row span is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerDeadcodeDeadStores",
                "shortDescription": {
                  "text": "deadcode.DeadStores clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceOverridingFunctionStyle",
                "shortDescription": {
                  "text": "Use preferred overriding function style (enforce overriding function style)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCtadMaybeUnsupported",
                "shortDescription": {
                  "text": "ctad-maybe-unsupported clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInlineAsm",
                "shortDescription": {
                  "text": "inline-asm clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotateNotNullParameter",
                "shortDescription": {
                  "text": "Declaration nullability inferred (parameter is inferred to be not null)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeThisQualifier",
                "shortDescription": {
                  "text": "Add/remove 'this.' qualifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcRetainCycles",
                "shortDescription": {
                  "text": "arc-retain-cycles clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNewDeleteOperators",
                "shortDescription": {
                  "text": "hicpp-new-delete-operators clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseUsing",
                "shortDescription": {
                  "text": "modernize-use-using clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneTooSmallLoopVariable",
                "shortDescription": {
                  "text": "bugprone-too-small-loop-variable clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscNonPrivateMemberVariablesInClasses",
                "shortDescription": {
                  "text": "misc-non-private-member-variables-in-classes clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticXorUsedAsPow",
                "shortDescription": {
                  "text": "xor-used-as-pow clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityIdentifierLength",
                "shortDescription": {
                  "text": "readability-identifier-length clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftRedeclareStatic",
                "shortDescription": {
                  "text": "microsoft-redeclare-static clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonPowerOfTwoAlignment",
                "shortDescription": {
                  "text": "non-power-of-two-alignment clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitArraySize",
                "shortDescription": {
                  "text": "Redundant explicit size specification in array creation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDoublePromotion",
                "shortDescription": {
                  "text": "double-promotion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionComplexityOverflow",
                "shortDescription": {
                  "text": "Function body is too complex to analyze"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReorderCtor",
                "shortDescription": {
                  "text": "reorder-ctor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PolymorphicFieldLikeEventInvocation",
                "shortDescription": {
                  "text": "Invocation of polymorphic field-like event"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadEmptyBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around empty braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingLlvmCastValue",
                "shortDescription": {
                  "text": "apiModeling.llvm.CastValue clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCast",
                "shortDescription": {
                  "text": "Redundant cast"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralAsInterpolationArgument",
                "shortDescription": {
                  "text": "String literal can be inlined"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedStaticAnalyzerFlag",
                "shortDescription": {
                  "text": "deprecated-static-analyzer-flag clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerFuchsiaHandleChecker",
                "shortDescription": {
                  "text": "fuchsia.HandleChecker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowField",
                "shortDescription": {
                  "text": "shadow-field clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantWithExpression",
                "shortDescription": {
                  "text": "Empty 'with' expression is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExtraQualification",
                "shortDescription": {
                  "text": "extra-qualification clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAutoStorageClass",
                "shortDescription": {
                  "text": "auto-storage-class clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNoexceptMove",
                "shortDescription": {
                  "text": "hicpp-noexcept-move clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToVbAutoPropertyWhenPossible",
                "shortDescription": {
                  "text": "Convert property to auto-property when possible"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.UnusedElementDueToConfigSourceAttribute",
                "shortDescription": {
                  "text": "Redundant element or attribute because of 'configSource' attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around expression braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteModule",
                "shortDescription": {
                  "text": "incomplete-module clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingKeywordThrow",
                "shortDescription": {
                  "text": "May be missing keyword 'throw'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonInlineFunctionDefinitionInHeaderFile",
                "shortDescription": {
                  "text": "Non-inline function definition in a header file"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMemberHierarchy.Local",
                "shortDescription": {
                  "text": "Type member is only used in overrides (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuStaticFloatInit",
                "shortDescription": {
                  "text": "gnu-static-float-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAssume",
                "shortDescription": {
                  "text": "assume clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatUnnamedTypeTemplateArgs",
                "shortDescription": {
                  "text": "c++98-compat-unnamed-type-template-args clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1717",
                "shortDescription": {
                  "text": "Assignment made to same variable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1711",
                "shortDescription": {
                  "text": "XML comment has a 'typeparam' tag for 'TypeParameter', but there is no type parameter by that name"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1712",
                "shortDescription": {
                  "text": "Type parameter has no matching typeparam tag in the XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSimpleAssignment.False",
                "shortDescription": {
                  "text": "Replace with simple assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidComparisonInTempFailureRetry",
                "shortDescription": {
                  "text": "android-comparison-in-temp-failure-retry clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1710",
                "shortDescription": {
                  "text": "Duplicate typeparam tag in XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20CompatPedantic",
                "shortDescription": {
                  "text": "c++20-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithVirtualMembersNeverInherited.Local",
                "shortDescription": {
                  "text": "Class with virtual (overridable) members never inherited (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertOop57Cpp",
                "shortDescription": {
                  "text": "cert-oop57-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseResultPropertyIsObsolete",
                "shortDescription": {
                  "text": "NUnit. Test case Result property is obsolete."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl21Cpp",
                "shortDescription": {
                  "text": "cert-dcl21-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4ProbableMemoryIssuesWithUObjectsInContainer",
                "shortDescription": {
                  "text": "Objects stored in non-uproperty member can be destroyed during garbage collection, resulting in stale pointers"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrintfRiskyFormat",
                "shortDescription": {
                  "text": "Possibly invalid printf format specifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UsePositionalDeconstructionPattern",
                "shortDescription": {
                  "text": "Use positional deconstruction pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.SharedStaticUnmanagedType",
                "shortDescription": {
                  "text": "Shared static type parameter requires the unmanaged constraint"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPadded",
                "shortDescription": {
                  "text": "padded clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLogicalConditionalExpressionOperand",
                "shortDescription": {
                  "text": "Redundant operand in logical conditional expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLanguageExtensionToken",
                "shortDescription": {
                  "text": "language-extension-token clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAtomicCompoundOperator",
                "shortDescription": {
                  "text": "Suspicious 'volatile' field usage: compound operation is not atomic. 'Interlocked' class can be used instead."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHighlighting",
                "shortDescription": {
                  "text": "Unknown clang-tidy checks"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedButSetVariable",
                "shortDescription": {
                  "text": "unused-but-set-variable clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalObjcBoolCompare",
                "shortDescription": {
                  "text": "tautological-objc-bool-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverriddenWithSameValue",
                "shortDescription": {
                  "text": "Resource is overridden with identical value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asxx.PathError",
                "shortDescription": {
                  "text": "Path error"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMisspelledAssumption",
                "shortDescription": {
                  "text": "misspelled-assumption clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseTrailingReturnType",
                "shortDescription": {
                  "text": "modernize-use-trailing-return-type clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeNamespaceBody",
                "shortDescription": {
                  "text": "Use preferred namespace body style"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftStaticAssert",
                "shortDescription": {
                  "text": "microsoft-static-assert clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastQual",
                "shortDescription": {
                  "text": "cast-qual clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyCanBeMadeInitOnly.Local",
                "shortDescription": {
                  "text": "Property can be made init-only (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11Compat",
                "shortDescription": {
                  "text": "c++11-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftEnumValue",
                "shortDescription": {
                  "text": "microsoft-enum-value clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUnusedRaii",
                "shortDescription": {
                  "text": "bugprone-unused-raii clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMisplacedOperatorInStrlenInAlloc",
                "shortDescription": {
                  "text": "bugprone-misplaced-operator-in-strlen-in-alloc clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShorten64To32",
                "shortDescription": {
                  "text": "shorten-64-to-32 clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecEpollCreate",
                "shortDescription": {
                  "text": "android-cloexec-epoll-create clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.EventNotResolved",
                "shortDescription": {
                  "text": "Unknown event"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticParenthesesEquality",
                "shortDescription": {
                  "text": "parentheses-equality clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUninitializedDependentBaseClass",
                "shortDescription": {
                  "text": "Uninitialized dependent base class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyLinqExpressionUseMinByAndMaxBy",
                "shortDescription": {
                  "text": "Use 'MinBy' or 'MaxBy' instead of ordering and taking 'First' or 'Last'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseAutoForNumeric",
                "shortDescription": {
                  "text": "Use preferred 'auto' style (numeric type can be replaced with auto)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleAssignment.1",
                "shortDescription": {
                  "text": "Replace with single assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleAssignment.2",
                "shortDescription": {
                  "text": "Replace with single assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTypeAliasNeverUsed",
                "shortDescription": {
                  "text": "Type alias is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantReadonlyModifier",
                "shortDescription": {
                  "text": "Redundant 'readonly' modifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelfAssignField",
                "shortDescription": {
                  "text": "self-assign-field clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConditionalTypeMismatch",
                "shortDescription": {
                  "text": "conditional-type-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPassValueParameterByConstReference",
                "shortDescription": {
                  "text": "Pass value parameters by const reference"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantArrayLowerBoundSpecification",
                "shortDescription": {
                  "text": "Redundant array lower bound specification"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBoostUseToString",
                "shortDescription": {
                  "text": "boost-use-to-string clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JoinDeclarationAndInitializer",
                "shortDescription": {
                  "text": "Join local variable declaration and assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.SyntaxError",
                "shortDescription": {
                  "text": "Syntax error"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneThrowKeywordMissing",
                "shortDescription": {
                  "text": "bugprone-throw-keyword-missing clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchStatementMissingSomeEnumCasesNoDefault",
                "shortDescription": {
                  "text": "Some values of the enum are not processed inside 'switch' statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantPatternParentheses",
                "shortDescription": {
                  "text": "Remove redundant pattern-matching parentheses"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToPrimaryConstructor",
                "shortDescription": {
                  "text": "Convert record constructor into primary constructor"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyZirconTemporaryObjects",
                "shortDescription": {
                  "text": "zircon-temporary-objects clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGlobalConstructors",
                "shortDescription": {
                  "text": "global-constructors clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantLinebreak",
                "shortDescription": {
                  "text": "Incorrect line breaks (line break is redundant elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantTypenameKeyword",
                "shortDescription": {
                  "text": "Redundant 'typename' keyword"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDoxygenSyntaxError",
                "shortDescription": {
                  "text": "Syntax error in doxygen comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UselessComparisonToIntegralConstant",
                "shortDescription": {
                  "text": "Comparison to integral constant is useless"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantElseKeyword",
                "shortDescription": {
                  "text": "Redundant 'else' keyword"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesSpecialMemberFunctions",
                "shortDescription": {
                  "text": "cppcoreguidelines-special-member-functions clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyConstructor",
                "shortDescription": {
                  "text": "Empty constructor"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringIndexOfIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesSlicing",
                "shortDescription": {
                  "text": "cppcoreguidelines-slicing clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringIndexOfIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscMisleadingBidirectional",
                "shortDescription": {
                  "text": "misc-misleading-bidirectional clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringIndexOfIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityConvertMemberFunctionsToStatic",
                "shortDescription": {
                  "text": "readability-convert-member-functions-to-static clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticMemberInGenericType",
                "shortDescription": {
                  "text": "Static field or auto-property in generic type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReservedMacroIdentifier",
                "shortDescription": {
                  "text": "reserved-macro-identifier clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppVararg",
                "shortDescription": {
                  "text": "hicpp-vararg clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscDefinitionsInHeaders",
                "shortDescription": {
                  "text": "misc-definitions-in-headers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantUsingDirective.Global",
                "shortDescription": {
                  "text": "Redundant global using directive"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseIndexedProperty",
                "shortDescription": {
                  "text": "Use indexed property"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscNewDeleteOverloads",
                "shortDescription": {
                  "text": "misc-new-delete-overloads clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedEnumFloatConversion",
                "shortDescription": {
                  "text": "deprecated-enum-float-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantComplexityInComparison",
                "shortDescription": {
                  "text": "Expression can be simplified"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRangeLoopBindReference",
                "shortDescription": {
                  "text": "range-loop-bind-reference clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneWrongIndex",
                "shortDescription": {
                  "text": "The index is missing in the build settings"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareToIsCultureSpecific",
                "shortDescription": {
                  "text": "String.CompareTo is culture-specific"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaNSAutoreleasePool",
                "shortDescription": {
                  "text": "osx.cocoa.NSAutoreleasePool clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventNeverInvoked",
                "shortDescription": {
                  "text": "Event never invoked"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverridingMethodMismatch",
                "shortDescription": {
                  "text": "overriding-method-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeObjectCreationWhenTypeNotEvident",
                "shortDescription": {
                  "text": "Use preferred style of 'new' expression when created type is not evident"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyForStatement",
                "shortDescription": {
                  "text": "Empty 'for' loop is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.NotResolved",
                "shortDescription": {
                  "text": "Unknown symbol"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedFriend",
                "shortDescription": {
                  "text": "unsupported-friend clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSpuriouslyWakeUpFunctions",
                "shortDescription": {
                  "text": "bugprone-spuriously-wake-up-functions clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecAccept4",
                "shortDescription": {
                  "text": "android-cloexec-accept4 clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaDealloc",
                "shortDescription": {
                  "text": "osx.cocoa.Dealloc clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntDivisionByZero",
                "shortDescription": {
                  "text": "Division by zero in at least one execution path"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumTooLarge",
                "shortDescription": {
                  "text": "enum-too-large clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProfileInstrUnprofiled",
                "shortDescription": {
                  "text": "profile-instr-unprofiled clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedBranch",
                "shortDescription": {
                  "text": "core.uninitialized.Branch clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaVariadicMethodTypes",
                "shortDescription": {
                  "text": "osx.cocoa.VariadicMethodTypes clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmlibcCalleeNamespace",
                "shortDescription": {
                  "text": "llvmlibc-callee-namespace clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationComparison",
                "shortDescription": {
                  "text": "abseil-duration-comparison clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAutoVarId",
                "shortDescription": {
                  "text": "auto-var-id clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleOrDefault.4",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleOrDefault.2",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleOrDefault.3",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModuleFileExtension",
                "shortDescription": {
                  "text": "module-file-extension clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstLoadingManagedType",
                "shortDescription": {
                  "text": "Loading managed type is not supported"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppFunctionSize",
                "shortDescription": {
                  "text": "hicpp-function-size clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnTypeCanBeEnumerable.Local",
                "shortDescription": {
                  "text": "Return type can be IEnumerable<T> (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedMemberFunction",
                "shortDescription": {
                  "text": "unused-member-function clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExtraTokens",
                "shortDescription": {
                  "text": "extra-tokens clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleOrDefault.1",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticProblemInText",
                "shortDescription": {
                  "text": "Cannot access static symbol in text argument"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ActionRoutePrefixCanBeExtractedToControllerRoute",
                "shortDescription": {
                  "text": "Action's route prefix can be extracted to controller's route"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAixCompat",
                "shortDescription": {
                  "text": "aix-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InterpolatedStringExpressionIsNotIFormattable",
                "shortDescription": {
                  "text": "Formatting is specified, but interpolated string expression is not IFormattable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverridingTOption",
                "shortDescription": {
                  "text": "overriding-t-option clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvertIf",
                "shortDescription": {
                  "text": "Invert 'if' statement to reduce nesting"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedField.Compiler",
                "shortDescription": {
                  "text": "Field is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaOverloadedOperator",
                "shortDescription": {
                  "text": "fuchsia-overloaded-operator clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastOfSelType",
                "shortDescription": {
                  "text": "cast-of-sel-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectCreationAsStatement",
                "shortDescription": {
                  "text": "Possible unassigned object created by 'new' expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntVariableOverflowInUncheckedContext",
                "shortDescription": {
                  "text": "Possible overflow in unchecked context"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullnessAttributeWithNullableReferenceTypes",
                "shortDescription": {
                  "text": "[NotNull] or [CanBeNull] attribute is applied to a type that already has the same annotation from nullable reference types"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.PathError",
                "shortDescription": {
                  "text": "Path error"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceFasterStringFind",
                "shortDescription": {
                  "text": "performance-faster-string-find clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionIsAlwaysTrueOrFalse",
                "shortDescription": {
                  "text": "Expression is always 'true' or always 'false'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringPlusInt",
                "shortDescription": {
                  "text": "string-plus-int clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstructorInitializerLoop",
                "shortDescription": {
                  "text": "Possible cyclic constructor call"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithFirstOrDefault",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseAssociativeContains",
                "shortDescription": {
                  "text": "'contains' member function can be used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMultichar",
                "shortDescription": {
                  "text": "multichar clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppMemberInit",
                "shortDescription": {
                  "text": "hicpp-member-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.9",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantAccessSpecifiers",
                "shortDescription": {
                  "text": "readability-redundant-access-specifiers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidOffsetof",
                "shortDescription": {
                  "text": "invalid-offsetof clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPrivateExtern",
                "shortDescription": {
                  "text": "private-extern clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.1",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.2",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.3",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.4",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.5",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticLocalInInline",
                "shortDescription": {
                  "text": "static-local-in-inline clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.6",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.7",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.8",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessRightsInText",
                "shortDescription": {
                  "text": "Cannot access symbol in text argument"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcNonPodMemaccess",
                "shortDescription": {
                  "text": "arc-non-pod-memaccess clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11InlineNamespace",
                "shortDescription": {
                  "text": "c++11-inline-namespace clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.RedundantAddNamespaceTag",
                "shortDescription": {
                  "text": "Redundant add namespace element"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeMakeUnique",
                "shortDescription": {
                  "text": "modernize-make-unique clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonExplicitConvertingConstructor",
                "shortDescription": {
                  "text": "Non-explicit converting constructor"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleBuildUsingNamespace",
                "shortDescription": {
                  "text": "google-build-using-namespace clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleRuntimeInt",
                "shortDescription": {
                  "text": "google-runtime-int clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContractAnnotationNotParsed",
                "shortDescription": {
                  "text": "Problem in contract annotation definition"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalBitwiseCompare",
                "shortDescription": {
                  "text": "tautological-bitwise-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithLastOrDefault",
                "shortDescription": {
                  "text": "Replace with LastOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithExpressionInsteadOfInitializer",
                "shortDescription": {
                  "text": "'with' expression is used instead of object initializer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullPointerSubtraction",
                "shortDescription": {
                  "text": "null-pointer-subtraction clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceObjectPatternWithVarPattern",
                "shortDescription": {
                  "text": "Replace object pattern not performing any additional checks with 'var' pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitArrayCreation",
                "shortDescription": {
                  "text": "Redundant explicit type in array creation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyIIf",
                "shortDescription": {
                  "text": "Simplify 'IIf'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PartialTypeWithSinglePart",
                "shortDescription": {
                  "text": "Redundant 'partial' modifier on type declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownPragmas",
                "shortDescription": {
                  "text": "unknown-pragmas clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeInternal",
                "shortDescription": {
                  "text": "Member or type can be made internal (friend)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDisabledMacroExpansion",
                "shortDescription": {
                  "text": "disabled-macro-expansion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSharedPtrArrayMismatch",
                "shortDescription": {
                  "text": "bugprone-shared-ptr-array-mismatch clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNamedParameter",
                "shortDescription": {
                  "text": "hicpp-named-parameter clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseFormatSpecifierInFormatString",
                "shortDescription": {
                  "text": "Use format specifier in format strings"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingSpace",
                "shortDescription": {
                  "text": "Incorrect spacing (space is missing elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator",
                "shortDescription": {
                  "text": "Foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaMissingSuperCall",
                "shortDescription": {
                  "text": "osx.cocoa.MissingSuperCall clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HeuristicUnreachableCode",
                "shortDescription": {
                  "text": "Heuristically unreachable code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppressNullableWarningExpression",
                "shortDescription": {
                  "text": "Redundant nullable warning suppression expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneParentVirtualCall",
                "shortDescription": {
                  "text": "bugprone-parent-virtual-call clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeAccessorOwnerBody",
                "shortDescription": {
                  "text": "Use preferred body style (convert into property, indexer, or event with preferred body style)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedPositionalProperty.Global",
                "shortDescription": {
                  "text": "Non-accessed positional property (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatiblePropertyType",
                "shortDescription": {
                  "text": "incompatible-property-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ViewNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown view)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityAvoidUnderscoreInGoogletestName",
                "shortDescription": {
                  "text": "google-readability-avoid-underscore-in-googletest-name clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusPureVirtualCall",
                "shortDescription": {
                  "text": "cplusplus.PureVirtualCall clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadAngleBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around angle brackets)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatMixedArgs",
                "shortDescription": {
                  "text": "Positional and non-positional arguments in the same boost::format call"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceFunctionDeclarationStyle",
                "shortDescription": {
                  "text": "Use preferred declaration style (enforce function declaration style)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullConversion",
                "shortDescription": {
                  "text": "null-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPedanticCoreFeatures",
                "shortDescription": {
                  "text": "pedantic-core-features clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceNoAutomaticMove",
                "shortDescription": {
                  "text": "performance-no-automatic-move clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVexingParse",
                "shortDescription": {
                  "text": "vexing-parse clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42505",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect. It is applied with an invalid parameter name."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtReinterpretCastFromNullptr",
                "shortDescription": {
                  "text": "Casting from nullptr to pointer type with reinterpret_cast is non-standard Microsoft C++ extension"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableSwitchCaseDueToIntegerAnalysis",
                "shortDescription": {
                  "text": "Heuristically unreachable case according to integer analysis"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesInterfacesGlobalInit",
                "shortDescription": {
                  "text": "cppcoreguidelines-interfaces-global-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42504",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToConstant.Local",
                "shortDescription": {
                  "text": "Convert local variable or field into constant (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRangeLoopConstruct",
                "shortDescription": {
                  "text": "range-loop-construct clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OtherTagsInsideScript1",
                "shortDescription": {
                  "text": "Script tag errors (other tags inside <script> - possibly unclosed <script>)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeParameterCanBeVariant",
                "shortDescription": {
                  "text": "Type parameter could be declared as covariant or contravariant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OtherTagsInsideScript2",
                "shortDescription": {
                  "text": "Script tag errors (other tags inside <script> - possibly unclosed <script>)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneStringConstructor",
                "shortDescription": {
                  "text": "bugprone-string-constructor clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedObjcIsaUsage",
                "shortDescription": {
                  "text": "deprecated-objc-isa-usage clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArgumentOutsideRange",
                "shortDescription": {
                  "text": "argument-outside-range clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToVbAutoProperty",
                "shortDescription": {
                  "text": "Convert property to auto-property"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertEnv33C",
                "shortDescription": {
                  "text": "cert-env33-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseEqualsDefault",
                "shortDescription": {
                  "text": "modernize-use-equals-default clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSentinel",
                "shortDescription": {
                  "text": "sentinel clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityNamedParameter",
                "shortDescription": {
                  "text": "readability-named-parameter clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr58Cpp",
                "shortDescription": {
                  "text": "cert-err58-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelfAssign",
                "shortDescription": {
                  "text": "self-assign clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MathAbsMethodIsRedundant",
                "shortDescription": {
                  "text": "Math.Abs() argument is always non-negative"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuStatementExpression",
                "shortDescription": {
                  "text": "gnu-statement-expression clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassWithVirtualMembersNeverInherited.Global",
                "shortDescription": {
                  "text": "Class with virtual (overridable) members never inherited (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUninitializedNonStaticDataMember",
                "shortDescription": {
                  "text": "Non-static data member is uninitialized"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSuperClassMethodMismatch",
                "shortDescription": {
                  "text": "super-class-method-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaClassRelease",
                "shortDescription": {
                  "text": "osx.cocoa.ClassRelease clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationFactoryFloat",
                "shortDescription": {
                  "text": "abseil-duration-factory-float clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityCasting",
                "shortDescription": {
                  "text": "google-readability-casting clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Where",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Where() (replace with OfType(Of ..)().Where(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToFirstOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to FirstOrDefault(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDanglingField",
                "shortDescription": {
                  "text": "dangling-field clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__WME006",
                "shortDescription": {
                  "text": "Namespace should be default namespace of this project"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredBaseTypesConflict",
                "shortDescription": {
                  "text": "Required base type conflicting another type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAvailability",
                "shortDescription": {
                  "text": "availability clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConversion",
                "shortDescription": {
                  "text": "conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestDiscardDeclarationVarStyle",
                "shortDescription": {
                  "text": "Use preferred style for discard declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentationPedantic",
                "shortDescription": {
                  "text": "documentation-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntConversion",
                "shortDescription": {
                  "text": "int-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryWhitespace",
                "shortDescription": {
                  "text": "Unnecessary whitespace at the end of line"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedParameter.Local",
                "shortDescription": {
                  "text": "Unused parameter (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseWithExpressionToCopyRecord",
                "shortDescription": {
                  "text": "Use 'with' expression to copy record"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnumUnderlyingTypeIsInt",
                "shortDescription": {
                  "text": "Underlying type of enum is 'int'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMistakenArgument",
                "shortDescription": {
                  "text": "Possible mistaken argument"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuDesignator",
                "shortDescription": {
                  "text": "gnu-designator clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalOverlapCompare",
                "shortDescription": {
                  "text": "tautological-overlap-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationConversionCast",
                "shortDescription": {
                  "text": "abseil-duration-conversion-cast clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertOop54Cpp",
                "shortDescription": {
                  "text": "cert-oop54-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityMakeMemberFunctionConst",
                "shortDescription": {
                  "text": "readability-make-member-function-const clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProtocolPropertySynthesisAmbiguity",
                "shortDescription": {
                  "text": "protocol-property-synthesis-ambiguity clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownAttributes",
                "shortDescription": {
                  "text": "unknown-attributes clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvalidXmlDocComment",
                "shortDescription": {
                  "text": "Invalid XML documentation comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8619",
                "shortDescription": {
                  "text": "Nullability of reference types in source type doesn't match target type."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8618",
                "shortDescription": {
                  "text": "Non-nullable member is uninitialized."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8617",
                "shortDescription": {
                  "text": "Nullability of reference types in type of parameter doesn't match implemented member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8616",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match implemented member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8615",
                "shortDescription": {
                  "text": "Nullability of reference types in type doesn't match implemented member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8614",
                "shortDescription": {
                  "text": "Nullability of reference types in type of parameter doesn't match implicitly implemented member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8613",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match implicitly implemented member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFortifySource",
                "shortDescription": {
                  "text": "fortify-source clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8612",
                "shortDescription": {
                  "text": "Nullability of reference types in type doesn't match implicitly implemented member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8611",
                "shortDescription": {
                  "text": "Nullability of reference types in type of parameter doesn't match partial method declaration."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8610",
                "shortDescription": {
                  "text": "Nullability of reference types in type of parameter doesn't match overridden member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TailRecursiveCall",
                "shortDescription": {
                  "text": "Tail recursive call can be replaced with loop"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseTypeOfIsOperator.1",
                "shortDescription": {
                  "text": "Use 'TypeOf .. Is ..' operator"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseTypeOfIsOperator.2",
                "shortDescription": {
                  "text": "Use 'TypeOf .. Is ..' operator"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncrementBool",
                "shortDescription": {
                  "text": "increment-bool clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8629",
                "shortDescription": {
                  "text": "Nullable value type may be null."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8625",
                "shortDescription": {
                  "text": "Cannot convert null literal to non-nullable reference type."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8624",
                "shortDescription": {
                  "text": "Argument cannot be used as an output for parameter due to differences in the nullability of reference types."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnrealHeaderToolWarning",
                "shortDescription": {
                  "text": "UnrealHeaderTool warnings"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "UnrealHeaderTool",
                      "index": 58,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8622",
                "shortDescription": {
                  "text": "Nullability of reference types in type of a parameter doesn't match the target delegate (possibly because of nullability attributes)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8621",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match the target delegate (possibly because of nullability attributes)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedComparison",
                "shortDescription": {
                  "text": "unused-comparison clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8620",
                "shortDescription": {
                  "text": "Argument cannot be used for corresponding parameter due to differences in the nullability of reference types."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadExpressionBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around expression braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalParameterRefOut",
                "shortDescription": {
                  "text": "'ref' or 'out' parameter with [Optional] attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantSerializeFieldAttribute",
                "shortDescription": {
                  "text": "Redundant attribute usage (redundant 'SerializeField' attribute)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseWithExpressionToCopyAnonymousObject",
                "shortDescription": {
                  "text": "Use 'with' expression to copy anonymous object"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToAny",
                "shortDescription": {
                  "text": "Replace with single call to Any(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantControlFlow",
                "shortDescription": {
                  "text": "readability-redundant-control-flow clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReturnStdMove",
                "shortDescription": {
                  "text": "return-std-move clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.NonPublicMethodWithTestAttribute",
                "shortDescription": {
                  "text": "NUnit. Non-public test method."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppForLoopCanBeReplacedWithWhile",
                "shortDescription": {
                  "text": "For-loop can be replaced with while-loop"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotateNotNullTypeMember",
                "shortDescription": {
                  "text": "Declaration nullability inferred (type member is inferred to be not null)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseVerbatimString",
                "shortDescription": {
                  "text": "Literal length can be reduced by using verbatim string"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUserDefinedWarnings",
                "shortDescription": {
                  "text": "user-defined-warnings clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.SingleOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().SingleOrDefault() (replace with OfType(Of ..)().SingleOrDefault(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17Extensions",
                "shortDescription": {
                  "text": "c++17-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.SingleOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().SingleOrDefault() (replace with OfType(Of ..)().SingleOrDefault())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8609",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match overridden member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8608",
                "shortDescription": {
                  "text": "Nullability of reference types in type doesn't match overridden member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcAvoidNserrorInit",
                "shortDescription": {
                  "text": "objc-avoid-nserror-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8607",
                "shortDescription": {
                  "text": "A possible null value may not be used for a type marked with [NotNull] or [DisallowNull]."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnusedIncludeDirective",
                "shortDescription": {
                  "text": "Possibly unused #include directive"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIMktemp",
                "shortDescription": {
                  "text": "security.insecureAPI.mktemp clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8605",
                "shortDescription": {
                  "text": "Unboxing a possibly null value."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReturnTypeCLinkage",
                "shortDescription": {
                  "text": "return-type-c-linkage clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8604",
                "shortDescription": {
                  "text": "Possible null reference argument for a parameter."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8603",
                "shortDescription": {
                  "text": "Possible null reference return."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8602",
                "shortDescription": {
                  "text": "Dereference of a possibly null reference."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8601",
                "shortDescription": {
                  "text": "Possible null reference assignment."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8600",
                "shortDescription": {
                  "text": "Converting null literal or possible null value to non-nullable type."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedVariable.Compiler",
                "shortDescription": {
                  "text": "Non-accessed local variable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17Compat",
                "shortDescription": {
                  "text": "c++17-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreC2xCompatPedantic",
                "shortDescription": {
                  "text": "pre-c2x-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBooleanIncrementExpression",
                "shortDescription": {
                  "text": "Incrementing expression of type bool"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWeakTemplateVtables",
                "shortDescription": {
                  "text": "weak-template-vtables clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCallToPureVirtualFromCtorDtor",
                "shortDescription": {
                  "text": "call-to-pure-virtual-from-ctor-dtor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptyFinallyBlock",
                "shortDescription": {
                  "text": "Redundant empty finally block"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8656",
                "shortDescription": {
                  "text": "Call to a non-readonly member from a 'readonly' member results in an implicit copy of 'this'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8655",
                "shortDescription": {
                  "text": "The switch expression does not handle some null inputs (it is not exhaustive)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionNeverReturns",
                "shortDescription": {
                  "text": "Function never returns"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneAssignmentInIfCondition",
                "shortDescription": {
                  "text": "bugprone-assignment-in-if-condition clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppCStyleCast",
                "shortDescription": {
                  "text": "C-style cast is used instead of a C++ cast"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14AttributeExtensions",
                "shortDescription": {
                  "text": "c++14-attribute-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr09Cpp",
                "shortDescription": {
                  "text": "cert-err09-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8669",
                "shortDescription": {
                  "text": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterNeverUsed",
                "shortDescription": {
                  "text": "Parameter is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8667",
                "shortDescription": {
                  "text": "Partial method declarations have inconsistent nullability for type parameter."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadowIvar",
                "shortDescription": {
                  "text": "shadow-ivar clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatPedantic",
                "shortDescription": {
                  "text": "format-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousMissingComma",
                "shortDescription": {
                  "text": "bugprone-suspicious-missing-comma clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceSubstringWithRangeIndexer",
                "shortDescription": {
                  "text": "Replace 'Substring' with range indexer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleObjcAvoidThrowingException",
                "shortDescription": {
                  "text": "google-objc-avoid-throwing-exception clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInconsistentMissingDestructorOverride",
                "shortDescription": {
                  "text": "inconsistent-missing-destructor-override clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmas",
                "shortDescription": {
                  "text": "pragmas clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8634",
                "shortDescription": {
                  "text": "Nullability of type argument doesn't match 'class' constraint."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8633",
                "shortDescription": {
                  "text": "Nullability mismatch in constraints for type parameter."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8632",
                "shortDescription": {
                  "text": "The annotation for nullable reference types should only be used in code within a '#nullable' annotations context."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscRedundantExpression",
                "shortDescription": {
                  "text": "misc-redundant-expression clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8631",
                "shortDescription": {
                  "text": "Nullability of type argument doesn't match constraint type."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTypenameMissing",
                "shortDescription": {
                  "text": "typename-missing clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLocalVariableMightNotBeInitialized",
                "shortDescription": {
                  "text": "Local variable might not be initialized"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyVerbose",
                "shortDescription": {
                  "text": "thread-safety-verbose clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PrivateFieldCanBeConvertedToLocalVariable",
                "shortDescription": {
                  "text": "Private field can be converted into local variable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnexpectedAttribute",
                "shortDescription": {
                  "text": "The attribute is unknown and will be ignored"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLocalVariableMayBeConst",
                "shortDescription": {
                  "text": "Local variable can be made const"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnrealHeaderToolError",
                "shortDescription": {
                  "text": "UnrealHeaderTool errors"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "UnrealHeaderTool",
                      "index": 58,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseAuto",
                "shortDescription": {
                  "text": "hicpp-use-auto clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilNoInternalDependencies",
                "shortDescription": {
                  "text": "abseil-no-internal-dependencies clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneReservedIdentifier",
                "shortDescription": {
                  "text": "bugprone-reserved-identifier clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndeclaredSelector",
                "shortDescription": {
                  "text": "undeclared-selector clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppInvalidLineContinuation",
                "shortDescription": {
                  "text": "Backslash and newline are separated by space"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringCompare",
                "shortDescription": {
                  "text": "string-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerBoolConversion",
                "shortDescription": {
                  "text": "pointer-bool-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8645",
                "shortDescription": {
                  "text": "Type is already listed in the interface list with different nullability of reference types."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8644",
                "shortDescription": {
                  "text": "Nullability of reference types in interface implemented by the base type doesn't match."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8643",
                "shortDescription": {
                  "text": "Nullability of reference types in explicit interface specifier doesn't match interface implemented by the type."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLocalFunctionReturnValue",
                "shortDescription": {
                  "text": "Local function return value is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtBindingRValueToLvalueReference",
                "shortDescription": {
                  "text": "Binding r-value to l-value reference is non-standard Microsoft C++ extension"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantModifiersAttribute",
                "shortDescription": {
                  "text": "Redundant modifiers attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityContainerSizeEmpty",
                "shortDescription": {
                  "text": "readability-container-size-empty clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentlySynchronizedField",
                "shortDescription": {
                  "text": "Inconsistent synchronization on field"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcRepeatedUseOfWeak",
                "shortDescription": {
                  "text": "arc-repeated-use-of-weak clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StructCanBeMadeReadOnly",
                "shortDescription": {
                  "text": "Struct can be made readonly"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseConfigureAwaitFalse",
                "shortDescription": {
                  "text": "Missing '.ConfigureAwait(false)' in library code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleBuildExplicitMakePair",
                "shortDescription": {
                  "text": "google-build-explicit-make-pair clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaRetainCount",
                "shortDescription": {
                  "text": "osx.cocoa.RetainCount clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestBaseTypeForParameter",
                "shortDescription": {
                  "text": "Parameter can be declared with the base type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppIncorrectBlankLinesNearBraces",
                "shortDescription": {
                  "text": "Incorrect blank lines (incorrect number of blank lines near braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArrayParameter",
                "shortDescription": {
                  "text": "array-parameter clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullPointerArithmetic",
                "shortDescription": {
                  "text": "null-pointer-arithmetic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.RouteParameterConstraintNotResolved",
                "shortDescription": {
                  "text": "Route parameter constraint not resolved"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneAssertSideEffect",
                "shortDescription": {
                  "text": "bugprone-assert-side-effect clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppImplicitDefaultConstructorNotAvailable",
                "shortDescription": {
                  "text": "Implicit default constructor is not available"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMemberHierarchy.Global",
                "shortDescription": {
                  "text": "Type member is only used in overrides (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.FirstOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().FirstOrDefault()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.FirstOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().FirstOrDefault() (replace with OfType<T>().FirstOrDefault(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppDeprecatedHeaders",
                "shortDescription": {
                  "text": "hicpp-deprecated-headers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIUncheckedReturn",
                "shortDescription": {
                  "text": "security.insecureAPI.UncheckedReturn clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTentativeDefinitionIncompleteType",
                "shortDescription": {
                  "text": "tentative-definition-incomplete-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0252,CS0253",
                "shortDescription": {
                  "text": "Possible unintended reference comparison"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatiblePointerTypesDiscardsQualifiers",
                "shortDescription": {
                  "text": "incompatible-pointer-types-discards-qualifiers clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMustBePublicVirtualToImplementInterface",
                "shortDescription": {
                  "text": "Method must be public and virtual to implement a C++/CLI interface member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFloatConversion",
                "shortDescription": {
                  "text": "implicit-float-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AspUnusedRegisterDirectiveHighlighting",
                "shortDescription": {
                  "text": "Unused register directive"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftCountNegative",
                "shortDescription": {
                  "text": "shift-count-negative clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyPrecise",
                "shortDescription": {
                  "text": "thread-safety-precise clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSignalHandler",
                "shortDescription": {
                  "text": "bugprone-signal-handler clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.AmbiguousMatchingConstraintConstructor",
                "shortDescription": {
                  "text": "More than one parameter constraint's constructor matched"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNotNullConstraint",
                "shortDescription": {
                  "text": "Redundant 'notnull' constraint on type parameter constrained by non-nullable base type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnsupportedRequiredBaseType",
                "shortDescription": {
                  "text": "BaseTypeRequired attribute supports only classes and interfaces"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClassCanBeFinal",
                "shortDescription": {
                  "text": "Class can be made final"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.InefficientPropertyAccess",
                "shortDescription": {
                  "text": "Repeated access of property on built in component is inefficient"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TabsAndSpacesMismatch",
                "shortDescription": {
                  "text": "Incorrect indent (tabs/spaces mismatch)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.DuplicateEventFunction",
                "shortDescription": {
                  "text": "Event function with the same name is already declared"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedVolatile",
                "shortDescription": {
                  "text": "deprecated-volatile clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatLocalTypeTemplateArgs",
                "shortDescription": {
                  "text": "c++98-compat-local-type-template-args clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAutoPropertyWithComputedProperty",
                "shortDescription": {
                  "text": "Replace auto-property with computed property"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceLockStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'lock' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftPureDefinition",
                "shortDescription": {
                  "text": "microsoft-pure-definition clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUESourceFileWithoutPredefinedMacros",
                "shortDescription": {
                  "text": "Unreal Engine source file without predefined Unreal macros"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceInefficientAlgorithm",
                "shortDescription": {
                  "text": "performance-inefficient-algorithm clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8670",
                "shortDescription": {
                  "text": "Object or collection initializer implicitly dereferences possibly null member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreNonnilStringConstants",
                "shortDescription": {
                  "text": "core.NonnilStringConstants clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeCstyleCast",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-cstyle-cast clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProfileInstrMissing",
                "shortDescription": {
                  "text": "profile-instr-missing clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstBoxingNotSupported",
                "shortDescription": {
                  "text": "Boxing is not supported"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclaratorNeverUsed",
                "shortDescription": {
                  "text": "Declarator is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantDiscardDesignation",
                "shortDescription": {
                  "text": "Redundant discard designation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitAtomicProperties",
                "shortDescription": {
                  "text": "implicit-atomic-properties clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRequiresSuperAttribute",
                "shortDescription": {
                  "text": "requires-super-attribute clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLocalFunction.Compiler",
                "shortDescription": {
                  "text": "Local function is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0659",
                "shortDescription": {
                  "text": "Class overrides Object.Equals(object o) but not Object.GetHashCode()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantMemberInitializer",
                "shortDescription": {
                  "text": "Redundant member initializer in constructor initialization list"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUEVersionFileDoesntExist",
                "shortDescription": {
                  "text": "Unreal Engine version file does not exist"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0657",
                "shortDescription": {
                  "text": "'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0658",
                "shortDescription": {
                  "text": "'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0652",
                "shortDescription": {
                  "text": "Comparison to integral constant is useless; the constant is outside the range of type 'type'."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToFirst",
                "shortDescription": {
                  "text": "Replace with single call to First(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1981",
                "shortDescription": {
                  "text": "Using 'is' to test compatibility with 'dynamic' is essentially identical to testing compatibility with 'Object' and will succeed for all non-null values"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIDeprecatedOrUnsafeBufferHandling",
                "shortDescription": {
                  "text": "security.insecureAPI.DeprecatedOrUnsafeBufferHandling clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveRedundantBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (remove redundant braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeStaticMemberQualifier",
                "shortDescription": {
                  "text": "Add/remove qualifier for static members"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPossiblyErroneousEmptyStatements",
                "shortDescription": {
                  "text": "Possibly erroneous empty statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareToIsCultureSpecific",
                "shortDescription": {
                  "text": "String.CompareTo is culture-specific"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClassIsIncomplete",
                "shortDescription": {
                  "text": "Use of an incomplete type inside a template"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl58Cpp",
                "shortDescription": {
                  "text": "cert-dcl58-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceUsingStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'using' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRedundantParens",
                "shortDescription": {
                  "text": "redundant-parens clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1998",
                "shortDescription": {
                  "text": "Async function without await expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUndelegatedConstructor",
                "shortDescription": {
                  "text": "bugprone-undelegated-constructor clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantEmptyDeclaration",
                "shortDescription": {
                  "text": "Redundant empty declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0665",
                "shortDescription": {
                  "text": "Assignment in conditional expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.SkinNotResolved",
                "shortDescription": {
                  "text": "Unknown skin"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingCharAsIntegerInConstructor",
                "shortDescription": {
                  "text": "Char is possibly unintentionally used as integer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleUnintendedQueryableAsEnumerable",
                "shortDescription": {
                  "text": "IQueryable is possibly unintentionally used as IEnumerable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticHeaderGuard",
                "shortDescription": {
                  "text": "header-guard clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedParameter",
                "shortDescription": {
                  "text": "unused-parameter clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.TagShouldBeSelfClosed",
                "shortDescription": {
                  "text": "Wrong closed tag"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8597",
                "shortDescription": {
                  "text": "Thrown value may be null."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCoroutine",
                "shortDescription": {
                  "text": "deprecated-coroutine clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleOrDefault",
                "shortDescription": {
                  "text": "Replace with SingleOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBlockCaptureAutoreleasing",
                "shortDescription": {
                  "text": "block-capture-autoreleasing clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimilarAnonymousTypeNearby",
                "shortDescription": {
                  "text": "Similar anonymous type detected nearby"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeLoopConvert",
                "shortDescription": {
                  "text": "modernize-loop-convert clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedField.Global",
                "shortDescription": {
                  "text": "Non-accessed field (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantHideInInspectorAttribute",
                "shortDescription": {
                  "text": "Redundant attribute usage (redundant 'HideInInspector' attribute)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnnecessaryWhitespace",
                "shortDescription": {
                  "text": "Incorrect spacing (redundant whitespaces at the end of a line)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMisplacedPointerArithmeticInAlloc",
                "shortDescription": {
                  "text": "bugprone-misplaced-pointer-arithmetic-in-alloc clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.LoadSceneUnknownSceneName",
                "shortDescription": {
                  "text": "There is no scene with the same name in the build settings"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.LastOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LastOrDefault() (replace with OfType<T>().LastOrDefault(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.LastOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LastOrDefault()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedVariable",
                "shortDescription": {
                  "text": "Non-accessed local variable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OutParameterValueIsAlwaysDiscarded.Local",
                "shortDescription": {
                  "text": "Parameter output value is always discarded (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0642",
                "shortDescription": {
                  "text": "Possible mistaken empty statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMoveForwardingReference",
                "shortDescription": {
                  "text": "bugprone-move-forwarding-reference clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.ModuleNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve module"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringEndsWithIsCultureSpecific",
                "shortDescription": {
                  "text": "String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalTernaryEqualBranch",
                "shortDescription": {
                  "text": "'?:' expression has identical true and false branches"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppAvoidGoto",
                "shortDescription": {
                  "text": "hicpp-avoid-goto clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospection",
                "shortDescription": {
                  "text": "deprecated-objc-pointer-introspection clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesOwningMemory",
                "shortDescription": {
                  "text": "cppcoreguidelines-owning-memory clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSemicolonBeforeMethodBody",
                "shortDescription": {
                  "text": "semicolon-before-method-body clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumCompareSwitch",
                "shortDescription": {
                  "text": "enum-compare-switch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeprecatedEntity",
                "shortDescription": {
                  "text": "Entity is deprecated"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedPrivateField",
                "shortDescription": {
                  "text": "unused-private-field clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppBracesAroundStatements",
                "shortDescription": {
                  "text": "hicpp-braces-around-statements clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0693",
                "shortDescription": {
                  "text": "Type parameter has the same name as a type parameter from the outer type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeReplaceDisallowCopyAndAssignMacro",
                "shortDescription": {
                  "text": "modernize-replace-disallow-copy-and-assign-macro clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnicodeWhitespace",
                "shortDescription": {
                  "text": "unicode-whitespace clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.InvalidControlType",
                "shortDescription": {
                  "text": "Invalid control type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OutParameterValueIsAlwaysDiscarded.Global",
                "shortDescription": {
                  "text": "Parameter output value is always discarded (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42353,BC42354,BC42355",
                "shortDescription": {
                  "text": "Function doesn't return a struct value on all code paths"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeMethodOrOperatorBody",
                "shortDescription": {
                  "text": "Use preferred body style (convert into method or operator with preferred body style)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseSourceMustBeFieldPropertyMethod",
                "shortDescription": {
                  "text": "NUnit. Test case source must be field, property, or method."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaPackSuspiciousInclude",
                "shortDescription": {
                  "text": "pragma-pack-suspicious-include clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantOverload.Global",
                "shortDescription": {
                  "text": "Redundant method overload (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Compat",
                "shortDescription": {
                  "text": "c++98-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuCaseRange",
                "shortDescription": {
                  "text": "gnu-case-range clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleIntendedRethrow",
                "shortDescription": {
                  "text": "Exception rethrow possibly intended"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtimportInFrameworkHeader",
                "shortDescription": {
                  "text": "atimport-in-framework-header clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.IgnoredPathHighlighting",
                "shortDescription": {
                  "text": "Ignored path"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceForStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'for' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForCanBeConvertedToForeach",
                "shortDescription": {
                  "text": "For-loop can be converted into foreach-loop"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingBraces",
                "shortDescription": {
                  "text": "missing-braces clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.TemplateNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown template)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.IndexOutOfGridDefinition",
                "shortDescription": {
                  "text": "Grid element column/row index is out of grid definition range"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneStringviewNullptr",
                "shortDescription": {
                  "text": "bugprone-stringview-nullptr clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedBoolConversion",
                "shortDescription": {
                  "text": "undefined-bool-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseRangeAlgorithm",
                "shortDescription": {
                  "text": "Algorithm operating on ranges can be used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticParentheses",
                "shortDescription": {
                  "text": "parentheses clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0675",
                "shortDescription": {
                  "text": "Bitwise-or operator used on a sign-extended operand."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIMkstemp",
                "shortDescription": {
                  "text": "security.insecureAPI.mkstemp clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingIndent",
                "shortDescription": {
                  "text": "Incorrect indent (line should be indented or outdented elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0672",
                "shortDescription": {
                  "text": "Member overrides obsolete member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.TagNotResolved",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeAttributes",
                "shortDescription": {
                  "text": "Join or separate attributes in section"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantDeclarationSemicolon",
                "shortDescription": {
                  "text": "Redundant semicolon after type or namespace declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscThrowByValueCatchByReference",
                "shortDescription": {
                  "text": "misc-throw-by-value-catch-by-reference clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseEqualsDelete",
                "shortDescription": {
                  "text": "modernize-use-equals-delete clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBuiltinMacroRedefined",
                "shortDescription": {
                  "text": "builtin-macro-redefined clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleAssignment.False",
                "shortDescription": {
                  "text": "Replace with single assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingAltAttributeInImgTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (<img> should specify alternative text)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixDynamicMemoryModeling",
                "shortDescription": {
                  "text": "unix.DynamicMemoryModeling clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InheritdocConsiderUsage",
                "shortDescription": {
                  "text": "Use <inheritdoc /> on root level to inherit documentation from base candidate"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedParameterInPartialMethod",
                "shortDescription": {
                  "text": "Unused parameter in partial method"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaStaticallyConstructedObjects",
                "shortDescription": {
                  "text": "fuchsia-statically-constructed-objects clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9073",
                "shortDescription": {
                  "text": "The 'scoped' modifier of a parameter doesn't match target delegate."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9074",
                "shortDescription": {
                  "text": "The 'scoped' modifier of parameter doesn't match overridden or implemented member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BuiltInTypeReferenceStyle",
                "shortDescription": {
                  "text": "Replace built-in type reference with a CLR type name or a keyword"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.Entities.NotUpdatedComponentLookup",
                "shortDescription": {
                  "text": "Field of 'ComponentLookup' type must be updated before being used."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyFieldKeywordIsNeverAssigned",
                "shortDescription": {
                  "text": "Backing field is used but never assigned"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StructMemberCanBeMadeReadOnly",
                "shortDescription": {
                  "text": "Struct member can be made readonly"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseNoexcept",
                "shortDescription": {
                  "text": "modernize-use-noexcept clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToDisposedClosure",
                "shortDescription": {
                  "text": "Access to disposed captured variable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaAtSync",
                "shortDescription": {
                  "text": "osx.cocoa.AtSync clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSpirCompat",
                "shortDescription": {
                  "text": "spir-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9080",
                "shortDescription": {
                  "text": "Use of a variable in this context may expose referenced variables outside of their declaration scope."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9081",
                "shortDescription": {
                  "text": "A result of a stackalloc expression in this context may be exposed outside of the containing method."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9082",
                "shortDescription": {
                  "text": "A local variable is returned by reference but was initialized to a value that cannot be returned by reference."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSlhAsmGoto",
                "shortDescription": {
                  "text": "slh-asm-goto clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMemberInitializersOrder",
                "shortDescription": {
                  "text": "Use preferred initialization style (order of member initializers does not match the initialization order)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteFrameworkModuleDeclaration",
                "shortDescription": {
                  "text": "incomplete-framework-module-declaration clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFunctionIsNotImplemented",
                "shortDescription": {
                  "text": "Function is not implemented"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceConditionalExpressionWithNullCoalescing",
                "shortDescription": {
                  "text": "Conditional expression can be rewritten as null-coalescing"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceNoexceptMoveConstructor",
                "shortDescription": {
                  "text": "performance-noexcept-move-constructor clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptyCaseElse",
                "shortDescription": {
                  "text": "Redundant empty 'Case Else' statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneExceptionEscape",
                "shortDescription": {
                  "text": "bugprone-exception-escape clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnqualifiedStdCastCall",
                "shortDescription": {
                  "text": "unqualified-std-cast-call clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinMpiMPIChecker",
                "shortDescription": {
                  "text": "optin.mpi.MPI-Checker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVoidPointerToEnumCast",
                "shortDescription": {
                  "text": "void-pointer-to-enum-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceInefficientVectorOperation",
                "shortDescription": {
                  "text": "performance-inefficient-vector-operation clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastCallingConvention",
                "shortDescription": {
                  "text": "cast-calling-convention clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantStyledValue",
                "shortDescription": {
                  "text": "Property value is equal to style-provided"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCheckBeforeAssignment",
                "shortDescription": {
                  "text": "Redundant condition check before assignments"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmPreferIsaOrDynCastInConditionals",
                "shortDescription": {
                  "text": "llvm-prefer-isa-or-dyn-cast-in-conditionals clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullReturnedFromNonnull",
                "shortDescription": {
                  "text": "nullability.NullReturnedFromNonnull clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantParentheses",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullabilityBase",
                "shortDescription": {
                  "text": "nullability.NullabilityBase clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9042",
                "shortDescription": {
                  "text": "Obsolete members should not be required."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerValistValistBase",
                "shortDescription": {
                  "text": "valist.ValistBase clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantFunctionPtrDereference",
                "shortDescription": {
                  "text": "readability-redundant-function-ptr-dereference clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveRedundantOrStatement.False",
                "shortDescription": {
                  "text": "Remove redundant statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.0",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.1",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclarationHidesLocal",
                "shortDescription": {
                  "text": "Hiding local declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.4",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTrigraphs",
                "shortDescription": {
                  "text": "trigraphs clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.2",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodAny.3",
                "shortDescription": {
                  "text": "Use method Any()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedFuncTemplate",
                "shortDescription": {
                  "text": "undefined-func-template clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FormatStringProblem",
                "shortDescription": {
                  "text": "String formatting method problems"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFrameLargerThan",
                "shortDescription": {
                  "text": "frame-larger-than clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToCount",
                "shortDescription": {
                  "text": "Replace with single call to Count(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AutoFixture.IncorrectArgumentType",
                "shortDescription": {
                  "text": "NUnit.AutoFixture. Incompatible argument type or incorrect argument value."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeAvoidBind",
                "shortDescription": {
                  "text": "modernize-avoid-bind clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckForReferenceEqualityInstead.1",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckForReferenceEqualityInstead.3",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckForReferenceEqualityInstead.2",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckForReferenceEqualityInstead.4",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityStaticAccessedThroughInstance",
                "shortDescription": {
                  "text": "readability-static-accessed-through-instance clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftEndOfFile",
                "shortDescription": {
                  "text": "microsoft-end-of-file clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNameofExpression",
                "shortDescription": {
                  "text": "Use 'nameof' expression to reference name"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmpLoopForm",
                "shortDescription": {
                  "text": "openmp-loop-form clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusNewDelete",
                "shortDescription": {
                  "text": "cplusplus.NewDelete clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMember.Local",
                "shortDescription": {
                  "text": "Type member is never used (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMem57Cpp",
                "shortDescription": {
                  "text": "cert-mem57-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMismatchedClassTags",
                "shortDescription": {
                  "text": "Mismatched class tags"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9094",
                "shortDescription": {
                  "text": "This returns a parameter by reference through a ref parameter; but it can only safely be returned in a return statement."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9095",
                "shortDescription": {
                  "text": "This returns by reference a member of parameter through a ref parameter; but it can only safely be returned in a return statement."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnumerableSumInExplicitUncheckedContext",
                "shortDescription": {
                  "text": "'Enumerable.Sum' invocation in explicit unchecked context"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9097",
                "shortDescription": {
                  "text": "This ref-assigns a value that has a wider value escape scope than the target allowing assignment through the target of values with narrower escapes scopes."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPrivateModule",
                "shortDescription": {
                  "text": "private-module clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MathClampMinGreaterThanMax",
                "shortDescription": {
                  "text": "Inconsistent arguments passed to 'Math.Clamp()' method"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.IncorrectMonoBehaviourInstantiation",
                "shortDescription": {
                  "text": "'MonoBehaviour' instances must be instantiated with 'GameObject.AddComponent<T>()' instead of 'new'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9083",
                "shortDescription": {
                  "text": "A member of a variable is returned by reference but was initialized to a value that cannot be returned by reference"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9084",
                "shortDescription": {
                  "text": "Struct member returns 'this' or other instance members by reference."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeIntoNegatedPattern",
                "shortDescription": {
                  "text": "Merge negated null/pattern checks into complex pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9085",
                "shortDescription": {
                  "text": "This ref-assigns an expression to a variable with a narrower escape scope."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9086",
                "shortDescription": {
                  "text": "The branches of the ref conditional operator refer to variables with incompatible declaration scopes."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9087",
                "shortDescription": {
                  "text": "This returns a parameter by reference but it is not a ref parameter."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantStringCstr",
                "shortDescription": {
                  "text": "readability-redundant-string-cstr clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9088",
                "shortDescription": {
                  "text": "This returns a parameter by reference but it is scoped to the current method."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9089",
                "shortDescription": {
                  "text": "This returns by reference a member of parameter that is not a ref or out parameter."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLocalTypeTemplateArgs",
                "shortDescription": {
                  "text": "local-type-template-args clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalFunctionCanBeMadeStatic",
                "shortDescription": {
                  "text": "Local function can be made static"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedField.Global",
                "shortDescription": {
                  "text": "Unassigned field (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkupTextTypo",
                "shortDescription": {
                  "text": "Typo in markup text"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ConstraintArgumentCannotBeConverted",
                "shortDescription": {
                  "text": "Route parameter constraint argument cannot be converted to target type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixCstringNullArg",
                "shortDescription": {
                  "text": "unix.cstring.NullArg clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuAlignofExpression",
                "shortDescription": {
                  "text": "gnu-alignof-expression clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBRemoveToList.2",
                "shortDescription": {
                  "text": "Remove ToList()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBRemoveToList.1",
                "shortDescription": {
                  "text": "Remove ToList()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesPreferMemberInitializer",
                "shortDescription": {
                  "text": "cppcoreguidelines-prefer-member-initializer clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftCast",
                "shortDescription": {
                  "text": "microsoft-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMacroParentheses",
                "shortDescription": {
                  "text": "bugprone-macro-parentheses clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9090",
                "shortDescription": {
                  "text": "This returns by reference a member of parameter that is scoped to the current method."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9091",
                "shortDescription": {
                  "text": "This returns local by reference but it is not a ref local."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9092",
                "shortDescription": {
                  "text": "This returns a member of local by reference but it is not a ref local."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS9093",
                "shortDescription": {
                  "text": "This ref-assigns a value that can only escape the current method through a return statement."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.SingleOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().SingleOrDefault() (replace with OfType<T>().SingleOrDefault(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.SingleOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().SingleOrDefault()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNsreturnsMismatch",
                "shortDescription": {
                  "text": "nsreturns-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicMemoryOrdering",
                "shortDescription": {
                  "text": "atomic-memory-ordering clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecated",
                "shortDescription": {
                  "text": "deprecated clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftGoto",
                "shortDescription": {
                  "text": "microsoft-goto clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantBlankLines",
                "shortDescription": {
                  "text": "Incorrect blank lines (blank lines are redundant elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticComplexComponentInit",
                "shortDescription": {
                  "text": "complex-component-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeTrailingCommaInSinglelineLists",
                "shortDescription": {
                  "text": "Use preferred style for trailing comma when the last element is not followed by a new line"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1066",
                "shortDescription": {
                  "text": "Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinPerformanceGCDAntipattern",
                "shortDescription": {
                  "text": "optin.performance.GCDAntipattern clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityFunctionSize",
                "shortDescription": {
                  "text": "google-readability-function-size clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStrlcpyStrlcatSize",
                "shortDescription": {
                  "text": "strlcpy-strlcat-size clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC400005",
                "shortDescription": {
                  "text": "Member shadows an overriable member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateResource",
                "shortDescription": {
                  "text": "Duplicate resource name"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilTimeComparison",
                "shortDescription": {
                  "text": "abseil-time-comparison clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaNonNilReturnValue",
                "shortDescription": {
                  "text": "osx.cocoa.NonNilReturnValue clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSometimesUninitialized",
                "shortDescription": {
                  "text": "sometimes-uninitialized clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMsvcNotFound",
                "shortDescription": {
                  "text": "msvc-not-found clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventNeverSubscribedTo.Local",
                "shortDescription": {
                  "text": "Event is never subscribed to (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.ExpectedScriptableObject",
                "shortDescription": {
                  "text": "Expected type derived from 'ScriptableObject'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyConcurrencyMtUnsafe",
                "shortDescription": {
                  "text": "concurrency-mt-unsafe clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegationOfRelationalPattern",
                "shortDescription": {
                  "text": "Simplify negated relational pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TryStatementsCanBeMerged",
                "shortDescription": {
                  "text": "try-catch and try-finally statements can be merged"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedTemplate",
                "shortDescription": {
                  "text": "unused-template clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyTitleTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (empty <title>)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantEmptyStatement",
                "shortDescription": {
                  "text": "Redundant empty statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1058",
                "shortDescription": {
                  "text": "A previous catch clause already catches all exceptions"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilStringFindStrContains",
                "shortDescription": {
                  "text": "abseil-string-find-str-contains clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticError",
                "shortDescription": {
                  "text": "Clang compiler error"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossiblyMissingIndexerInitializerComma",
                "shortDescription": {
                  "text": "Possibly missing comma before indexer initializer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxSecKeychainAPI",
                "shortDescription": {
                  "text": "osx.SecKeychainAPI clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleTypeMembersOnOneLine",
                "shortDescription": {
                  "text": "Incorrect line breaks (multiple type members on one line)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModulesImportNestedRedundant",
                "shortDescription": {
                  "text": "modules-import-nested-redundant clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAttributePackedForBitfield",
                "shortDescription": {
                  "text": "attribute-packed-for-bitfield clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedLocalTypedef",
                "shortDescription": {
                  "text": "unused-local-typedef clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverriddenWithEmptyValue",
                "shortDescription": {
                  "text": "Resource overrides base resource with empty value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSquareBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around square brackets within a statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantPropertyTypeQualifier",
                "shortDescription": {
                  "text": "Redundant property type qualifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11CompatReservedUserDefinedLiteral",
                "shortDescription": {
                  "text": "c++11-compat-reserved-user-defined-literal clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotDeclaredInParentCulture",
                "shortDescription": {
                  "text": "Resource is not declared in base culture"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToSwitchStatement",
                "shortDescription": {
                  "text": "Convert 'if' statement into 'switch'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProtocol",
                "shortDescription": {
                  "text": "protocol clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPchDateTime",
                "shortDescription": {
                  "text": "pch-date-time clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstWriteStaticField",
                "shortDescription": {
                  "text": "Writing to a static field is not supported"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRedundantConstevalIf",
                "shortDescription": {
                  "text": "redundant-consteval-if clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantScopedParameterModifier",
                "shortDescription": {
                  "text": "Redundant 'scoped' parameter modifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableBaseType",
                "shortDescription": {
                  "text": "Redundant nullable annotation on base type constraint of type parameter constrained by another non-nullable base type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonCTypedefForLinkage",
                "shortDescription": {
                  "text": "non-c-typedef-for-linkage clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuRedeclaredEnum",
                "shortDescription": {
                  "text": "gnu-redeclared-enum clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantResource",
                "shortDescription": {
                  "text": "Redundant resource"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppVolatileParameterInDeclaration",
                "shortDescription": {
                  "text": "Volatile-qualified parameter in a function declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCxxAttributeExtension",
                "shortDescription": {
                  "text": "cxx-attribute-extension clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceMoveConstArg",
                "shortDescription": {
                  "text": "performance-move-const-arg clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.MasterpageNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown masterpage)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxMIG",
                "shortDescription": {
                  "text": "osx.MIG clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8509",
                "shortDescription": {
                  "text": "The switch expression does not handle all possible inputs (it is not exhaustive)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBPossibleMistakenArgument",
                "shortDescription": {
                  "text": "Possible mistaken argument"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8500",
                "shortDescription": {
                  "text": "This takes the address of, gets the size of, or declares a pointer to a managed type."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.MatchingConstraintConstructorNotResolved",
                "shortDescription": {
                  "text": "Matching parameter constraint's constructor not found"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableFlowAttribute",
                "shortDescription": {
                  "text": "Redundant nullable attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceIfStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'if' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ServiceContractWithoutOperations",
                "shortDescription": {
                  "text": "Interfaces marked as ServiceContract should declare at least one OperationContract"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedEnumEnumConversion",
                "shortDescription": {
                  "text": "deprecated-enum-enum-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceCVQualifiersOrder",
                "shortDescription": {
                  "text": "Use preferred cv-qualifiers style (enforce the order of cv-qualifiers)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadListLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around comma in lists)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRedundantMove",
                "shortDescription": {
                  "text": "redundant-move clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIStrcpy",
                "shortDescription": {
                  "text": "security.insecureAPI.strcpy clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNestedAnonTypes",
                "shortDescription": {
                  "text": "nested-anon-types clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestVarOrType_Elsewhere",
                "shortDescription": {
                  "text": "Use preferred 'var' style (elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersPointerSizedValues",
                "shortDescription": {
                  "text": "osx.coreFoundation.containers.PointerSizedValues clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatPedantic",
                "shortDescription": {
                  "text": "c++98-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitIntConversion",
                "shortDescription": {
                  "text": "implicit-int-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuAnonymousStruct",
                "shortDescription": {
                  "text": "gnu-anonymous-struct clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIBzero",
                "shortDescription": {
                  "text": "security.insecureAPI.bzero clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftConstInit",
                "shortDescription": {
                  "text": "microsoft-const-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToConditionalTernaryExpression",
                "shortDescription": {
                  "text": "'if' statement can be rewritten as '?:' expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreDynamicTypePropagation",
                "shortDescription": {
                  "text": "core.DynamicTypePropagation clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSpace",
                "shortDescription": {
                  "text": "Incorrect spacing (space is redundant elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEventArgsEmptyField",
                "shortDescription": {
                  "text": "Use 'EventArgs.Empty'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve property"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVoidPointerToIntCast",
                "shortDescription": {
                  "text": "void-pointer-to-int-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredBaseTypesIsNotInherited",
                "shortDescription": {
                  "text": "Base type is required"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelectorTypeMismatch",
                "shortDescription": {
                  "text": "selector-type-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclaratorUsedBeforeInitialization",
                "shortDescription": {
                  "text": "Local variable is used without being initialized"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationContainersOutOfBounds",
                "shortDescription": {
                  "text": "osx.coreFoundation.containers.OutOfBounds clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterOnlyUsedForPreconditionCheck.Global",
                "shortDescription": {
                  "text": "Parameter is only used for precondition check (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuEmptyInitializer",
                "shortDescription": {
                  "text": "gnu-empty-initializer clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftEnumForwardReference",
                "shortDescription": {
                  "text": "microsoft-enum-forward-reference clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.StyleInvalidTargetType",
                "shortDescription": {
                  "text": "Style target type is not convertible to base type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscMisplacedConst",
                "shortDescription": {
                  "text": "misc-misplaced-const clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmHeaderGuard",
                "shortDescription": {
                  "text": "llvm-header-guard clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTabsAreDisallowed",
                "shortDescription": {
                  "text": "Incorrect spacing (tabs are prohibited)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneIntegerDivision",
                "shortDescription": {
                  "text": "bugprone-integer-division clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBadFunctionCast",
                "shortDescription": {
                  "text": "bad-function-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidSourceEncoding",
                "shortDescription": {
                  "text": "invalid-source-encoding clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PossibleMisapplicationOfAttributeToMultipleFields",
                "shortDescription": {
                  "text": "Possible incorrect application of attribute to multiple fields"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProBoundsConstantArrayIndex",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-bounds-constant-array-index clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerWebkitRefCntblBaseVirtualDtor",
                "shortDescription": {
                  "text": "webkit.RefCntblBaseVirtualDtor clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceCVQualifiersPlacement",
                "shortDescription": {
                  "text": "Use preferred cv-qualifiers style (enforce the placement of cv-qualifiers)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGpuMaybeWrongSide",
                "shortDescription": {
                  "text": "gpu-maybe-wrong-side clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticClassConversion",
                "shortDescription": {
                  "text": "class-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RedundantArgumentInsteadOfExpectedResult",
                "shortDescription": {
                  "text": "NUnit. Redundant argument instead of ExpectedResult."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSlashUFilename",
                "shortDescription": {
                  "text": "slash-u-filename clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SafeCastIsUsedAsTypeCheck",
                "shortDescription": {
                  "text": "Try cast and check for null can be replaced with a type check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmlibcImplementationInNamespace",
                "shortDescription": {
                  "text": "llvmlibc-implementation-in-namespace clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSection",
                "shortDescription": {
                  "text": "section clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1911",
                "shortDescription": {
                  "text": "Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingTrustNonnull",
                "shortDescription": {
                  "text": "apiModeling.TrustNonnull clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstLoadingStaticNotReadonly",
                "shortDescription": {
                  "text": "Loading from a non-readonly static field is not supported"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerValistUninitialized",
                "shortDescription": {
                  "text": "valist.Uninitialized clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp20Compat",
                "shortDescription": {
                  "text": "pre-c++20-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp17Compat",
                "shortDescription": {
                  "text": "pre-c++17-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantInitializeOnLoadAttribute",
                "shortDescription": {
                  "text": "Redundant attribute usage (redundant 'InitializeOnLoad' attribute)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvertCondition.1",
                "shortDescription": {
                  "text": "Invert condition"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftDefaultArgRedefinition",
                "shortDescription": {
                  "text": "microsoft-default-arg-redefinition clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRedeclaredClassMember",
                "shortDescription": {
                  "text": "redeclared-class-member clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseMethodIsInstanceOfType",
                "shortDescription": {
                  "text": "Use method IsInstanceOfType(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneBranchClone",
                "shortDescription": {
                  "text": "bugprone-branch-clone clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusInnerPointer",
                "shortDescription": {
                  "text": "cplusplus.InnerPointer clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedUndefReturn",
                "shortDescription": {
                  "text": "core.uninitialized.UndefReturn clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReinterpretBaseClass",
                "shortDescription": {
                  "text": "reinterpret-base-class clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PerformanceCriticalCodeInvocation",
                "shortDescription": {
                  "text": "Expensive method invocation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidIosDeploymentTarget",
                "shortDescription": {
                  "text": "invalid-ios-deployment-target clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentOrderOfLocks",
                "shortDescription": {
                  "text": "Inconsistent order of taken locks"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneEasilySwappableParameters",
                "shortDescription": {
                  "text": "bugprone-easily-swappable-parameters clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmpMapping",
                "shortDescription": {
                  "text": "openmp-mapping clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8524",
                "shortDescription": {
                  "text": "The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleLiteral",
                "shortDescription": {
                  "text": "Use preferred argument style for literal values"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMpiTypeMismatch",
                "shortDescription": {
                  "text": "mpi-type-mismatch clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertPos47C",
                "shortDescription": {
                  "text": "cert-pos47-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeMadeStatic.Local",
                "shortDescription": {
                  "text": "Member can be made static (shared) (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.OptionalParameterCanBePrecededOnlyBySinglePeriod",
                "shortDescription": {
                  "text": "Optional parameter can be preceded only by single period ('.') in the segment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInconsistentDllimport",
                "shortDescription": {
                  "text": "inconsistent-dllimport clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnumeratorNeverUsed",
                "shortDescription": {
                  "text": "Enumerator is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCharSubscripts",
                "shortDescription": {
                  "text": "char-subscripts clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseCancellationTokenForIAsyncEnumerable",
                "shortDescription": {
                  "text": "Use cancellation token"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeFileLocal",
                "shortDescription": {
                  "text": "Type can be made file-local"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0618",
                "shortDescription": {
                  "text": "Use of obsolete symbol"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0612",
                "shortDescription": {
                  "text": "Use of obsolete symbol (without message)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.MethodMissingRouteParameters",
                "shortDescription": {
                  "text": "Not all route parameters are passed to method"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantUnsafeContext",
                "shortDescription": {
                  "text": "Unsafe context declaration is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedInline",
                "shortDescription": {
                  "text": "undefined-inline clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonportableIncludePath",
                "shortDescription": {
                  "text": "nonportable-include-path clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MoveToExistingPositionalDeconstructionPattern",
                "shortDescription": {
                  "text": "Move to existing positional deconstruction pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverrideInit",
                "shortDescription": {
                  "text": "override-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertPos44C",
                "shortDescription": {
                  "text": "cert-pos44-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1957",
                "shortDescription": {
                  "text": "Multiple override candidates at run-time"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0628",
                "shortDescription": {
                  "text": "Declaring new protected member in sealed class is the same as declaring it as private"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppSomeObjectMembersMightNotBeInitialized",
                "shortDescription": {
                  "text": "Some object members might not be initialized"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Count.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Count()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppHiddenFunction",
                "shortDescription": {
                  "text": "Non-virtual class member function hidden in a derived class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingGoogleGTest",
                "shortDescription": {
                  "text": "apiModeling.google.GTest clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAllocaWithAlignAlignof",
                "shortDescription": {
                  "text": "alloca-with-align-alignof clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Count.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Count() (replace with OfType<T>().Count(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberHidesStaticFromOuterClass",
                "shortDescription": {
                  "text": "Member hides static member from outer class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceTypeAliasCodeStyle",
                "shortDescription": {
                  "text": "Use preferred declaration style (enforce type alias code style)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertOop11Cpp",
                "shortDescription": {
                  "text": "cert-oop11-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcNsinvocationArgumentLifetime",
                "shortDescription": {
                  "text": "objc-nsinvocation-argument-lifetime clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMemberFunctionMayBeStatic",
                "shortDescription": {
                  "text": "Member function can be made static"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIGets",
                "shortDescription": {
                  "text": "security.insecureAPI.gets clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.WrongModule",
                "shortDescription": {
                  "text": "Wrong module"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityDeleteNullPointer",
                "shortDescription": {
                  "text": "readability-delete-null-pointer clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseSwitchCasePatternVariable",
                "shortDescription": {
                  "text": "Type pattern and casts can be merged"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesNarrowingConversions",
                "shortDescription": {
                  "text": "cppcoreguidelines-narrowing-conversions clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantVirtualModifier",
                "shortDescription": {
                  "text": "Redundant 'virtual' modifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullablePassedToNonnull",
                "shortDescription": {
                  "text": "nullability.NullablePassedToNonnull clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuInlineCppWithoutExtern",
                "shortDescription": {
                  "text": "gnu-inline-cpp-without-extern clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnalignedQualifierImplicitCast",
                "shortDescription": {
                  "text": "unaligned-qualifier-implicit-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownResource",
                "shortDescription": {
                  "text": "The resource is not defined in the project"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.First.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().First() (replace with OfType(Of ..)().First(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.First.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().First() (replace with OfType(Of ..)().First())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RedundantArgumentInTestCaseAttribute",
                "shortDescription": {
                  "text": "NUnit. Redundant argument in TestCase attribute."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FormatStringPlaceholdersMismatch",
                "shortDescription": {
                  "text": "Format string placeholders mismatch"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVariadicMacros",
                "shortDescription": {
                  "text": "variadic-macros clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIDecodeValueOfObjCType",
                "shortDescription": {
                  "text": "security.insecureAPI.decodeValueOfObjCType clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmIncludeOrder",
                "shortDescription": {
                  "text": "llvm-include-order clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDoxygenUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference in doxygen comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42356",
                "shortDescription": {
                  "text": "Async method lacks 'Await' operators"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAlloca",
                "shortDescription": {
                  "text": "alloca clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42358",
                "shortDescription": {
                  "text": "Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'Await' operator to the result of the call."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantCastExpression",
                "shortDescription": {
                  "text": "Redundant cast expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantIfStatementThenKeyword",
                "shortDescription": {
                  "text": "Keyword 'Then' is redundant in multiline 'If' statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToLastOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to LastOrDefault(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PartialMethodWithSinglePart",
                "shortDescription": {
                  "text": "Redundant 'partial' modifier on method declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedNan",
                "shortDescription": {
                  "text": "unsupported-nan clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterValueIsReassigned",
                "shortDescription": {
                  "text": "Parameter is always rewritten in function body before being read"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppZeroValuedExpressionUsedAsNullPointer",
                "shortDescription": {
                  "text": "Expression that evaluates to zero is used as a null pointer constant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticQuotedIncludeInFrameworkHeader",
                "shortDescription": {
                  "text": "quoted-include-in-framework-header clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedField.Compiler",
                "shortDescription": {
                  "text": "Non-accessed field"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuLabelAsValue",
                "shortDescription": {
                  "text": "gnu-label-as-value clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestVarOrType_DeconstructionDeclarations",
                "shortDescription": {
                  "text": "Use preferred 'var' style (in deconstruction declarations)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedField.Compiler",
                "shortDescription": {
                  "text": "Unassigned field"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppObjectMemberMightNotBeInitialized",
                "shortDescription": {
                  "text": "Object member might not be initialized"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.ParameterNotDerivedFromComponent",
                "shortDescription": {
                  "text": "Parameter should be derived from 'Component'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonPodVarargs",
                "shortDescription": {
                  "text": "non-pod-varargs clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseArrayCreationExpression.2",
                "shortDescription": {
                  "text": "Use array creation expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticManyBracesAroundScalarInit",
                "shortDescription": {
                  "text": "many-braces-around-scalar-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseArrayCreationExpression.1",
                "shortDescription": {
                  "text": "Use array creation expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.IdDuplication",
                "shortDescription": {
                  "text": "Ids duplication"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownAnimatorStateName",
                "shortDescription": {
                  "text": "There is no animator state with the same name in the project."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCopyWithUserProvidedDtor",
                "shortDescription": {
                  "text": "deprecated-copy-with-user-provided-dtor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseImplicitlyTypedVariableEvident",
                "shortDescription": {
                  "text": "Use implicitly typed variable declaration (evident)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuEmptyStruct",
                "shortDescription": {
                  "text": "gnu-empty-struct clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToStaticMemberViaDerivedType",
                "shortDescription": {
                  "text": "Access to a static member of a type via a derived type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalConstantOutOfRangeCompare",
                "shortDescription": {
                  "text": "tautological-constant-out-of-range-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncludeNextAbsolutePath",
                "shortDescription": {
                  "text": "include-next-absolute-path clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingLlvmReturnValue",
                "shortDescription": {
                  "text": "apiModeling.llvm.ReturnValue clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17CompatPedantic",
                "shortDescription": {
                  "text": "c++98-c++11-c++14-c++17-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaMessages",
                "shortDescription": {
                  "text": "#pragma-messages clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatTooFewArgs",
                "shortDescription": {
                  "text": "Not enough arguments in a call to boost::format"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredAvailabilityWithoutSdkSettings",
                "shortDescription": {
                  "text": "ignored-availability-without-sdk-settings clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseUtf8StringLiteral",
                "shortDescription": {
                  "text": "Use UTF-8 string literal"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnknownInputAxes",
                "shortDescription": {
                  "text": "The input name is not defined in the Input manager"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.ElementNameReferenceNotResolved",
                "shortDescription": {
                  "text": "Element name reference is not resolved"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusStringChecker",
                "shortDescription": {
                  "text": "cplusplus.StringChecker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationFactoryScale",
                "shortDescription": {
                  "text": "abseil-duration-factory-scale clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpecifyACultureInStringConversionExplicitly",
                "shortDescription": {
                  "text": "Specify string culture explicitly"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleUpgradeGoogletestCase",
                "shortDescription": {
                  "text": "google-upgrade-googletest-case clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.ParameterTypeIsNotCompatibleWithAttribute",
                "shortDescription": {
                  "text": "NUnit. Specified values are not compatible with the test parameter type."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneStringLiteralWithEmbeddedNul",
                "shortDescription": {
                  "text": "bugprone-string-literal-with-embedded-nul clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedField.Local",
                "shortDescription": {
                  "text": "Non-accessed field (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantAttachedProperty",
                "shortDescription": {
                  "text": "Remove redundant attached property setter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNoderef",
                "shortDescription": {
                  "text": "noderef clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreVLASize",
                "shortDescription": {
                  "text": "core.VLASize clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20Designator",
                "shortDescription": {
                  "text": "c++20-designator clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaExpressionCanBeMadeStatic",
                "shortDescription": {
                  "text": "Lambda expression/anonymous method can be made 'static'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42322",
                "shortDescription": {
                  "text": "Runtime errors are likely to occur when converting X to Y"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringEndsWithIsCultureSpecific",
                "shortDescription": {
                  "text": "String.EndsWith is culture-specific (string.EndsWith(string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicPropertyWithUserDefinedAccessor",
                "shortDescription": {
                  "text": "atomic-property-with-user-defined-accessor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntInBoolContext",
                "shortDescription": {
                  "text": "int-in-bool-context clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreBuiltinBuiltinFunctions",
                "shortDescription": {
                  "text": "core.builtin.BuiltinFunctions clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesAvoidCArrays",
                "shortDescription": {
                  "text": "cppcoreguidelines-avoid-c-arrays clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneBadSignalToKillThread",
                "shortDescription": {
                  "text": "bugprone-bad-signal-to-kill-thread clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneBoolPointerImplicitConversion",
                "shortDescription": {
                  "text": "bugprone-bool-pointer-implicit-conversion clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.TagPrefixRedundand",
                "shortDescription": {
                  "text": "Redundant tagPrefix declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWritableStrings",
                "shortDescription": {
                  "text": "writable-strings clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConditionalUninitialized",
                "shortDescription": {
                  "text": "conditional-uninitialized clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCommaSubscript",
                "shortDescription": {
                  "text": "deprecated-comma-subscript clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantOverflowCheckingContext",
                "shortDescription": {
                  "text": "Redundant arithmetic overflow checking context"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongIndentSize",
                "shortDescription": {
                  "text": "Incorrect indent (incorrect indent size)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticInInline",
                "shortDescription": {
                  "text": "static-in-inline clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventNeverInvoked.Global",
                "shortDescription": {
                  "text": "Abstract or virtual (overridable) event is never invoked"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseAttributeRequiresExpectedResult",
                "shortDescription": {
                  "text": "NUnit. Missing expected result for non-void test method."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionNeverQueried.Local",
                "shortDescription": {
                  "text": "Collection content is never queried (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.IncorrectMethodSignature",
                "shortDescription": {
                  "text": "Incorrect method signature"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidNoBuiltinNames",
                "shortDescription": {
                  "text": "invalid-no-builtin-names clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatTypeConfusion",
                "shortDescription": {
                  "text": "format-type-confusion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.MissingArgumentsInTestCaseAttribute",
                "shortDescription": {
                  "text": "NUnit. Missing arguments in TestCase attribute."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveRedundantOrStatement.True",
                "shortDescription": {
                  "text": "Remove redundant statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitfieldWidth",
                "shortDescription": {
                  "text": "bitfield-width clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42349",
                "shortDescription": {
                  "text": "Redundant DirectCast to the equals value type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleSysroot",
                "shortDescription": {
                  "text": "incompatible-sysroot clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftOpParentheses",
                "shortDescription": {
                  "text": "shift-op-parentheses clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11LongLong",
                "shortDescription": {
                  "text": "c++11-long-long clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousTypeConversion.Global",
                "shortDescription": {
                  "text": "Suspicious type conversion or check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyConcurrencyThreadCanceltypeAsynchronous",
                "shortDescription": {
                  "text": "concurrency-thread-canceltype-asynchronous clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInconsistentMissingOverride",
                "shortDescription": {
                  "text": "inconsistent-missing-override clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateProtocol",
                "shortDescription": {
                  "text": "duplicate-protocol clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMismatchedTags",
                "shortDescription": {
                  "text": "mismatched-tags clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDependentTemplateWithoutTemplateKeyword",
                "shortDescription": {
                  "text": "Dependent template without 'template' keyword"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidPartialSpecialization",
                "shortDescription": {
                  "text": "invalid-partial-specialization clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcPropertyDeclaration",
                "shortDescription": {
                  "text": "objc-property-declaration clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedReadonlyField.Compiler",
                "shortDescription": {
                  "text": "Unassigned readonly field"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUEIncorrectEngineDirectory",
                "shortDescription": {
                  "text": "Specified version of the engine project is not found"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReservedIdentifier",
                "shortDescription": {
                  "text": "reserved-identifier clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFrameAddress",
                "shortDescription": {
                  "text": "frame-address clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.DuplicateValues",
                "shortDescription": {
                  "text": "NUnit. Duplicate values."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseDeconstruction",
                "shortDescription": {
                  "text": "Use deconstruction"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticProfileInstrOutOfDate",
                "shortDescription": {
                  "text": "profile-instr-out-of-date clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftInaccessibleBase",
                "shortDescription": {
                  "text": "microsoft-inaccessible-base clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityEmptyLocalizationContextChecker",
                "shortDescription": {
                  "text": "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilitySuspiciousCallArgument",
                "shortDescription": {
                  "text": "readability-suspicious-call-argument clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUnusedAliasDecls",
                "shortDescription": {
                  "text": "misc-unused-alias-decls clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBracedScalarInit",
                "shortDescription": {
                  "text": "braced-scalar-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.RouteParameterIsNotPassedToMethod",
                "shortDescription": {
                  "text": "Route parameter can be passed to method"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDanglingElse",
                "shortDescription": {
                  "text": "dangling-else clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalUnsignedCharZeroCompare",
                "shortDescription": {
                  "text": "tautological-unsigned-char-zero-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSwitchBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around switch statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtProtocol",
                "shortDescription": {
                  "text": "at-protocol clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0660,CS0661",
                "shortDescription": {
                  "text": "Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overridden"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOutOfLineDeclaration",
                "shortDescription": {
                  "text": "out-of-line-declaration clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMethodReturnValue.Local",
                "shortDescription": {
                  "text": "Method return value is never used (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.Image",
                "shortDescription": {
                  "text": "Wrong image size"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17AttributeExtensions",
                "shortDescription": {
                  "text": "c++17-attribute-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyBeta",
                "shortDescription": {
                  "text": "thread-safety-beta clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NullableWarningSuppressionIsUsed",
                "shortDescription": {
                  "text": "A suppressed nullable warning might hide an underlying problem"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatInvalidSpecifier",
                "shortDescription": {
                  "text": "format-invalid-specifier clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverlengthStrings",
                "shortDescription": {
                  "text": "overlength-strings clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArrayBoundsPointerArithmetic",
                "shortDescription": {
                  "text": "array-bounds-pointer-arithmetic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNoMalloc",
                "shortDescription": {
                  "text": "hicpp-no-malloc clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.ConstructorWarning",
                "shortDescription": {
                  "text": "Constructor not resolved"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42309",
                "shortDescription": {
                  "text": "XML comment has a tag with a 'cref' attribute that could not be resolved"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuFlexibleArrayUnionMember",
                "shortDescription": {
                  "text": "gnu-flexible-array-union-member clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingMethodReturnType",
                "shortDescription": {
                  "text": "missing-method-return-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AutoFixture.MissedTestOrTestFixtureAttribute",
                "shortDescription": {
                  "text": "NUnit.AutoFixture. Missing Test or TestFixture attribute."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFlagEnum",
                "shortDescription": {
                  "text": "flag-enum clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNameofForDependencyProperty",
                "shortDescription": {
                  "text": "Use 'nameof' expression when registering a DependencyProperty"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraKernelNameRestriction",
                "shortDescription": {
                  "text": "altera-kernel-name-restriction clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.InvalidResourceTargetType",
                "shortDescription": {
                  "text": "XAML style of invalid target type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42304",
                "shortDescription": {
                  "text": "Syntax error in XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCallerArgumentExpressionDefaultValue",
                "shortDescription": {
                  "text": "Redundant argument passed to caller argument expression parameter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityDeclspec",
                "shortDescription": {
                  "text": "nullability-declspec clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantVoidArgumentList",
                "shortDescription": {
                  "text": "Redundant void argument list"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppInconsistentNaming",
                "shortDescription": {
                  "text": "Inconsistent Naming"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftExplicitConstructorCall",
                "shortDescription": {
                  "text": "microsoft-explicit-constructor-call clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOldStyleCast",
                "shortDescription": {
                  "text": "old-style-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUserDefinedLiterals",
                "shortDescription": {
                  "text": "user-defined-literals clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToNullCoalescingAssignment",
                "shortDescription": {
                  "text": "'if' statement can be rewritten as '??=' assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeConditionalExpression",
                "shortDescription": {
                  "text": "Merge conditional ?: expression into conditional access"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedDllBaseClassTemplate",
                "shortDescription": {
                  "text": "unsupported-dll-base-class-template clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedReinterpretCast",
                "shortDescription": {
                  "text": "undefined-reinterpret-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNameQualifier",
                "shortDescription": {
                  "text": "Redundant name qualifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.3",
                "shortDescription": {
                  "text": "Replace with OfType<T>()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnicodeHomoglyph",
                "shortDescription": {
                  "text": "unicode-homoglyph clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RangeStepValueMustNotBeZero",
                "shortDescription": {
                  "text": "NUnit. Range 'step' parameter value must be non-zero."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppExplicitConversions",
                "shortDescription": {
                  "text": "hicpp-explicit-conversions clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMacroRepeatedSideEffects",
                "shortDescription": {
                  "text": "bugprone-macro-repeated-side-effects clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityMisleadingIndentation",
                "shortDescription": {
                  "text": "readability-misleading-indentation clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldCanBeMadeReadOnly.Global",
                "shortDescription": {
                  "text": "Field can be made readonly (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantConfigureAwait",
                "shortDescription": {
                  "text": "Redundant 'ConfigureAwait(true)'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadNamespaceBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around namespace braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldHidesInterfacePropertyWithDefaultImplementation",
                "shortDescription": {
                  "text": "Field hides property with default implementation in interface"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1030",
                "shortDescription": {
                  "text": "'#warning' directive"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmQualifiedAuto",
                "shortDescription": {
                  "text": "llvm-qualified-auto clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ResourceItemNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve resource item"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InheritdocInvalidUsage",
                "shortDescription": {
                  "text": "Usage of <inheritdoc /> is invalid"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaRunLoopAutoreleaseLeak",
                "shortDescription": {
                  "text": "osx.cocoa.RunLoopAutoreleaseLeak clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticComma",
                "shortDescription": {
                  "text": "comma clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VirtualMemberNeverOverridden.Local",
                "shortDescription": {
                  "text": "Virtual (overridable) member is never overridden (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAlwaysMatchSubpattern",
                "shortDescription": {
                  "text": "Subpattern that always matches is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousMacro",
                "shortDescription": {
                  "text": "ambiguous-macro clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.DependencyPropertyResolveError",
                "shortDescription": {
                  "text": "Dependency property descriptor field missing"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterTypeCanBeEnumerable.Local",
                "shortDescription": {
                  "text": "Parameter type can be IEnumerable<T> (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAssignment",
                "shortDescription": {
                  "text": "Assignment is not used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeConcatNestedNamespaces",
                "shortDescription": {
                  "text": "modernize-concat-nested-namespaces clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC99Compat",
                "shortDescription": {
                  "text": "c99-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftUsingDecl",
                "shortDescription": {
                  "text": "microsoft-using-decl clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilRedundantStrcatCalls",
                "shortDescription": {
                  "text": "abseil-redundant-strcat-calls clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUninitialized",
                "shortDescription": {
                  "text": "uninitialized clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstForeachNotSupported",
                "shortDescription": {
                  "text": "The 'foreach' construction is not supported"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPacked",
                "shortDescription": {
                  "text": "packed clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.PathError",
                "shortDescription": {
                  "text": "Path error"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExplicitCallerInfoArgument",
                "shortDescription": {
                  "text": "Explicit argument passed to parameter with caller info attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinCplusplusUninitializedObject",
                "shortDescription": {
                  "text": "optin.cplusplus.UninitializedObject clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDelimitedEscapeSequenceExtension",
                "shortDescription": {
                  "text": "delimited-escape-sequence-extension clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8819",
                "shortDescription": {
                  "text": "Nullability of reference types in return type doesn't match partial method declaration."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppHidingFunction",
                "shortDescription": {
                  "text": "Class member function hiding a non-virtual function from a base class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopCanBeConvertedToQuery",
                "shortDescription": {
                  "text": "Loop can be converted into LINQ-expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertMsc51Cpp",
                "shortDescription": {
                  "text": "cert-msc51-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SymbolFromNotCopiedLocallyReferenceUsedWarning",
                "shortDescription": {
                  "text": "Symbol from module that might be missing at runtime"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMaxTokens",
                "shortDescription": {
                  "text": "max-tokens clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModuleFileConfigMismatch",
                "shortDescription": {
                  "text": "module-file-config-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVoidPtrDereference",
                "shortDescription": {
                  "text": "void-ptr-dereference clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppVirtualFunctionCallInsideCtor",
                "shortDescription": {
                  "text": "Call to a virtual function inside a constructor/destructor is resolved at compile time"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PropertyDrawerOnGUIBase",
                "shortDescription": {
                  "text": "Avoid 'base.OnGUI()' in classes derived from 'PropertyDrawer'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityContainerContains",
                "shortDescription": {
                  "text": "readability-container-contains clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecInotifyInit",
                "shortDescription": {
                  "text": "android-cloexec-inotify-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInlineNewDelete",
                "shortDescription": {
                  "text": "inline-new-delete clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleStructMemberModificationOfNonVariableStruct",
                "shortDescription": {
                  "text": "Value assigned to a property of non-variable qualifier expression can be lost"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppInvalidAccessMoved",
                "shortDescription": {
                  "text": "hicpp-invalid-access-moved clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadControlBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around statement braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInaccessibleBase",
                "shortDescription": {
                  "text": "inaccessible-base clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpMissingPluginDependency",
                "shortDescription": {
                  "text": "Dependency for the plugin is missing in the project file"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Build System",
                      "index": 71,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppConstValueFunctionReturnType",
                "shortDescription": {
                  "text": "Function returns by const value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAttributeSuffix",
                "shortDescription": {
                  "text": "Redundant 'Attribute' suffix"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8825",
                "shortDescription": {
                  "text": "Return value must be non-null because parameter mentioned in [NotNullIfNotNull] annotation is non-null."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8824",
                "shortDescription": {
                  "text": "Parameter must have a non-null value when exiting because parameter mentioned in [NotNullIfNotNull] annotation is non-null."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonExceptionSafeResourceAcquisition",
                "shortDescription": {
                  "text": "Non-safe resource acquisition"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusPlacementNew",
                "shortDescription": {
                  "text": "cplusplus.PlacementNew clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreStackAddressEscape",
                "shortDescription": {
                  "text": "core.StackAddressEscape clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantConditionalAccessQualifier",
                "shortDescription": {
                  "text": "Conditional access qualifier expression is known to be null or not null"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceTriviallyDestructible",
                "shortDescription": {
                  "text": "performance-trivially-destructible clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLambdaSignatureParentheses",
                "shortDescription": {
                  "text": "Redundant lambda signature parentheses"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTooWideScopeInitStatement",
                "shortDescription": {
                  "text": "Variable can be moved to init statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneImplicitWideningOfMultiplicationResult",
                "shortDescription": {
                  "text": "bugprone-implicit-widening-of-multiplication-result clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppMultiwayPathsCovered",
                "shortDescription": {
                  "text": "hicpp-multiway-paths-covered clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityCompleteness",
                "shortDescription": {
                  "text": "nullability-completeness clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusMove",
                "shortDescription": {
                  "text": "cplusplus.Move clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcMaybeRepeatedUseOfWeak",
                "shortDescription": {
                  "text": "arc-maybe-repeated-use-of-weak clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredBaseTypesDirectConflict",
                "shortDescription": {
                  "text": "Type specified in '[BaseTypeRequired]' attribute conflicts another type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0078",
                "shortDescription": {
                  "text": "The 'l' suffix is easily confused with the digit '1'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnionMemberOfReferenceType",
                "shortDescription": {
                  "text": "Union member of reference type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnneededMemberFunction",
                "shortDescription": {
                  "text": "unneeded-member-function clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseStdSize",
                "shortDescription": {
                  "text": "std::size can be used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExplicitOwnershipType",
                "shortDescription": {
                  "text": "explicit-ownership-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuArrayMemberParenInit",
                "shortDescription": {
                  "text": "gnu-array-member-paren-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringLastIndexOfIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringLastIndexOfIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantMyClassQualifier",
                "shortDescription": {
                  "text": "Redundant 'MyClass.' qualifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringLastIndexOfIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityAvoidConstParamsInDecls",
                "shortDescription": {
                  "text": "readability-avoid-const-params-in-decls clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompoundTokenSplit",
                "shortDescription": {
                  "text": "compound-token-split clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtDoubleUserConversionInCopyInit",
                "shortDescription": {
                  "text": "More than one implicit conversion applied during copy-initialization. This is non-standard Microsoft C++ extension."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusNewDeleteLeaks",
                "shortDescription": {
                  "text": "cplusplus.NewDeleteLeaks clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMultipleSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (multiple spaces are prohibited)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousMemberTemplate",
                "shortDescription": {
                  "text": "ambiguous-member-template clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularHtml.Banana",
                "shortDescription": {
                  "text": "'Banana in a box' [()] violation in Angular 2 binding"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxAPI",
                "shortDescription": {
                  "text": "osx.API clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModulesAmbiguousInternalLinkage",
                "shortDescription": {
                  "text": "modules-ambiguous-internal-linkage clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnexpectedDirective",
                "shortDescription": {
                  "text": "The directive is unknown and will be ignored"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantNullCoalescingCondition",
                "shortDescription": {
                  "text": "'??' condition is known to be null or not null"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullArithmetic",
                "shortDescription": {
                  "text": "null-arithmetic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8851",
                "shortDescription": {
                  "text": "Record defined 'Equals' but not 'GetHashCode'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSizeofContainer",
                "shortDescription": {
                  "text": "bugprone-sizeof-container clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AttributeProducesTooManyTests",
                "shortDescription": {
                  "text": "NUnit. Specified attribute values produce too many tests."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.DeadCode",
                "shortDescription": {
                  "text": "HTML Dead Code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullableDereferenced",
                "shortDescription": {
                  "text": "nullability.NullableDereferenced clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IteratorMethodResultIsIgnored",
                "shortDescription": {
                  "text": "Return value of iterator is not used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseMethodIsInstanceOfType",
                "shortDescription": {
                  "text": "Use method IsInstanceOfType(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadIndent",
                "shortDescription": {
                  "text": "Incorrect indent (line indent should not be changed relative to the previous line elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.BindingWithoutContextNotResolved",
                "shortDescription": {
                  "text": "Unresolved binding path when DataContext is unknown"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadDeclarationBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around declaration braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftAbstract",
                "shortDescription": {
                  "text": "microsoft-abstract clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8860",
                "shortDescription": {
                  "text": "Types and aliases should not be named 'record'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VbUnreachableCode",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftExtraQualification",
                "shortDescription": {
                  "text": "microsoft-extra-qualification clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveToList.2",
                "shortDescription": {
                  "text": "Remove ToList()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RemoveToList.1",
                "shortDescription": {
                  "text": "Remove ToList()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumCompare",
                "shortDescription": {
                  "text": "enum-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTooWideScope",
                "shortDescription": {
                  "text": "Variable can be moved to inner scope"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EntityNameCapturedOnly.Local",
                "shortDescription": {
                  "text": "Entity is only used to capture its name (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInfiniteInheritance",
                "shortDescription": {
                  "text": "Possible infinite inheritance"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFreeNonheapObject",
                "shortDescription": {
                  "text": "free-nonheap-object clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp17CompatPedantic",
                "shortDescription": {
                  "text": "pre-c++17-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr61Cpp",
                "shortDescription": {
                  "text": "cert-err61-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExitTimeDestructors",
                "shortDescription": {
                  "text": "exit-time-destructors clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftExpressionZeroLeftOperand",
                "shortDescription": {
                  "text": "Shift expression with zero left operand equals zero"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDebugCompressionUnavailable",
                "shortDescription": {
                  "text": "debug-compression-unavailable clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEncodeType",
                "shortDescription": {
                  "text": "encode-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuStringLiteralOperatorTemplate",
                "shortDescription": {
                  "text": "gnu-string-literal-operator-template clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFunctionalStyleCast",
                "shortDescription": {
                  "text": "Functional-style cast is used instead of a C++ cast"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodHasAsyncOverload",
                "shortDescription": {
                  "text": "Method has async overload"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringStartsWithIsCultureSpecific",
                "shortDescription": {
                  "text": "String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilStrCatAppend",
                "shortDescription": {
                  "text": "abseil-str-cat-append clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitNullableCreation",
                "shortDescription": {
                  "text": "Redundant explicit nullable type creation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppExceptionBaseclass",
                "shortDescription": {
                  "text": "hicpp-exception-baseclass clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvokeAsExtensionMethod",
                "shortDescription": {
                  "text": "Convert static method invocation into extension method call"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuUnionCast",
                "shortDescription": {
                  "text": "gnu-union-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AsyncIteratorInvocationWithoutAwaitForeach",
                "shortDescription": {
                  "text": "Async iterator invocation without 'await foreach'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8847",
                "shortDescription": {
                  "text": "The switch expression does not handle some null inputs (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8846",
                "shortDescription": {
                  "text": "The switch expression does not handle all possible values of its input type (it is not exhaustive). However, a pattern with a 'when' clause might successfully match this value."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmptyInitStmt",
                "shortDescription": {
                  "text": "empty-init-stmt clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNullPropagation",
                "shortDescription": {
                  "text": "Replace if statement with null-propagating code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MustUseReturnValue",
                "shortDescription": {
                  "text": "Return value of [MustUseReturnValue] annotated method is not used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>() (replace with OfType(Of ..)())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>() (replace with OfType(Of ..)())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcDeallocInCategory",
                "shortDescription": {
                  "text": "objc-dealloc-in-category clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnguardedAvailability",
                "shortDescription": {
                  "text": "unguarded-availability clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneIncorrectRoundings",
                "shortDescription": {
                  "text": "bugprone-incorrect-roundings clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNewlineEof",
                "shortDescription": {
                  "text": "newline-eof clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RoutedEventResolveError",
                "shortDescription": {
                  "text": "Routed event descriptor field missing"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityMagicNumbers",
                "shortDescription": {
                  "text": "readability-magic-numbers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotationRedundancyInHierarchy",
                "shortDescription": {
                  "text": "Annotation duplicate in hierarchy"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8892",
                "shortDescription": {
                  "text": "Asynchronous 'Main' method will not be used as an entry point because a synchronous entry point was found."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalUndefinedCompare",
                "shortDescription": {
                  "text": "tautological-undefined-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BaseMethodCallWithDefaultParameter",
                "shortDescription": {
                  "text": "Call to base member with implicit default parameters"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AsyncVoidLambda",
                "shortDescription": {
                  "text": "Avoid using 'async' lambda when delegate type returns 'void'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstTypeofExpression",
                "shortDescription": {
                  "text": "Typeof is prohibited in Burst"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantUpdateSourceTriggerAttribute",
                "shortDescription": {
                  "text": "UpdateSourceTrigger=Default is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadStaticAtInstanceField",
                "shortDescription": {
                  "text": "[ThreadStatic] does not work with instance fields"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.TagNotClosed",
                "shortDescription": {
                  "text": "Unclosed tag"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityIsolateDeclaration",
                "shortDescription": {
                  "text": "readability-isolate-declaration clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppThisArgMemberFuncDelegateCtorIsUnsuportedByDotNetCore",
                "shortDescription": {
                  "text": "Delegate constructors with a member pointer parameter are unsupported by .NET Core"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": ".NET Core",
                      "index": 73,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscNonCopyableObjects",
                "shortDescription": {
                  "text": "misc-non-copyable-objects clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalUnsignedZeroCompare",
                "shortDescription": {
                  "text": "tautological-unsigned-zero-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAttributeWarning",
                "shortDescription": {
                  "text": "attribute-warning clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmlibcRestrictSystemLibcHeaders",
                "shortDescription": {
                  "text": "llvmlibc-restrict-system-libc-headers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantBaseQualifier",
                "shortDescription": {
                  "text": "Redundant 'base.' qualifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUniqueptrResetRelease",
                "shortDescription": {
                  "text": "misc-uniqueptr-reset-release clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPointerConversionDropsQualifiers",
                "shortDescription": {
                  "text": "Implicit conversion to pointer type with loss of qualifiers"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFunctionDefInObjcContainer",
                "shortDescription": {
                  "text": "function-def-in-objc-container clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAttributeUsageProperty",
                "shortDescription": {
                  "text": "Redundant [AttributeUsage] attribute property assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantBlankLines",
                "shortDescription": {
                  "text": "Incorrect blank lines (blank lines are redundant elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseDefaultMemberInit",
                "shortDescription": {
                  "text": "modernize-use-default-member-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantIsBeforeRelationalPattern",
                "shortDescription": {
                  "text": "Redundant 'is'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantSpace",
                "shortDescription": {
                  "text": "Incorrect spacing (space is redundant elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.MissingGridIndex",
                "shortDescription": {
                  "text": "Missing grid column/row setter for non-first child"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeProtected.Global",
                "shortDescription": {
                  "text": "Member can be made protected (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseResultPropertyDuplicatesExpectedResult",
                "shortDescription": {
                  "text": "NUnit. Test case Result property duplicates ExpectedResult."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCtu",
                "shortDescription": {
                  "text": "ctu clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUninitializedConstReference",
                "shortDescription": {
                  "text": "uninitialized-const-reference clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingLinebreak",
                "shortDescription": {
                  "text": "Incorrect line breaks (line break is missing elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesCCopyAssignmentSignature",
                "shortDescription": {
                  "text": "cppcoreguidelines-c-copy-assignment-signature clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EventNeverSubscribedTo.Global",
                "shortDescription": {
                  "text": "Event is never subscribed to (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLinkerWarnings",
                "shortDescription": {
                  "text": "linker-warnings clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatTooManyArgs",
                "shortDescription": {
                  "text": "Too many arguments in a call to boost::format"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedParameter.Global",
                "shortDescription": {
                  "text": "Unused parameter (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPredefinedIdentifierOutsideFunction",
                "shortDescription": {
                  "text": "predefined-identifier-outside-function clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionIsAlwaysTrueOrFalseAccordingToNullableAPIContract",
                "shortDescription": {
                  "text": "Expression is always 'true' or 'false' according to nullable reference types' annotations"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLambdaParameterType",
                "shortDescription": {
                  "text": "Redundant lambda expression parameter type specification"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcUnsafeRetainedAssign",
                "shortDescription": {
                  "text": "arc-unsafe-retained-assign clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC11Extensions",
                "shortDescription": {
                  "text": "c11-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopVariableIsNeverChangedInsideLoop",
                "shortDescription": {
                  "text": "Loop control variable is never changed inside loop"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullCharacter",
                "shortDescription": {
                  "text": "null-character clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalCompare",
                "shortDescription": {
                  "text": "tautological-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBPossibleMistakenCallToGetType.1",
                "shortDescription": {
                  "text": "Possible mistaken call to GetType()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBPossibleMistakenCallToGetType.2",
                "shortDescription": {
                  "text": "Possible mistaken call to GetType()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUEBlueprintCallableFunctionUnused",
                "shortDescription": {
                  "text": "BlueprintCallable function is never used in Blueprint or C++ code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticModuleImportInExternC",
                "shortDescription": {
                  "text": "module-import-in-extern-c clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingHeadTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (missing <head>)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeDefaultValueWhenTypeEvident",
                "shortDescription": {
                  "text": "Use preferred style of default value expression when type is evident"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantInlineSpecifier",
                "shortDescription": {
                  "text": "Redundant 'inline' specifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4ProbableMemoryIssuesWithUObject",
                "shortDescription": {
                  "text": "Non-UProperty object member can be destroyed during garbage collection, resulting in a stale pointer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUnconventionalAssignOperator",
                "shortDescription": {
                  "text": "misc-unconventional-assign-operator clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCFStringLiteral",
                "shortDescription": {
                  "text": "CFString-literal clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantElseKeywordInsideCompoundStatement",
                "shortDescription": {
                  "text": "Redundant 'else' keyword inside compound statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.IncorrectArgumentType",
                "shortDescription": {
                  "text": "NUnit. Incompatible argument type or incorrect argument value."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UsePatternMatching",
                "shortDescription": {
                  "text": "Convert 'as' expression type check and the following null check into pattern matching"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTemplateParameterShadowing",
                "shortDescription": {
                  "text": "Redeclaration of a template parameter from an outer scope"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticZeroLengthArray",
                "shortDescription": {
                  "text": "zero-length-array clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantMemberInit",
                "shortDescription": {
                  "text": "readability-redundant-member-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneFoldInitType",
                "shortDescription": {
                  "text": "bugprone-fold-init-type clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AsyncMethodMustBeTask",
                "shortDescription": {
                  "text": "NUnit. Async test method must return Task or Task<T>"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityStaticDefinitionInAnonymousNamespace",
                "shortDescription": {
                  "text": "readability-static-definition-in-anonymous-namespace clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneInaccurateErase",
                "shortDescription": {
                  "text": "bugprone-inaccurate-erase clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMismatchedReturnTypes",
                "shortDescription": {
                  "text": "mismatched-return-types clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIdiomaticParentheses",
                "shortDescription": {
                  "text": "idiomatic-parentheses clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLargeByValueCopy",
                "shortDescription": {
                  "text": "large-by-value-copy clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentNaming",
                "shortDescription": {
                  "text": "Inconsistent Naming"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnevaluatedExpression",
                "shortDescription": {
                  "text": "unevaluated-expression clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAnalyzerIncompatiblePlugin",
                "shortDescription": {
                  "text": "analyzer-incompatible-plugin clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.LastOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LastOrDefault() (replace with OfType(Of ..)().LastOrDefault())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.LastOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LastOrDefault() (replace with OfType(Of ..)().LastOrDefault(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPropertyAccessDotSyntax",
                "shortDescription": {
                  "text": "property-access-dot-syntax clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLastIndexOfIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLastIndexOfIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Razor.LayoutNotResolved",
                "shortDescription": {
                  "text": "Unknown Razor layout"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticHipOnly",
                "shortDescription": {
                  "text": "hip-only clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableTypeMark",
                "shortDescription": {
                  "text": "Type check for nullable type is equal to underlying type check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLastIndexOfIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.LastIndexOf is culture-specific (string.LastIndexOf(string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSwitchBool",
                "shortDescription": {
                  "text": "switch-bool clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitwiseInsteadOfLogical",
                "shortDescription": {
                  "text": "bitwise-instead-of-logical clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPedanticMacros",
                "shortDescription": {
                  "text": "pedantic-macros clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppSignedBitwise",
                "shortDescription": {
                  "text": "hicpp-signed-bitwise clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidUtf8",
                "shortDescription": {
                  "text": "invalid-utf8 clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonInlineVariableDefinitionInHeaderFile",
                "shortDescription": {
                  "text": "Non-inline variable definition in a header file"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedLabel",
                "shortDescription": {
                  "text": "unused-label clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.GridDefinitionsCanBeConvertedToAttribute",
                "shortDescription": {
                  "text": "Grid columns/rows definitions can be converted to attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixCstringCStringModeling",
                "shortDescription": {
                  "text": "unix.cstring.CStringModeling clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImportPreprocessorDirectivePedantic",
                "shortDescription": {
                  "text": "import-preprocessor-directive-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtCopyElisionInCopyInitDeclarator",
                "shortDescription": {
                  "text": "Call of deleted copy constructor elided during copy-initialization. This is non-standard Microsoft C++ extension."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ResourceNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve resource"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42016",
                "shortDescription": {
                  "text": "Runtime errors might occur when converting X to Y"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConstantConversion",
                "shortDescription": {
                  "text": "constant-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExternCCompat",
                "shortDescription": {
                  "text": "extern-c-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnguardedAvailabilityNew",
                "shortDescription": {
                  "text": "unguarded-availability-new clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedInternalType",
                "shortDescription": {
                  "text": "undefined-internal-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredAttributes",
                "shortDescription": {
                  "text": "ignored-attributes clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedefinitionOfDefaultArgumentInOverrideFunction",
                "shortDescription": {
                  "text": "Override function redefines a default parameter argument"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusVirtualCallModeling",
                "shortDescription": {
                  "text": "cplusplus.VirtualCallModeling clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerValistUnterminated",
                "shortDescription": {
                  "text": "valist.Unterminated clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.ThemeNotResolved",
                "shortDescription": {
                  "text": "Unknown theme"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerValistCopyToSelf",
                "shortDescription": {
                  "text": "valist.CopyToSelf clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42025",
                "shortDescription": {
                  "text": "Access of shared member through an instance"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonVirtualDtor",
                "shortDescription": {
                  "text": "non-virtual-dtor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFixedPointOverflow",
                "shortDescription": {
                  "text": "fixed-point-overflow clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcAssertEquals",
                "shortDescription": {
                  "text": "objc-assert-equals clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaObjCGenerics",
                "shortDescription": {
                  "text": "osx.cocoa.ObjCGenerics clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingSysroot",
                "shortDescription": {
                  "text": "missing-sysroot clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneNoEscape",
                "shortDescription": {
                  "text": "bugprone-no-escape clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedExperimentalCoroutine",
                "shortDescription": {
                  "text": "deprecated-experimental-coroutine clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11CompatPedantic",
                "shortDescription": {
                  "text": "c++11-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlUnknownDeviceFamilyTypeHighlighting",
                "shortDescription": {
                  "text": "Unknown DeviceFamily"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReservedUserDefinedLiteral",
                "shortDescription": {
                  "text": "reserved-user-defined-literal clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.DecimalParsingIsCultureDependent",
                "shortDescription": {
                  "text": "Decimal numbers parsed depending on current machine culture"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.InvalidType",
                "shortDescription": {
                  "text": "Object/markup extension of invalid type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitwiseOpParentheses",
                "shortDescription": {
                  "text": "bitwise-op-parentheses clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseEmplace",
                "shortDescription": {
                  "text": "modernize-use-emplace clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeRawStringLiteral",
                "shortDescription": {
                  "text": "modernize-raw-string-literal clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWasmExceptionSpec",
                "shortDescription": {
                  "text": "wasm-exception-spec clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExtraSemi",
                "shortDescription": {
                  "text": "extra-semi clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UselessBinaryOperation",
                "shortDescription": {
                  "text": "Useless arithmetical operation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMismatchedParameterTypes",
                "shortDescription": {
                  "text": "mismatched-parameter-types clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithExpressionModifiesAllMembers",
                "shortDescription": {
                  "text": "'with' expression modifies all accessible instance members"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadMemberAccessSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around member access symbols)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppMoveConstArg",
                "shortDescription": {
                  "text": "hicpp-move-const-arg clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverloadedVirtual",
                "shortDescription": {
                  "text": "overloaded-virtual clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBoostFormatLegacyCode",
                "shortDescription": {
                  "text": "Outdated format directive in boost::format"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract",
                "shortDescription": {
                  "text": "'??' condition is never null according to nullable reference types' annotations"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.OverloadsCollision",
                "shortDescription": {
                  "text": "Multiple overloads with same arguments count found"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticSelfInit",
                "shortDescription": {
                  "text": "static-self-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityBracesAroundStatements",
                "shortDescription": {
                  "text": "readability-braces-around-statements clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VariableHidesOuterVariable",
                "shortDescription": {
                  "text": "Variable in local function hides variable from outer scope"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMemsetTransposedArgs",
                "shortDescription": {
                  "text": "memset-transposed-args clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommentTypo",
                "shortDescription": {
                  "text": "Typo in comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofArrayDiv",
                "shortDescription": {
                  "text": "sizeof-array-div clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnreachableCode",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUndelegatedConstructor",
                "shortDescription": {
                  "text": "hicpp-undelegated-constructor clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Razor.SectionNotResolved",
                "shortDescription": {
                  "text": "Unknown Razor section"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.StaticResourceNotResolved",
                "shortDescription": {
                  "text": "Static resource not resolved"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.PartialViewNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown partial view)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.UnexpectedElement",
                "shortDescription": {
                  "text": "Unexpected element error"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralTypo",
                "shortDescription": {
                  "text": "Typo in string literal"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Count.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Count() (replace with OfType(Of ..)().Count(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousParameterNameInArgumentNullException",
                "shortDescription": {
                  "text": "Suspicious parameter name in ArgumentNullException"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelfAssignOverloaded",
                "shortDescription": {
                  "text": "self-assign-overloaded clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Count.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Count() (replace with OfType(Of ..)().Count())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreStackAddrEscapeBase",
                "shortDescription": {
                  "text": "core.StackAddrEscapeBase clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceSequenceEqualWithConstantPattern",
                "shortDescription": {
                  "text": "Replace 'SequenceEqual' with constant pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUserDefinedLiteralSuffixDoesNotStartWithUnderscore",
                "shortDescription": {
                  "text": "User-defined literal suffixes must start with an underscore"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeReplaceAutoPtr",
                "shortDescription": {
                  "text": "modernize-replace-auto-ptr clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecFopen",
                "shortDescription": {
                  "text": "android-cloexec-fopen clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBCheckForReferenceEqualityInstead.2",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBCheckForReferenceEqualityInstead.1",
                "shortDescription": {
                  "text": "Check for reference equality instead"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFinalFunctionInFinalClass",
                "shortDescription": {
                  "text": "Final function in a final class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteSetjmpDeclaration",
                "shortDescription": {
                  "text": "incomplete-setjmp-declaration clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSignConversion",
                "shortDescription": {
                  "text": "sign-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitRetainSelf",
                "shortDescription": {
                  "text": "implicit-retain-self clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterHidesMember",
                "shortDescription": {
                  "text": "Parameter hides member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesVirtualClassDestructor",
                "shortDescription": {
                  "text": "cppcoreguidelines-virtual-class-destructor clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeFallthrough",
                "shortDescription": {
                  "text": "unreachable-code-fallthrough clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFixedPointConversion",
                "shortDescription": {
                  "text": "implicit-fixed-point-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityInferredOnNestedType",
                "shortDescription": {
                  "text": "nullability-inferred-on-nested-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedReadonlyField",
                "shortDescription": {
                  "text": "Unassigned readonly field"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleAnonymousFunction",
                "shortDescription": {
                  "text": "Use preferred argument style for anonymous functions"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousInclude",
                "shortDescription": {
                  "text": "bugprone-suspicious-include clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantIfElseBlock",
                "shortDescription": {
                  "text": "Redundant 'else' keyword"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ScriptTagWithContentBeforeIncludes",
                "shortDescription": {
                  "text": "Script tag errors (<script> with content before included <script>)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscMisleadingIdentifier",
                "shortDescription": {
                  "text": "misc-misleading-identifier clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuZeroVariadicMacroArguments",
                "shortDescription": {
                  "text": "gnu-zero-variadic-macro-arguments clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantDeclaration",
                "shortDescription": {
                  "text": "readability-redundant-declaration clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrintfBadFormat",
                "shortDescription": {
                  "text": "Invalid printf format specifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantNameAttribute",
                "shortDescription": {
                  "text": "Redundant name attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnnamedNamespaceInHeaderFile",
                "shortDescription": {
                  "text": "Unnamed namespace in a header file"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0108,CS0114",
                "shortDescription": {
                  "text": "Keyword 'new' is required"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneRedundantBranchCondition",
                "shortDescription": {
                  "text": "bugprone-redundant-branch-condition clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtNotInitializedStaticConstLocalVar",
                "shortDescription": {
                  "text": "Not initialized static const local variable of scalar type. This is non-standard Microsoft C++ extension."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadEmptyBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around empty braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.NoNullPropagation",
                "shortDescription": {
                  "text": "Possible unintended bypass of lifetime check of underlying Unity engine object ('?.' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PublicConstructorInAbstractClass",
                "shortDescription": {
                  "text": "Make constructor in abstract class protected"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantRangeBound",
                "shortDescription": {
                  "text": "Redundant range bound"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationUnnecessaryConversion",
                "shortDescription": {
                  "text": "abseil-duration-unnecessary-conversion clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReservedIdMacro",
                "shortDescription": {
                  "text": "reserved-id-macro clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreCallAndMessageModeling",
                "shortDescription": {
                  "text": "core.CallAndMessageModeling clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17CompatPedantic",
                "shortDescription": {
                  "text": "c++17-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantGridDefinitions",
                "shortDescription": {
                  "text": "Single grid row/column definition is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IndexingByInvalidRange",
                "shortDescription": {
                  "text": "Possible 'System.ArgumentOutOfRangeException'. Start index must be less than or equal to end index."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalConstantCompare",
                "shortDescription": {
                  "text": "tautological-constant-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAddressOfTemporary",
                "shortDescription": {
                  "text": "address-of-temporary clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateMethodMatch",
                "shortDescription": {
                  "text": "duplicate-method-match clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNegatedPatternMatching",
                "shortDescription": {
                  "text": "Convert 'as' expression type check and the following null check into negated pattern matching"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantToStringCallForValueType",
                "shortDescription": {
                  "text": "Redundant 'object.ToString()' call for value types"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFrameworkIncludePrivateFromPublic",
                "shortDescription": {
                  "text": "framework-include-private-from-public clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.6",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.4",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.5",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneInfiniteLoop",
                "shortDescription": {
                  "text": "bugprone-infinite-loop clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringCompareIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlDuplicateDeviceFamilyTypeViewHighlighting",
                "shortDescription": {
                  "text": "Duplicate device family view"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSuggestDestructorOverride",
                "shortDescription": {
                  "text": "suggest-destructor-override clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.InefficientMultiplicationOrder",
                "shortDescription": {
                  "text": "Order of multiplication operations is inefficient"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.NoValuesProvided",
                "shortDescription": {
                  "text": "NUnit. No values provided in the attributes."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppVirtualFunctionInFinalClass",
                "shortDescription": {
                  "text": "Declaration of a non-overriding virtual function in a final or sealed class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestVarOrType_BuiltInTypes",
                "shortDescription": {
                  "text": "Use preferred 'var' style (for built-in types)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppNoAssembler",
                "shortDescription": {
                  "text": "hicpp-no-assembler clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoredDirective",
                "shortDescription": {
                  "text": "The directive will be ignored and can be safely removed"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleNullableAttributesUsage",
                "shortDescription": {
                  "text": "Multiple nullable attributes usage"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterMayBeConstPtrOrRef",
                "shortDescription": {
                  "text": "Parameter can be made pointer/reference to const"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceInefficientStringConcatenation",
                "shortDescription": {
                  "text": "performance-inefficient-string-concatenation clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastQualUnrelated",
                "shortDescription": {
                  "text": "cast-qual-unrelated clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReceiverForwardClass",
                "shortDescription": {
                  "text": "receiver-forward-class clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerSign",
                "shortDescription": {
                  "text": "pointer-sign clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedMacros",
                "shortDescription": {
                  "text": "unused-macros clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertClosureToMethodGroup",
                "shortDescription": {
                  "text": "Convert lambda expression into method group"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitIntExtension",
                "shortDescription": {
                  "text": "bit-int-extension clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitfieldEnumConversion",
                "shortDescription": {
                  "text": "bitfield-enum-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscStaticAssert",
                "shortDescription": {
                  "text": "misc-static-assert clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadBracesSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToSingle",
                "shortDescription": {
                  "text": "Replace with single call to Single(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFunctionDeclaration",
                "shortDescription": {
                  "text": "implicit-function-declaration clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCudaCompat",
                "shortDescription": {
                  "text": "cuda-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.DuplicateStyleSetter",
                "shortDescription": {
                  "text": "Duplicate style property/event setter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around expression braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseOverride",
                "shortDescription": {
                  "text": "modernize-use-override clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceNestedNamespacesStyle",
                "shortDescription": {
                  "text": "Use preferred declaration style (enforce nested namespaces style)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmptyBody",
                "shortDescription": {
                  "text": "empty-body clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreC2xCompat",
                "shortDescription": {
                  "text": "pre-c2x-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadDeclarationBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around declaration braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidNoreturn",
                "shortDescription": {
                  "text": "invalid-noreturn clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCaseLabel",
                "shortDescription": {
                  "text": "Redundant 'case' label"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableHidesMember",
                "shortDescription": {
                  "text": "Local variable hides member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleNullReferenceException",
                "shortDescription": {
                  "text": "Possible 'System.NullReferenceException'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ZeroIndexFromEnd",
                "shortDescription": {
                  "text": "Index from end must be greater than zero; use '^1' to refer to the last element"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassNeverInstantiated.Global",
                "shortDescription": {
                  "text": "Class is never instantiated (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObsoleteElement",
                "shortDescription": {
                  "text": "Use of obsolete type or type member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseFamiliarTemplateSyntaxForGenericLambdas",
                "shortDescription": {
                  "text": "Lambda can be rewritten to use explicit template parameters"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.AttributesQuotes",
                "shortDescription": {
                  "text": "Wrong attribute quotes"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStringInterpolation",
                "shortDescription": {
                  "text": "Redundant string interpolation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingSpace",
                "shortDescription": {
                  "text": "Incorrect spacing (space is missing elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilUpgradeDurationConversions",
                "shortDescription": {
                  "text": "abseil-upgrade-duration-conversions clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SealedMemberInSealedClass",
                "shortDescription": {
                  "text": "Sealed member in sealed class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcmp",
                "shortDescription": {
                  "text": "security.insecureAPI.bcmp clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToNullCoalescingExpression",
                "shortDescription": {
                  "text": "'if' statement can be rewritten as '??' expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaRetainCountBase",
                "shortDescription": {
                  "text": "osx.cocoa.RetainCountBase clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecMemfdCreate",
                "shortDescription": {
                  "text": "android-cloexec-memfd-create clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneLambdaFunctionName",
                "shortDescription": {
                  "text": "bugprone-lambda-function-name clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ScriptTagHasBothSrcAndContentAttributes",
                "shortDescription": {
                  "text": "Script tag errors (<script> with both src and content)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnicodeZeroWidth",
                "shortDescription": {
                  "text": "unicode-zero-width clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppInitializedValueIsAlwaysRewritten",
                "shortDescription": {
                  "text": "Declarator is reassigned in all paths before being read"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PartialMethodParameterNameMismatch",
                "shortDescription": {
                  "text": "Parameter name differs in partial method declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertFio38C",
                "shortDescription": {
                  "text": "cert-fio38-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAnonymousPackParens",
                "shortDescription": {
                  "text": "anonymous-pack-parens clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeReturn",
                "shortDescription": {
                  "text": "unreachable-code-return clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaLoops",
                "shortDescription": {
                  "text": "osx.cocoa.Loops clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppSpecialFunctionWithoutNoexceptSpecification",
                "shortDescription": {
                  "text": "Special function without noexcept specification"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUnusedUsingDecls",
                "shortDescription": {
                  "text": "misc-unused-using-decls clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppStaticDataMemberInUnnamedStruct",
                "shortDescription": {
                  "text": "Static data member in an anonymous class is not allowed by the C++ standard"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAutoDisableVptrSanitizer",
                "shortDescription": {
                  "text": "auto-disable-vptr-sanitizer clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSignedUnsignedWchar",
                "shortDescription": {
                  "text": "signed-unsigned-wchar clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxNumberObjectConversion",
                "shortDescription": {
                  "text": "osx.NumberObjectConversion clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugpronePosixReturn",
                "shortDescription": {
                  "text": "bugprone-posix-return clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OperatorWithoutMatchedCheckedOperator",
                "shortDescription": {
                  "text": "Operator without matching checked operator"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyLinqExpressionUseAll",
                "shortDescription": {
                  "text": "Simplify LINQ expression (use 'All')"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ValueParameterNotUsed",
                "shortDescription": {
                  "text": "'value' parameter is not used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMutableSpecifierOnReferenceMember",
                "shortDescription": {
                  "text": "Reference class member with 'mutable' specifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEnumerableCastCall",
                "shortDescription": {
                  "text": "Redundant 'IEnumerable.Cast<T>' or 'IEnumerable.OfType<T>' call"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinOsxCocoaLocalizabilityNonLocalizedStringChecker",
                "shortDescription": {
                  "text": "optin.osx.cocoa.localizability.NonLocalizedStringChecker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantMyBaseQualifier",
                "shortDescription": {
                  "text": "Redundant 'MyBase.' qualifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneForwardDeclarationNamespace",
                "shortDescription": {
                  "text": "bugprone-forward-declaration-namespace clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PreferGuidReference",
                "shortDescription": {
                  "text": "Prefer GUID-based assembly references"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl37C",
                "shortDescription": {
                  "text": "cert-dcl37-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedVarTemplate",
                "shortDescription": {
                  "text": "undefined-var-template clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingTitleTag",
                "shortDescription": {
                  "text": "Important tags or attributes missing (missing <title>)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFirstOrDefault.1",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BitwiseOperatorOnEnumWithoutFlags",
                "shortDescription": {
                  "text": "Bitwise operation on enum is not marked by [Flags] attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.ContentPlaceholderNotResolved",
                "shortDescription": {
                  "text": "Unknown content placeholder"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.OptionalParameterMustBeAtTheEndOfSegment",
                "shortDescription": {
                  "text": "Optional parameter must be at the end of the segment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedVariable",
                "shortDescription": {
                  "text": "Unused local variable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFirstOrDefault.3",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationAddition",
                "shortDescription": {
                  "text": "abseil-duration-addition clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFirstOrDefault.2",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantArgumentDefaultValue",
                "shortDescription": {
                  "text": "Redundant argument with default value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithFirstOrDefault.4",
                "shortDescription": {
                  "text": "Replace with FirstOrDefault($args$)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternAlwaysMatches",
                "shortDescription": {
                  "text": "The source expression always matches the provided pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadParensSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around parenthesis)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTypeArgumentsOfMethod",
                "shortDescription": {
                  "text": "Redundant type arguments of method"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLambdaCaptureNeverUsed",
                "shortDescription": {
                  "text": "Lambda capture is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixMallocSizeof",
                "shortDescription": {
                  "text": "unix.MallocSizeof clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMethodSignatures",
                "shortDescription": {
                  "text": "method-signatures clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousMathSignMethod",
                "shortDescription": {
                  "text": "Math.Sign() method always gives the same result"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMsExtAddressOfClassRValue",
                "shortDescription": {
                  "text": "Taking an address of class r-value is non-standard Microsoft C++ extension"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFutureAttributeExtensions",
                "shortDescription": {
                  "text": "future-attribute-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUENonExistentInputAxis",
                "shortDescription": {
                  "text": "Axis with this name does not exist"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadNamespaceBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around namespace braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceWhileStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'while' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmptyTranslationUnit",
                "shortDescription": {
                  "text": "empty-translation-unit clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArrayBounds",
                "shortDescription": {
                  "text": "array-bounds clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftVoidPseudoDtor",
                "shortDescription": {
                  "text": "microsoft-void-pseudo-dtor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeCastWithTypeCheck",
                "shortDescription": {
                  "text": "Type check and casts can be merged"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntVariableOverflow",
                "shortDescription": {
                  "text": "Possible overflow"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousLockOverSynchronizationPrimitive",
                "shortDescription": {
                  "text": "Suspicious locking over synchronization primitive"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityNamespaceComments",
                "shortDescription": {
                  "text": "google-readability-namespace-comments clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertStr34C",
                "shortDescription": {
                  "text": "cert-str34-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedTypeParameter",
                "shortDescription": {
                  "text": "Unused type parameter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDollarInIdentifierExtension",
                "shortDescription": {
                  "text": "dollar-in-identifier-extension clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationCFError",
                "shortDescription": {
                  "text": "osx.coreFoundation.CFError clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithStringIsNullOrEmpty",
                "shortDescription": {
                  "text": "Use 'String.IsNullOrEmpty'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegativeEqualityExpression",
                "shortDescription": {
                  "text": "Simplify negative equality expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIGetpw",
                "shortDescription": {
                  "text": "security.insecureAPI.getpw clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseStructuredBinding",
                "shortDescription": {
                  "text": "Structured binding can be used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.WebConfigPathWarning",
                "shortDescription": {
                  "text": "Referenced path cannot be found in the website"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuImaginaryConstant",
                "shortDescription": {
                  "text": "gnu-imaginary-constant clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecOpen",
                "shortDescription": {
                  "text": "android-cloexec-open clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityFunctionSize",
                "shortDescription": {
                  "text": "readability-function-size clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8714",
                "shortDescription": {
                  "text": "Nullability of type argument doesn't match 'notnull' constraint."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedGpopt",
                "shortDescription": {
                  "text": "unsupported-gpopt clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedPropertyIvar",
                "shortDescription": {
                  "text": "unused-property-ivar clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationDivision",
                "shortDescription": {
                  "text": "abseil-duration-division clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftOverflow",
                "shortDescription": {
                  "text": "shift-overflow clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeLocalFunctionBody",
                "shortDescription": {
                  "text": "Use preferred body style (convert into local function with preferred body style)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedResult",
                "shortDescription": {
                  "text": "unused-result clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseSourceMustBeStatic",
                "shortDescription": {
                  "text": "NUnit. Test case source must be static."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentation",
                "shortDescription": {
                  "text": "documentation clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyLinqExpressionUseAny",
                "shortDescription": {
                  "text": "Simplify LINQ expression (use 'Any')"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.InefficientMultidimensionalArrayUsage",
                "shortDescription": {
                  "text": "Use jagged or one-dimensional array instead of multidimensional array"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUseAfterMove",
                "shortDescription": {
                  "text": "bugprone-use-after-move clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToAutoPropertyWithPrivateSetter",
                "shortDescription": {
                  "text": "Convert property into auto-property with private setter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToStaticClass",
                "shortDescription": {
                  "text": "Convert into static class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToLast",
                "shortDescription": {
                  "text": "Replace with single call to Last(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14Compat",
                "shortDescription": {
                  "text": "c++14-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PerformanceCriticalCodeNullComparison",
                "shortDescription": {
                  "text": "Expensive null comparison"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8777",
                "shortDescription": {
                  "text": "Parameter must have a non-null value when exiting."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8776",
                "shortDescription": {
                  "text": "Member cannot be used in this attribute."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8775",
                "shortDescription": {
                  "text": "Member must conditionally have a non-null value when exiting a function."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftFixedEnum",
                "shortDescription": {
                  "text": "microsoft-fixed-enum clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8774",
                "shortDescription": {
                  "text": "Member must have a non-null value when exiting."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8770",
                "shortDescription": {
                  "text": "Method lacks '[DoesNotReturn]' annotation in order to match implemented or overridden member."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadCommaSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around comma)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAbstractModifier",
                "shortDescription": {
                  "text": "Redundant 'abstract' modifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitfieldConstantConversion",
                "shortDescription": {
                  "text": "bitfield-constant-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForeachCanBePartlyConvertedToQueryUsingAnotherGetEnumerator",
                "shortDescription": {
                  "text": "Part of foreach loop can be converted into LINQ-expression but another 'GetEnumerator' method will be used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleResolveCandidatesInText",
                "shortDescription": {
                  "text": "Ambiguous symbols in text argument"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.TagAttributeWithOptionalValue",
                "shortDescription": {
                  "text": "Attribute with optional value problem"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclarationHidesUncapturedLocal",
                "shortDescription": {
                  "text": "Hiding an uncaptured local declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.XamlXamarinFormsDataTypeAndBindingContextTypeMismatchedHighlighting",
                "shortDescription": {
                  "text": "Types in x:DataType and BindingContext mismatch"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArgumentUndefinedBehaviour",
                "shortDescription": {
                  "text": "argument-undefined-behaviour clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalValueRangeCompare",
                "shortDescription": {
                  "text": "tautological-value-range-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSarifFormatUnstable",
                "shortDescription": {
                  "text": "sarif-format-unstable clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneCopyConstructorInit",
                "shortDescription": {
                  "text": "bugprone-copy-constructor-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Web.IgnoredPath",
                "shortDescription": {
                  "text": "Ignored path"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAtomicImplicitSeqCst",
                "shortDescription": {
                  "text": "atomic-implicit-seq-cst clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeReturnBracedInitList",
                "shortDescription": {
                  "text": "modernize-return-braced-init-list clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleStringLiteral",
                "shortDescription": {
                  "text": "Use preferred argument style for string literal values"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20Extensions",
                "shortDescription": {
                  "text": "c++20-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesAvoidNonConstGlobalVariables",
                "shortDescription": {
                  "text": "cppcoreguidelines-avoid-non-const-global-variables clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCustomAtomicProperties",
                "shortDescription": {
                  "text": "custom-atomic-properties clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantMeQualifier",
                "shortDescription": {
                  "text": "Redundant 'Me.' qualifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousStringCompare",
                "shortDescription": {
                  "text": "bugprone-suspicious-string-compare clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCollectionInitializerElementBraces",
                "shortDescription": {
                  "text": "Redundant braces in collection initializer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeShrinkToFit",
                "shortDescription": {
                  "text": "modernize-shrink-to-fit clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedType.Global",
                "shortDescription": {
                  "text": "Type is never used (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentIsFullyDiscarded",
                "shortDescription": {
                  "text": "Assignment results are fully discarded"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAlignMismatch",
                "shortDescription": {
                  "text": "align-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8769",
                "shortDescription": {
                  "text": "Nullability of type of parameter doesn't match implemented member (possibly because of nullability attributes)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8768",
                "shortDescription": {
                  "text": "Nullability of return type doesn't match implemented member (possibly because of nullability attributes)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousSemicolon",
                "shortDescription": {
                  "text": "bugprone-suspicious-semicolon clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8767",
                "shortDescription": {
                  "text": "Nullability of type of parameter doesn't match implicitly implemented member (possibly because of nullability attributes)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8766",
                "shortDescription": {
                  "text": "Nullability of return type doesn't match implicitly implemented member (possibly because of nullability attributes)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8765",
                "shortDescription": {
                  "text": "Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8764",
                "shortDescription": {
                  "text": "Nullability of return type doesn't match overridden member (possibly because of nullability attributes)."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8763",
                "shortDescription": {
                  "text": "A method marked [DoesNotReturn] should not return."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8762",
                "shortDescription": {
                  "text": "Parameter must conditionally have a non-null value when exiting a function."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerToIntCast",
                "shortDescription": {
                  "text": "pointer-to-int-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AutoPropertyCanBeMadeGetOnly.Local",
                "shortDescription": {
                  "text": "Auto-property can be made get-only (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMainReturnType",
                "shortDescription": {
                  "text": "main-return-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantLambdaParameterList",
                "shortDescription": {
                  "text": "Redundant parameter list in lambda declarator"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFixedEnumExtension",
                "shortDescription": {
                  "text": "fixed-enum-extension clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEqualOperandsInBinaryExpression",
                "shortDescription": {
                  "text": "Binary operator acts on equal operands"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppJoinDeclarationAndAssignment",
                "shortDescription": {
                  "text": "Declaration and assignment can be joined"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUndefinedBinaryOperatorResult",
                "shortDescription": {
                  "text": "core.UndefinedBinaryOperatorResult clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppParameterNamesMismatch",
                "shortDescription": {
                  "text": "Parameter names do not match"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaNilArg",
                "shortDescription": {
                  "text": "osx.cocoa.NilArg clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VirtualMemberNeverOverridden.Global",
                "shortDescription": {
                  "text": "Virtual (overridable) member is never overridden (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppConstParameterInDeclaration",
                "shortDescription": {
                  "text": "Const-qualified parameter in a function declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCplusplusSelfAssignment",
                "shortDescription": {
                  "text": "cplusplus.SelfAssignment clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertTypeCheckPatternToNullCheck",
                "shortDescription": {
                  "text": "Use null check pattern instead of a type check succeeding on any not-null value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToVbAutoPropertyWithPrivateSetter",
                "shortDescription": {
                  "text": "Convert property to auto-property with private setter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNSObjectAttribute",
                "shortDescription": {
                  "text": "NSObject-attribute clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AsyncVoidMethod",
                "shortDescription": {
                  "text": "Avoid using 'async' methods with the 'void' return type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantBaseClassAccessSpecifier",
                "shortDescription": {
                  "text": "Redundant base class access specifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleRuntimeOperator",
                "shortDescription": {
                  "text": "google-runtime-operator clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBoolOperation",
                "shortDescription": {
                  "text": "bool-operation clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncludeNextOutsideHeader",
                "shortDescription": {
                  "text": "include-next-outside-header clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMember.Global",
                "shortDescription": {
                  "text": "Type member is never used (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDuplicateEnum",
                "shortDescription": {
                  "text": "duplicate-enum clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11CompatDeprecatedWritableStrings",
                "shortDescription": {
                  "text": "c++11-compat-deprecated-writable-strings clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPolymorphicClassWithNonVirtualPublicDestructor",
                "shortDescription": {
                  "text": "Polymorphic class with non-virtual public destructor"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8794",
                "shortDescription": {
                  "text": "Given expression always matches the provided pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantLinebreak",
                "shortDescription": {
                  "text": "Incorrect line breaks (line break is redundant elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSyncFetchAndNandSemanticsChanged",
                "shortDescription": {
                  "text": "sync-fetch-and-nand-semantics-changed clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxOSObjectRetainCount",
                "shortDescription": {
                  "text": "osx.OSObjectRetainCount clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyRegion",
                "shortDescription": {
                  "text": "Empty region"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertSwitchStatementToSwitchExpression",
                "shortDescription": {
                  "text": "Replace 'switch' statement with 'switch' expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedFunction",
                "shortDescription": {
                  "text": "unused-function clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantQualifier",
                "shortDescription": {
                  "text": "Redundant qualifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotateCanBeNullParameter",
                "shortDescription": {
                  "text": "Declaration nullability inferred (parameter is inferred to be nullable)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertErr52Cpp",
                "shortDescription": {
                  "text": "cert-err52-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingHeadAndBodyTags",
                "shortDescription": {
                  "text": "Important tags or attributes missing (missing <head> and <body>)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingPrototypeForCc",
                "shortDescription": {
                  "text": "missing-prototype-for-cc clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClassNeverUsed",
                "shortDescription": {
                  "text": "Class is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatZeroLength",
                "shortDescription": {
                  "text": "format-zero-length clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantNamespaceAlias",
                "shortDescription": {
                  "text": "Redundant namespace alias"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAvrRtlibLinkingQuirks",
                "shortDescription": {
                  "text": "avr-rtlib-linking-quirks clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.5",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.4",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRestrictExpansion",
                "shortDescription": {
                  "text": "restrict-expansion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.6",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, int, string, int, bool) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeleteAbstractNonVirtualDtor",
                "shortDescription": {
                  "text": "delete-abstract-non-virtual-dtor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11CompatBinaryLiteral",
                "shortDescription": {
                  "text": "c++98-c++11-compat-binary-literal clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesMacroUsage",
                "shortDescription": {
                  "text": "cppcoreguidelines-macro-usage clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringCompareIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.Compare is culture-specific (string.Compare(string, string, bool) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCastAlign",
                "shortDescription": {
                  "text": "cast-align clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedVariable",
                "shortDescription": {
                  "text": "unused-variable clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectBlankLinesNearBraces",
                "shortDescription": {
                  "text": "Incorrect blank lines (incorrect number of blank lines near braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedObjcPointerIntrospectionPerformSelector",
                "shortDescription": {
                  "text": "deprecated-objc-pointer-introspection-performSelector clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeMemberInit",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-member-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPortabilitySimdIntrinsics",
                "shortDescription": {
                  "text": "portability-simd-intrinsics clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPortabilityStdAllocatorConst",
                "shortDescription": {
                  "text": "portability-std-allocator-const clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatBindToTemporaryCopy",
                "shortDescription": {
                  "text": "c++98-compat-bind-to-temporary-copy clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MoreSpecificForeachVariableTypeAvailable",
                "shortDescription": {
                  "text": "Iteration variable can be declared with a more specific type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofArrayArgument",
                "shortDescription": {
                  "text": "sizeof-array-argument clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerTypeMismatch",
                "shortDescription": {
                  "text": "pointer-type-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ActionNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown action)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExportUnnamed",
                "shortDescription": {
                  "text": "export-unnamed clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeclarationAfterStatement",
                "shortDescription": {
                  "text": "declaration-after-statement clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeUnionAccess",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-union-access clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAnonymousTypePropertyName",
                "shortDescription": {
                  "text": "Redundant anonymous type property explicit name"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableAnnotationOnReferenceTypeConstraint",
                "shortDescription": {
                  "text": "Redundant nullable annotation on 'class?' constraint of type parameter constrained by non-nullable base type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedNonPrototype",
                "shortDescription": {
                  "text": "deprecated-non-prototype clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantNullableAnnotationOnTypeConstraintHasNonNullableTypeKind",
                "shortDescription": {
                  "text": "Redundant nullable annotation on base type constraint of type parameter having non-nullable type kind"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VoidMethodWithMustUseReturnValueAttribute",
                "shortDescription": {
                  "text": "'void' method is annotated by [MustUseReturnValue] attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftNegativeValue",
                "shortDescription": {
                  "text": "shift-negative-value clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBridgeCast",
                "shortDescription": {
                  "text": "bridge-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraIdDependentBackwardBranch",
                "shortDescription": {
                  "text": "altera-id-dependent-backward-branch clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityCompletenessOnArrays",
                "shortDescription": {
                  "text": "nullability-completeness-on-arrays clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceFixedStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'fixed' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStrncatSize",
                "shortDescription": {
                  "text": "strncat-size clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityUniqueptrDeleteRelease",
                "shortDescription": {
                  "text": "readability-uniqueptr-delete-release clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticKnrPromotedParameter",
                "shortDescription": {
                  "text": "knr-promoted-parameter clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodOverloadWithOptionalParameter",
                "shortDescription": {
                  "text": "Method with optional or 'params' parameter is hidden by overload"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreadStaticFieldHasInitializer",
                "shortDescription": {
                  "text": "Thread static field has initializer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.AvaloniaWrongBindingModeForStreamBindingOperator",
                "shortDescription": {
                  "text": "Using stream binding operator in TwoWay or OneWayToSource binding modes"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPISecuritySyntaxChecker",
                "shortDescription": {
                  "text": "security.insecureAPI.SecuritySyntaxChecker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTabsAndSpacesMismatch",
                "shortDescription": {
                  "text": "Incorrect indent (tabs/spaces mismatch)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.IdNotResolved",
                "shortDescription": {
                  "text": "Unknown ID"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInjectedClassName",
                "shortDescription": {
                  "text": "injected-class-name clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDestructor",
                "shortDescription": {
                  "text": "Empty destructor"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppReplaceTieWithStructuredBinding",
                "shortDescription": {
                  "text": "Structured binding can be used instead of tie(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFunctionMultiversion",
                "shortDescription": {
                  "text": "function-multiversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseEraseAlgorithm",
                "shortDescription": {
                  "text": "'std::erase'/'std::erase_if' can be used instead of the remove-erase idiom"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDeclaratorDisambiguatedAsFunction",
                "shortDescription": {
                  "text": "Declarator disambiguated as a function declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadDeclarationBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around declaration braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.InvalidMemberType",
                "shortDescription": {
                  "text": "Member of invalid type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeIntoLogicalPattern",
                "shortDescription": {
                  "text": "Merge null/pattern/value checks into 'or'/'and' patterns"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternIsAlwaysTrueOrFalse",
                "shortDescription": {
                  "text": "Pattern is always 'true' or always 'false'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PreferNonAllocApi",
                "shortDescription": {
                  "text": "Alternative non-allocating method available"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11Narrowing",
                "shortDescription": {
                  "text": "c++11-narrowing clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.DuplicatedParameter",
                "shortDescription": {
                  "text": "Parameter declared in route more than once"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSymbolSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around operator symbols)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantAccessSpecifier",
                "shortDescription": {
                  "text": "Access specifier does not change accessibility level"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp2bCompatPedantic",
                "shortDescription": {
                  "text": "pre-c++2b-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedLocalFunction",
                "shortDescription": {
                  "text": "Local function is never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVectorConversion",
                "shortDescription": {
                  "text": "vector-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTypeCheckInPattern",
                "shortDescription": {
                  "text": "Redundant type check in a pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadLinqLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around LINQ queries)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeObjectCreationWhenTypeEvident",
                "shortDescription": {
                  "text": "Use preferred style of 'new' expression when created type is evident"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertSig30C",
                "shortDescription": {
                  "text": "cert-sig30-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.PossibleNullReferenceException",
                "shortDescription": {
                  "text": "Possible 'null' value in the path of binding without fallback value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyOpenmpUseDefaultNone",
                "shortDescription": {
                  "text": "openmp-use-default-none clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.IncorrectRangeBounds",
                "shortDescription": {
                  "text": "NUnit. Incorrect range bounds. 'to' must be greater than or equal to 'from'."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMistakenCallToGetType.2",
                "shortDescription": {
                  "text": "Possible mistaken call to GetType()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMistakenCallToGetType.1",
                "shortDescription": {
                  "text": "Possible mistaken call to GetType()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUnaryStaticAssert",
                "shortDescription": {
                  "text": "modernize-unary-static-assert clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMultipleWriteAccessInDoubleCheckLocking",
                "shortDescription": {
                  "text": "Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42104",
                "shortDescription": {
                  "text": "Variable is used before it has been assigned a value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedAutoPropertyAccessor.Local",
                "shortDescription": {
                  "text": "Auto-property accessor is never used (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidIboutlet",
                "shortDescription": {
                  "text": "invalid-iboutlet clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnnamedTypeTemplateArgs",
                "shortDescription": {
                  "text": "unnamed-type-template-args clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ParameterTypeCanBeMadeStricter",
                "shortDescription": {
                  "text": "Parameter's type can be made stricter due to applied constraints"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseAlgorithmWithCount",
                "shortDescription": {
                  "text": "Algorithm accepting an iterator and a count can be used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPedantic",
                "shortDescription": {
                  "text": "pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCmseUnionLeak",
                "shortDescription": {
                  "text": "cmse-union-leak clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToConstant.Global",
                "shortDescription": {
                  "text": "Convert local variable or field into constant (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSemicolonSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around semicolon)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNsconsumedMismatch",
                "shortDescription": {
                  "text": "nsconsumed-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecInotifyInit1",
                "shortDescription": {
                  "text": "android-cloexec-inotify-init1 clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CenterTagIsObsolete",
                "shortDescription": {
                  "text": "Obsolete tags and attributes (<center> is obsolete)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilCleanupCtad",
                "shortDescription": {
                  "text": "abseil-cleanup-ctad clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp17CompatMangling",
                "shortDescription": {
                  "text": "c++17-compat-mangling clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantIteratorKeyword",
                "shortDescription": {
                  "text": "Iterator function without 'Yield' statements"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitExceptionSpecMismatch",
                "shortDescription": {
                  "text": "implicit-exception-spec-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuVariableSizedTypeNotAtEnd",
                "shortDescription": {
                  "text": "gnu-variable-sized-type-not-at-end clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaDefaultArgumentsDeclarations",
                "shortDescription": {
                  "text": "fuchsia-default-arguments-declarations clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassNeverInstantiated.Local",
                "shortDescription": {
                  "text": "Class is never instantiated (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticForLoopAnalysis",
                "shortDescription": {
                  "text": "for-loop-analysis clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBoolConversion",
                "shortDescription": {
                  "text": "bool-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.DeadCode",
                "shortDescription": {
                  "text": "ASP.NET Dead Code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl50Cpp",
                "shortDescription": {
                  "text": "cert-dcl50-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingStdCLibraryFunctions",
                "shortDescription": {
                  "text": "apiModeling.StdCLibraryFunctions clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadControlBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around statement braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseUncaughtExceptions",
                "shortDescription": {
                  "text": "modernize-use-uncaught-exceptions clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OutdentIsOffPrevLevel",
                "shortDescription": {
                  "text": "Incorrect indent (line indent should be restored to the previous level elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Any.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Any() (replace with OfType(Of ..)().Any(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.Any.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Any() (replace with OfType(Of ..)().Any())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EscapedKeyword",
                "shortDescription": {
                  "text": "Keyword will be escaped during code generation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNullableAttributesSupportedByCompiler",
                "shortDescription": {
                  "text": "Use compiler-supported nullable attributes"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaDefaultArgumentsCalls",
                "shortDescription": {
                  "text": "fuchsia-default-arguments-calls clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAlwaysInlineCoroutine",
                "shortDescription": {
                  "text": "always-inline-coroutine clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownCudaVersion",
                "shortDescription": {
                  "text": "unknown-cuda-version clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.Obsolete",
                "shortDescription": {
                  "text": "Obsolete or nonstandard element"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GCSuppressFinalizeForTypeWithoutDestructor",
                "shortDescription": {
                  "text": "'GC.SuppressFinalize' is invoked for type without destructor"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppHeaderHasBeenAlreadyIncluded",
                "shortDescription": {
                  "text": "Guarded header has already been included"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.TestCaseSourceCannotBeResolved",
                "shortDescription": {
                  "text": "NUnit. Cannot resolve symbol in TestCaseSource or ValueSource attribute."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterTypeCanBeEnumerable.Global",
                "shortDescription": {
                  "text": "Parameter type can be IEnumerable<T> (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrecompiledHeaderNotFound",
                "shortDescription": {
                  "text": "Precompiled header is not found"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.LongCount",
                "shortDescription": {
                  "text": "Replace with OfType<T>().LongCount()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnicode",
                "shortDescription": {
                  "text": "unicode clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMultipleMoveVbase",
                "shortDescription": {
                  "text": "multiple-move-vbase clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCstringFormatDirective",
                "shortDescription": {
                  "text": "cstring-format-directive clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityMisplacedArrayIndex",
                "shortDescription": {
                  "text": "readability-misplaced-array-index clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyAttributes",
                "shortDescription": {
                  "text": "thread-safety-attributes clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExceptions",
                "shortDescription": {
                  "text": "exceptions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceOverridingDestructorStyle",
                "shortDescription": {
                  "text": "Use preferred overriding function style (enforce overriding destructor style)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseWithExpressionToCopyStruct",
                "shortDescription": {
                  "text": "Use 'with' expression to copy struct"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilFasterStrsplitDelimiter",
                "shortDescription": {
                  "text": "abseil-faster-strsplit-delimiter clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDivisionByZero",
                "shortDescription": {
                  "text": "division-by-zero clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInterruptServiceRoutine",
                "shortDescription": {
                  "text": "interrupt-service-routine clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PropertyFieldKeywordIsNeverUsed",
                "shortDescription": {
                  "text": "Backing field is assigned but never used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.SymbolNotResolved",
                "shortDescription": {
                  "text": "Symbol not resolved"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingSelectorName",
                "shortDescription": {
                  "text": "missing-selector-name clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DoubleNegationInPattern",
                "shortDescription": {
                  "text": "Simplify negated pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneDynamicStaticInitializers",
                "shortDescription": {
                  "text": "bugprone-dynamic-static-initializers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFlexibleArrayExtensions",
                "shortDescription": {
                  "text": "flexible-array-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PlaceAssignmentExpressionIntoBlock",
                "shortDescription": {
                  "text": "Place assignment expression into block"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDynamicExceptionSpec",
                "shortDescription": {
                  "text": "dynamic-exception-spec clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofArrayDecay",
                "shortDescription": {
                  "text": "sizeof-array-decay clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleUnintendedReferenceComparison",
                "shortDescription": {
                  "text": "Possible unintended reference comparison"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14Extensions",
                "shortDescription": {
                  "text": "c++14-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.NoNullCoalescing",
                "shortDescription": {
                  "text": "Possible unintended bypass of lifetime check of underlying Unity engine object ('??' on a type deriving from 'UnityEngine.Object' bypasses the lifetime check on the underlying Unity engine object)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.ExplicitTagComparison",
                "shortDescription": {
                  "text": "Use 'CompareTag' instead of explicit string comparison"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLongFloat",
                "shortDescription": {
                  "text": "'long' floats are not allowed by the C++ standard"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPossiblyUninitializedMember",
                "shortDescription": {
                  "text": "Possibly uninitialized class member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityStringCompare",
                "shortDescription": {
                  "text": "readability-string-compare clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitConversionFloatingPointToBool",
                "shortDescription": {
                  "text": "implicit-conversion-floating-point-to-bool clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceIfStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'if' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSimpleAssignment.True",
                "shortDescription": {
                  "text": "Replace with simple assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDateTime",
                "shortDescription": {
                  "text": "date-time clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraUnrollLoops",
                "shortDescription": {
                  "text": "altera-unroll-loops clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedEnumCompare",
                "shortDescription": {
                  "text": "deprecated-enum-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReturnStackAddress",
                "shortDescription": {
                  "text": "return-stack-address clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.UnexpectedTextToken",
                "shortDescription": {
                  "text": "Unexpected text token error"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadListLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around comma in lists)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MissingBlankLines",
                "shortDescription": {
                  "text": "Incorrect blank lines (blank lines are missing elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeMissingParentheses",
                "shortDescription": {
                  "text": "Add parentheses to avoid non-obvious precedence"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIVfork",
                "shortDescription": {
                  "text": "security.insecureAPI.vfork clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTabsOutsideIndent",
                "shortDescription": {
                  "text": "Incorrect spacing (tabs are prohibited except for indentation)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationCFRetainRelease",
                "shortDescription": {
                  "text": "osx.coreFoundation.CFRetainRelease clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMemberInSuper.Global",
                "shortDescription": {
                  "text": "Type member is never accessed via base type (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeDeprecatedIosBaseAliases",
                "shortDescription": {
                  "text": "modernize-deprecated-ios-base-aliases clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInstantiationAfterSpecialization",
                "shortDescription": {
                  "text": "instantiation-after-specialization clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToLastOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to LastOrDefault(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SeparateControlTransferStatement",
                "shortDescription": {
                  "text": "Separate control transfer statement with blank line"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC99Extensions",
                "shortDescription": {
                  "text": "c99-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesInitVariables",
                "shortDescription": {
                  "text": "cppcoreguidelines-init-variables clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RiderSecurityErrorsInspection",
                "shortDescription": {
                  "text": "Rider project security errors"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPassFailed",
                "shortDescription": {
                  "text": "pass-failed clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpinLockInReadonlyField",
                "shortDescription": {
                  "text": "Do not store SpinLock in readonly field"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumEnumConversion",
                "shortDescription": {
                  "text": "enum-enum-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeSequentialChecks",
                "shortDescription": {
                  "text": "Merge sequential checks into single conditional access check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSuggestOverride",
                "shortDescription": {
                  "text": "suggest-override clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDefaultInitializationWithNoUserConstructor",
                "shortDescription": {
                  "text": "Default initialization of a const-qualified object of a type without a user-provided default constructor"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseTypeTraitAlias",
                "shortDescription": {
                  "text": "Type trait can be simplified using a template alias or a variable template"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberHidesInterfaceMemberWithDefaultImplementation",
                "shortDescription": {
                  "text": "Non-public member in implementation  class hides default implementation in interface"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCoroutineMissingUnhandledException",
                "shortDescription": {
                  "text": "coroutine-missing-unhandled-exception clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSwitchEnum",
                "shortDescription": {
                  "text": "switch-enum clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantEventFunction",
                "shortDescription": {
                  "text": "Redundant Unity event function"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullDereference",
                "shortDescription": {
                  "text": "null-dereference clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticJumpSehFinally",
                "shortDescription": {
                  "text": "jump-seh-finally clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownWarningOption",
                "shortDescription": {
                  "text": "unknown-warning-option clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSourceUsesOpenmp",
                "shortDescription": {
                  "text": "source-uses-openmp clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPointerToIntegralConversion",
                "shortDescription": {
                  "text": "Implicit pointer to integer conversion"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VariableCanBeNotNullable",
                "shortDescription": {
                  "text": "Variable can be declared as non-nullable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftExpressionRealShiftCountIsZero",
                "shortDescription": {
                  "text": "Actual shift count equals zero"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ResxNotResolved",
                "shortDescription": {
                  "text": "Cannot resolve symbol"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBitwiseConditionalParentheses",
                "shortDescription": {
                  "text": "bitwise-conditional-parentheses clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecPipe",
                "shortDescription": {
                  "text": "android-cloexec-pipe clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptyObjectCreationArgumentList",
                "shortDescription": {
                  "text": "Redundant empty argument list on object creation expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.AssignNullToNotNullAttribute",
                "shortDescription": {
                  "text": "Possible 'null' assignment to non-nullable entity"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofPointerDiv",
                "shortDescription": {
                  "text": "sizeof-pointer-div clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMpiBufferDeref",
                "shortDescription": {
                  "text": "mpi-buffer-deref clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatNonliteral",
                "shortDescription": {
                  "text": "format-nonliteral clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTernaryExpression",
                "shortDescription": {
                  "text": "Redundant conditional ternary expression usage"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecDup",
                "shortDescription": {
                  "text": "android-cloexec-dup clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalAccessQualifierIsNonNullableAccordingToAPIContract",
                "shortDescription": {
                  "text": "Conditional access qualifier expression is not null according to nullable reference types' annotations"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityQualifiedAuto",
                "shortDescription": {
                  "text": "readability-qualified-auto clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelector",
                "shortDescription": {
                  "text": "selector clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppSmartPointerVsMakeFunction",
                "shortDescription": {
                  "text": "Constructor of smart pointer is used instead of its make function"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringPlusChar",
                "shortDescription": {
                  "text": "string-plus-char clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppStaticSpecifierOnAnonymousNamespaceMember",
                "shortDescription": {
                  "text": "Redundant 'static' specifier on an anonymous namespace member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShiftCountOverflow",
                "shortDescription": {
                  "text": "shift-count-overflow clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCppCompat",
                "shortDescription": {
                  "text": "c++-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidTokenPaste",
                "shortDescription": {
                  "text": "invalid-token-paste clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11ExtraSemi",
                "shortDescription": {
                  "text": "c++11-extra-semi clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonportableVectorInitialization",
                "shortDescription": {
                  "text": "nonportable-vector-initialization clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantBindingModeAttribute",
                "shortDescription": {
                  "text": "Binding mode is equal to default"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__WME006",
                "shortDescription": {
                  "text": "Namespace should be default namespace of this project"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadDeclarationBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around declaration braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityNonConstParameter",
                "shortDescription": {
                  "text": "readability-non-const-parameter clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneDanglingHandle",
                "shortDescription": {
                  "text": "bugprone-dangling-handle clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftDrectveSection",
                "shortDescription": {
                  "text": "microsoft-drectve-section clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDocumentationHtml",
                "shortDescription": {
                  "text": "documentation-html clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSuspiciousBzero",
                "shortDescription": {
                  "text": "suspicious-bzero clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityFloatLoopCounter",
                "shortDescription": {
                  "text": "security.FloatLoopCounter clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleAssignment.True",
                "shortDescription": {
                  "text": "Replace with single assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OptionalParameterHierarchyMismatch",
                "shortDescription": {
                  "text": "Mismatch of optional parameter value in overridden method"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVla",
                "shortDescription": {
                  "text": "vla clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantBooleanExpressionArgument",
                "shortDescription": {
                  "text": "Redundant argument in conditional expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBuiltinRequiresHeader",
                "shortDescription": {
                  "text": "builtin-requires-header clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StackAllocInsideLoop",
                "shortDescription": {
                  "text": "Using stackalloc inside loop"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreCallAndMessage",
                "shortDescription": {
                  "text": "core.CallAndMessage clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CDeclarationWithImplicitIntType",
                "shortDescription": {
                  "text": "Type-specifier missing, defaults to int"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.RangeStepSignMismatch",
                "shortDescription": {
                  "text": "NUnit. Mismatch of the range step sign."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantNamespaceDefinition",
                "shortDescription": {
                  "text": "Namespace definition containing single class specialization"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppStringLiteralToCharPointerConversion",
                "shortDescription": {
                  "text": "String literal to char pointer conversion"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFallthroughPerFunction",
                "shortDescription": {
                  "text": "implicit-fallthrough-per-function clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDynamicClassMemaccess",
                "shortDescription": {
                  "text": "dynamic-class-memaccess clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAccessorBody",
                "shortDescription": {
                  "text": "Redundant accessor body"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompoundTokenSplitByMacro",
                "shortDescription": {
                  "text": "compound-token-split-by-macro clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNewReturnsNull",
                "shortDescription": {
                  "text": "new-returns-null clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNotAllPathsReturnValue",
                "shortDescription": {
                  "text": "Not all control paths return a value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.UnusedRemoveOrClearTag",
                "shortDescription": {
                  "text": "Redundant remove or clear element"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceDoStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'do-while' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedVolatileLvalue",
                "shortDescription": {
                  "text": "unused-volatile-lvalue clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmNamespaceComment",
                "shortDescription": {
                  "text": "llvm-namespace-comment clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedAvailabilityGuard",
                "shortDescription": {
                  "text": "unsupported-availability-guard clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedCb",
                "shortDescription": {
                  "text": "unsupported-cb clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleOrderBy",
                "shortDescription": {
                  "text": "Multiple sequential 'OrderBy' invocation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBuiltinMemcpyChkSize",
                "shortDescription": {
                  "text": "builtin-memcpy-chk-size clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyDarwinAvoidSpinlock",
                "shortDescription": {
                  "text": "darwin-avoid-spinlock clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExplicitInitializeCall",
                "shortDescription": {
                  "text": "explicit-initialize-call clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleDefaultArguments",
                "shortDescription": {
                  "text": "google-default-arguments clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuFlexibleArrayInitializer",
                "shortDescription": {
                  "text": "gnu-flexible-array-initializer clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppReturnNoValueInNonVoidFunction",
                "shortDescription": {
                  "text": "A function or a lambda with non-void return type should return a value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndefinedInternal",
                "shortDescription": {
                  "text": "undefined-internal clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalizableElement",
                "shortDescription": {
                  "text": "Element is localizable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPropertyAttributeMismatch",
                "shortDescription": {
                  "text": "property-attribute-mismatch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppLocalVariableWithNonTrivialDtorIsNeverUsed",
                "shortDescription": {
                  "text": "Local variable is never used, but may have side-effects in its destructor"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertOop58Cpp",
                "shortDescription": {
                  "text": "cert-oop58-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC2xExtensions",
                "shortDescription": {
                  "text": "c2x-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadExpressionBracesLineBreaks",
                "shortDescription": {
                  "text": "Incorrect line breaks (around expression braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticShadow",
                "shortDescription": {
                  "text": "shadow clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverAligned",
                "shortDescription": {
                  "text": "over-aligned clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppVariableCanBeMadeConstexpr",
                "shortDescription": {
                  "text": "Variable can be made constexpr"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InlineTemporaryVariable",
                "shortDescription": {
                  "text": "Inline temporary variable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnderalignedExceptionObject",
                "shortDescription": {
                  "text": "underaligned-exception-object clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAbstractFinalClass",
                "shortDescription": {
                  "text": "Abstract final class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StaticMemberInitializerReferesToMemberBelow",
                "shortDescription": {
                  "text": "Static member initializer refers to static member below or in other part"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUsingResultOfAssignmentAsCondition",
                "shortDescription": {
                  "text": "Result of assignment is used as condition"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.ControllerRouteParameterIsNotPassedToMethods",
                "shortDescription": {
                  "text": "Controller's route parameter can be passed to methods"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EqualExpressionComparison",
                "shortDescription": {
                  "text": "Similar expressions comparison"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFloatZeroConversion",
                "shortDescription": {
                  "text": "float-zero-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantBaseClassInitializer",
                "shortDescription": {
                  "text": "Redundant base class initializer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSizeofPointerMemaccess",
                "shortDescription": {
                  "text": "sizeof-pointer-memaccess clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousEnumUsage",
                "shortDescription": {
                  "text": "bugprone-suspicious-enum-usage clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPsabi",
                "shortDescription": {
                  "text": "psabi clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptyObjectOrCollectionInitializer",
                "shortDescription": {
                  "text": "Redundant empty object or collection initializer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownArgument",
                "shortDescription": {
                  "text": "unknown-argument clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseNullptr",
                "shortDescription": {
                  "text": "hicpp-use-nullptr clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNullableReferenceTypesAnnotationSyntax",
                "shortDescription": {
                  "text": "Use type annotation syntax"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntVariableOverflowInCheckedContext",
                "shortDescription": {
                  "text": "Possible overflow in checked context"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp20CompatPedantic",
                "shortDescription": {
                  "text": "pre-c++20-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassCanBeSealed.Local",
                "shortDescription": {
                  "text": "Class can be made sealed (non-inheritable) (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionRecursiveOnAllPaths",
                "shortDescription": {
                  "text": "Function is recursive on all execution paths"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PreferGenericMethodOverload",
                "shortDescription": {
                  "text": "String based lookup of component type is inefficient"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TabsAreDisallowed",
                "shortDescription": {
                  "text": "Usage of tabulation character for indentation is prohibited"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStringConcatenation",
                "shortDescription": {
                  "text": "string-concatenation clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrecompiledHeaderIsNotIncluded",
                "shortDescription": {
                  "text": "Precompiled header is not included"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNoDiscardExpression",
                "shortDescription": {
                  "text": "Result of nodiscard function is not used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuStatementExpressionFromMacroExpansion",
                "shortDescription": {
                  "text": "gnu-statement-expression-from-macro-expansion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantParentheses",
                "shortDescription": {
                  "text": "Remove redundant parentheses"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedMemberInSuper.Local",
                "shortDescription": {
                  "text": "Type member is never accessed via base type (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVlaExtension",
                "shortDescription": {
                  "text": "vla-extension clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeStaticCastDowncast",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-static-cast-downcast clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CompareOfFloatsByEqualityOperator",
                "shortDescription": {
                  "text": "Equality comparison of floating point numbers"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityDuplicateInclude",
                "shortDescription": {
                  "text": "readability-duplicate-include clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl03C",
                "shortDescription": {
                  "text": "cert-dcl03-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCodeGenericAssoc",
                "shortDescription": {
                  "text": "unreachable-code-generic-assoc clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl54Cpp",
                "shortDescription": {
                  "text": "cert-dcl54-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingFieldInitializers",
                "shortDescription": {
                  "text": "missing-field-initializers clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonParsableElement",
                "shortDescription": {
                  "text": "Part of the code cannot be parsed"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberInitializerValueIgnored",
                "shortDescription": {
                  "text": "Member initialized value ignored"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConstantLogicalOperand",
                "shortDescription": {
                  "text": "constant-logical-operand clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckNamespace",
                "shortDescription": {
                  "text": "Namespace does not correspond to file location"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToAny",
                "shortDescription": {
                  "text": "Replace with single call to Any(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToAutoProperty",
                "shortDescription": {
                  "text": "Convert property into auto-property"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotAccessedOutParameterVariable",
                "shortDescription": {
                  "text": "Non-accessed local variable only used to discard the 'out' parameter value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseFirstInstead",
                "shortDescription": {
                  "text": "Use First() instead"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RouteTemplates.RouteTokenNotResolved",
                "shortDescription": {
                  "text": "Route token not resolved"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPreCpp14Compat",
                "shortDescription": {
                  "text": "pre-c++14-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedVariable.Compiler",
                "shortDescription": {
                  "text": "Unused local variable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyGeneralCatchClause",
                "shortDescription": {
                  "text": "Empty general catch clause"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RiderSolutionErrorsInspection",
                "shortDescription": {
                  "text": "Rider toolset and environment errors"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftUnqualifiedFriend",
                "shortDescription": {
                  "text": "microsoft-unqualified-friend clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredQualifiers",
                "shortDescription": {
                  "text": "ignored-qualifiers clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuLineMarker",
                "shortDescription": {
                  "text": "gnu-line-marker clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleMultipleEnumeration",
                "shortDescription": {
                  "text": "Possible multiple enumeration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AutoPropertyCanBeMadeGetOnly.Global",
                "shortDescription": {
                  "text": "Auto-property can be made get-only (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumFloatConversion",
                "shortDescription": {
                  "text": "enum-float-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC42105,BC42106,BC42107",
                "shortDescription": {
                  "text": "Function doesn't return a reference type value on all code paths"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PassStringInterpolation",
                "shortDescription": {
                  "text": "Pass string interpolation expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadChildStatementIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around child statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleReadabilityBracesAroundStatements",
                "shortDescription": {
                  "text": "google-readability-braces-around-statements clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantArrayCreationExpression",
                "shortDescription": {
                  "text": "Array creation can be replaced with array initializer"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfStatementToReturnStatement",
                "shortDescription": {
                  "text": "'if-return' statement can be rewritten as 'return' statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UlTagContainsNonLiElements",
                "shortDescription": {
                  "text": "Elements not allowed in context (<ul> contains elements other than <li> or <li> is unclosed)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleStatementsOnOneLine",
                "shortDescription": {
                  "text": "Incorrect line breaks (multiple statements on one line)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNameOfInsteadOfTypeOf",
                "shortDescription": {
                  "text": "Use 'nameof' expression to reference type name"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC40056",
                "shortDescription": {
                  "text": "Namespace or type specified in the Imports 'name' doesn't contain any public member or cannot be found"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticRangeLoopAnalysis",
                "shortDescription": {
                  "text": "range-loop-analysis clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseImplicitByValModifier",
                "shortDescription": {
                  "text": "Use implicit 'ByVal' modifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNodiscardFunctionWithoutReturnValue",
                "shortDescription": {
                  "text": "[[nodiscard]] cannot be applied to functions without a return value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantImmediateDelegateInvocation",
                "shortDescription": {
                  "text": "Immediate delegate invocation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeTypeMemberModifiers",
                "shortDescription": {
                  "text": "Use explicit or implicit modifier definition for type members"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppBadSpacesAfterKeyword",
                "shortDescription": {
                  "text": "Incorrect spacing (between keyword and parenthesis)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IntroduceOptionalParameters.Local",
                "shortDescription": {
                  "text": "Introduce optional parameters (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.AutoFixture.RedundantArgumentInInlineAutoDataAttribute",
                "shortDescription": {
                  "text": "NUnit.AutoFixture. Redundant argument in InlineAutoData attribute."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinCplusplusVirtualCall",
                "shortDescription": {
                  "text": "optin.cplusplus.VirtualCall clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullabilityExtension",
                "shortDescription": {
                  "text": "nullability-extension clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticClangClPch",
                "shortDescription": {
                  "text": "clang-cl-pch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEntityUsedOnlyInUnevaluatedContext",
                "shortDescription": {
                  "text": "Declarator is used only in unevaluated context"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantFixedPointerDeclaration",
                "shortDescription": {
                  "text": "Redundant fixed pointer declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.Warning",
                "shortDescription": {
                  "text": "HTML Warning"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantControlFlowJump",
                "shortDescription": {
                  "text": "Redundant control flow jump statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBranchProtection",
                "shortDescription": {
                  "text": "branch-protection clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToUsingDeclaration",
                "shortDescription": {
                  "text": "Convert into 'using' declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerWebkitUncountedLambdaCapturesChecker",
                "shortDescription": {
                  "text": "webkit.UncountedLambdaCapturesChecker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftInclude",
                "shortDescription": {
                  "text": "microsoft-include clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLiteralConversion",
                "shortDescription": {
                  "text": "literal-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAddressOfPackedMember",
                "shortDescription": {
                  "text": "address-of-packed-member clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuFoldingConstant",
                "shortDescription": {
                  "text": "gnu-folding-constant clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousDelete",
                "shortDescription": {
                  "text": "ambiguous-delete clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityImplicitBoolConversion",
                "shortDescription": {
                  "text": "readability-implicit-bool-conversion clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenclUnsupportedRgba",
                "shortDescription": {
                  "text": "opencl-unsupported-rgba clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyReference",
                "shortDescription": {
                  "text": "thread-safety-reference clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmpClauses",
                "shortDescription": {
                  "text": "openmp-clauses clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOpenmpTarget",
                "shortDescription": {
                  "text": "openmp-target clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyEmbeddedStatement",
                "shortDescription": {
                  "text": "Empty control statement body"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8123",
                "shortDescription": {
                  "text": "The tuple element name is ignored because a different name or no name is specified by the target type."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaTrailingReturn",
                "shortDescription": {
                  "text": "fuchsia-trailing-return clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreDivideZero",
                "shortDescription": {
                  "text": "core.DivideZero clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUndefinedMemoryManipulation",
                "shortDescription": {
                  "text": "bugprone-undefined-memory-manipulation clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OperatorIsCanBeUsed",
                "shortDescription": {
                  "text": "Operator 'is'/'Type Of ... Is ...' can be used"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MethodSupportsCancellation",
                "shortDescription": {
                  "text": "Method supports cancellation"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneArgumentComment",
                "shortDescription": {
                  "text": "bugprone-argument-comment clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppSpecialMemberFunctions",
                "shortDescription": {
                  "text": "hicpp-special-member-functions clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAssignEnum",
                "shortDescription": {
                  "text": "assign-enum clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTypeSafety",
                "shortDescription": {
                  "text": "type-safety clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantStaticSpecifierOnMemberAllocationFunction",
                "shortDescription": {
                  "text": "Redundant 'static' specifier on a member allocation/deallocation function"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousReversedOperator",
                "shortDescription": {
                  "text": "ambiguous-reversed-operator clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantParams",
                "shortDescription": {
                  "text": "'params' modifier is always ignored on overrides"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleExceptionSpec",
                "shortDescription": {
                  "text": "incompatible-exception-spec clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMisexpect",
                "shortDescription": {
                  "text": "misexpect clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixAPI",
                "shortDescription": {
                  "text": "unix.API clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopCanBePartlyConvertedToQuery",
                "shortDescription": {
                  "text": "Part of loop's body can be converted into LINQ-expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreNonNullParamChecker",
                "shortDescription": {
                  "text": "core.NonNullParamChecker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadChildStatementIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around child statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleObjcGlobalVariableDeclaration",
                "shortDescription": {
                  "text": "google-objc-global-variable-declaration clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLongLong",
                "shortDescription": {
                  "text": "long-long clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMemberFunctionMayBeConst",
                "shortDescription": {
                  "text": "Member function can be made const"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98CompatExtraSemi",
                "shortDescription": {
                  "text": "c++98-compat-extra-semi clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingNoescape",
                "shortDescription": {
                  "text": "missing-noescape clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntToVoidPointerCast",
                "shortDescription": {
                  "text": "int-to-void-pointer-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1522",
                "shortDescription": {
                  "text": "Empty switch block"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArgumentsStyleNamedExpression",
                "shortDescription": {
                  "text": "Use preferred argument style for named expressions"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantOverload.Local",
                "shortDescription": {
                  "text": "Redundant method overload (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscUnusedParameters",
                "shortDescription": {
                  "text": "misc-unused-parameters clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExpressionIsAlwaysNull",
                "shortDescription": {
                  "text": "Expression is always 'null'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraStructPackAlign",
                "shortDescription": {
                  "text": "altera-struct-pack-align clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmPreferRegisterOverUnsigned",
                "shortDescription": {
                  "text": "llvm-prefer-register-over-unsigned clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesNoMalloc",
                "shortDescription": {
                  "text": "cppcoreguidelines-no-malloc clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUseAuto",
                "shortDescription": {
                  "text": "Use preferred 'auto' style (type can be replaced with auto)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonLiteralNullConversion",
                "shortDescription": {
                  "text": "non-literal-null-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBeProtected.Local",
                "shortDescription": {
                  "text": "Member can be made protected (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreUninitializedAssign",
                "shortDescription": {
                  "text": "core.uninitialized.Assign clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecSocket",
                "shortDescription": {
                  "text": "android-cloexec-socket clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuggestBaseTypeForParameterInConstructor",
                "shortDescription": {
                  "text": "Parameter can be declared with the base type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseOverride",
                "shortDescription": {
                  "text": "hicpp-use-override clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotObservableAnnotationRedundancy",
                "shortDescription": {
                  "text": "Nullability attribute used with declaration that cannot be directly referenced from other code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuppressNullableWarningExpressionAsInvertedIsExpression",
                "shortDescription": {
                  "text": "Nullable warning suppression operator might be confused with inverted 'is' expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp2bExtensions",
                "shortDescription": {
                  "text": "c++2b-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneNotNullTerminatedResult",
                "shortDescription": {
                  "text": "bugprone-not-null-terminated-result clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadPreprocessorIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around preprocessor directive)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PerformanceCriticalCodeCameraMain",
                "shortDescription": {
                  "text": "'Camera.main' is expensive"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Performance Inspections",
                      "index": 67,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FieldCanBeMadeReadOnly.Local",
                "shortDescription": {
                  "text": "Field can be made readonly (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerCompare",
                "shortDescription": {
                  "text": "pointer-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantTemplateKeyword",
                "shortDescription": {
                  "text": "Redundant 'template' keyword"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAbstractVbaseInit",
                "shortDescription": {
                  "text": "abstract-vbase-init clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidOrNonexistentDirectory",
                "shortDescription": {
                  "text": "invalid-or-nonexistent-directory clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantJumpStatement",
                "shortDescription": {
                  "text": "Redundant control flow jump statement"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToLambdaExpression",
                "shortDescription": {
                  "text": "Convert into lambda expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLinuxkernelMustCheckErrs",
                "shortDescription": {
                  "text": "linuxkernel-must-check-errs clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLogicalOpParentheses",
                "shortDescription": {
                  "text": "logical-op-parentheses clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1587",
                "shortDescription": {
                  "text": "XML comment is not placed on a valid language element"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1589",
                "shortDescription": {
                  "text": "Unable to include XML fragment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1584",
                "shortDescription": {
                  "text": "Syntax error in XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1580",
                "shortDescription": {
                  "text": "Incorrect signature in XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPotentiallyEvaluatedExpression",
                "shortDescription": {
                  "text": "potentially-evaluated-expression clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MISMATCHED_ASMDEF_FILENAME",
                "shortDescription": {
                  "text": "File name should match the name of the assembly"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantBaseConstructorCall",
                "shortDescription": {
                  "text": "Redundant base constructor call"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticComment",
                "shortDescription": {
                  "text": "comment clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantUsingDirective",
                "shortDescription": {
                  "text": "Redundant using directive"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTypedefRedefinition",
                "shortDescription": {
                  "text": "typedef-redefinition clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaMultipleInheritance",
                "shortDescription": {
                  "text": "fuchsia-multiple-inheritance clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantQueryOrderByAscendingKeyword",
                "shortDescription": {
                  "text": "Redundant 'orderby' clause 'ascending' keyword"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1590",
                "shortDescription": {
                  "text": "Invalid XML include element"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1591",
                "shortDescription": {
                  "text": "Missing XML comment for publicly visible type or member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticStaticInlineExplicitInstantiation",
                "shortDescription": {
                  "text": "static-inline-explicit-instantiation clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1592",
                "shortDescription": {
                  "text": "Badly formed XML in included comments file"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CollectionNeverQueried.Global",
                "shortDescription": {
                  "text": "Collection content is never queried (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BaseMemberHasParams",
                "shortDescription": {
                  "text": "Base member has 'params' parameter, but the overrider does not have it"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedExceptionParameter",
                "shortDescription": {
                  "text": "unused-exception-parameter clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppZeroConstantCanBeReplacedWithNullptr",
                "shortDescription": {
                  "text": "Zero constant can be replaced with nullptr"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnnotationConflictInHierarchy",
                "shortDescription": {
                  "text": "Annotation conflict in hierarchy"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.InvalidModelType",
                "shortDescription": {
                  "text": "MVC (mismatch Model Type)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMultipleStatementMacro",
                "shortDescription": {
                  "text": "bugprone-multiple-statement-macro clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOrderedCompareFunctionPointers",
                "shortDescription": {
                  "text": "ordered-compare-function-pointers clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedDynamicExceptionSpec",
                "shortDescription": {
                  "text": "deprecated-dynamic-exception-spec clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOptinPortabilityUnixAPI",
                "shortDescription": {
                  "text": "optin.portability.UnixAPI clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InactivePreprocessorBranch",
                "shortDescription": {
                  "text": "Inactive preprocessor branch"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvocationIsSkipped",
                "shortDescription": {
                  "text": "Method invocation is skipped"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCoreFoundationCFNumber",
                "shortDescription": {
                  "text": "osx.coreFoundation.CFNumber clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeleteNonVirtualDtor",
                "shortDescription": {
                  "text": "delete-non-virtual-dtor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftCharize",
                "shortDescription": {
                  "text": "microsoft-charize clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCalledOnceParameter",
                "shortDescription": {
                  "text": "called-once-parameter clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1571",
                "shortDescription": {
                  "text": "Duplicate param tag in XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1572",
                "shortDescription": {
                  "text": "XML comment has a 'param' tag for 'Parameter', but there is no parameter by that name"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1573",
                "shortDescription": {
                  "text": "Parameter has no matching param tag in the XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1574",
                "shortDescription": {
                  "text": "Ambiguous reference in XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnTypeCanBeEnumerable.Global",
                "shortDescription": {
                  "text": "Return type can be IEnumerable<T> (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS1570",
                "shortDescription": {
                  "text": "Invalid XML in XML comment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC40000",
                "shortDescription": {
                  "text": "Use obsolete member"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBWarnings__BC40008",
                "shortDescription": {
                  "text": "Use obsolete member (without message)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatExtraArgs",
                "shortDescription": {
                  "text": "format-extra-args clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.First.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().First()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.First.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().First() (replace with OfType<T>().First(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringIndexOfIsCultureSpecific.1",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringIndexOfIsCultureSpecific.3",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecEpollCreate1",
                "shortDescription": {
                  "text": "android-cloexec-epoll-create1 clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringIndexOfIsCultureSpecific.2",
                "shortDescription": {
                  "text": "String.IndexOf is culture-specific (string.IndexOf(string, int) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSwappedArguments",
                "shortDescription": {
                  "text": "bugprone-swapped-arguments clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppReplaceMemsetWithZeroInitialization",
                "shortDescription": {
                  "text": "Zero initialization can be used instead of memset"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantVerbatimStringPrefix",
                "shortDescription": {
                  "text": "Redundant verbatim string prefix"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusablePartialSpecialization",
                "shortDescription": {
                  "text": "unusable-partial-specialization clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CA2252",
                "shortDescription": {
                  "text": "Opt in to preview features before using them."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IsExpressionAlwaysTrue",
                "shortDescription": {
                  "text": "The given expression of 'is' operator is always of the provided type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPrintfMissedArg",
                "shortDescription": {
                  "text": "Not enough arguments in a call to printf"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantBoolCompare",
                "shortDescription": {
                  "text": "Redundant boolean comparison"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToModifiedClosure",
                "shortDescription": {
                  "text": "Access to modified captured variable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStringFormatCall",
                "shortDescription": {
                  "text": "Redundant 'string.Format()' call"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaExpressionMustBeStatic",
                "shortDescription": {
                  "text": "Lambda expression/anonymous method must be 'static' to avoid allocations"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownSanitizers",
                "shortDescription": {
                  "text": "unknown-sanitizers clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleUnintendedLinearSearchInSet",
                "shortDescription": {
                  "text": "Possibly unintended linear search in set"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceForeachStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'foreach' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceUnnecessaryCopyInitialization",
                "shortDescription": {
                  "text": "performance-unnecessary-copy-initialization clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEntityAssignedButNoRead",
                "shortDescription": {
                  "text": "Declarator is only assigned but never accessed"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedGetterReturnValue",
                "shortDescription": {
                  "text": "unused-getter-return-value clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAmbiguousEllipsis",
                "shortDescription": {
                  "text": "ambiguous-ellipsis clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFloatEqual",
                "shortDescription": {
                  "text": "float-equal clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultValueAttributeForOptionalParameter",
                "shortDescription": {
                  "text": "Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMisleadingIndentation",
                "shortDescription": {
                  "text": "misleading-indentation clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityRedundantSmartptrGet",
                "shortDescription": {
                  "text": "readability-redundant-smartptr-get clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDanglingInitializerList",
                "shortDescription": {
                  "text": "dangling-initializer-list clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompatibleLibraryRedeclaration",
                "shortDescription": {
                  "text": "incompatible-library-redeclaration clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantTemplateArguments",
                "shortDescription": {
                  "text": "Redundant template arguments"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftExceptionSpec",
                "shortDescription": {
                  "text": "microsoft-exception-spec clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp14BinaryLiteral",
                "shortDescription": {
                  "text": "c++14-binary-literal clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedAutoPropertyAccessor.Global",
                "shortDescription": {
                  "text": "Auto-property accessor is never used (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyDarwinDispatchOnceNonstatic",
                "shortDescription": {
                  "text": "darwin-dispatch-once-nonstatic clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToFirst",
                "shortDescription": {
                  "text": "Replace with single call to First(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecateLaxVecConvAll",
                "shortDescription": {
                  "text": "deprecate-lax-vec-conv-all clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmElseAfterReturn",
                "shortDescription": {
                  "text": "llvm-else-after-return clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEnumCompareConditional",
                "shortDescription": {
                  "text": "enum-compare-conditional clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCoveredSwitchDefault",
                "shortDescription": {
                  "text": "covered-switch-default clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ViewComponentNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown view component)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReturnType",
                "shortDescription": {
                  "text": "return-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseNameofExpressionForPartOfTheString",
                "shortDescription": {
                  "text": "Use 'nameof' expression to reference name in part of the string literal"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerApiModelingErrno",
                "shortDescription": {
                  "text": "apiModeling.Errno clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CannotApplyEqualityOperatorToType",
                "shortDescription": {
                  "text": "Compare with '==' types marked by 'CannotApplyEqualityOperatorAttribute'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantAttributeParentheses",
                "shortDescription": {
                  "text": "Parentheses are redundant if attribute has no arguments"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftSealed",
                "shortDescription": {
                  "text": "microsoft-sealed clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIBcopy",
                "shortDescription": {
                  "text": "security.insecureAPI.bcopy clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp2aExtensions",
                "shortDescription": {
                  "text": "c++2a-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFloatOverflowConversion",
                "shortDescription": {
                  "text": "float-overflow-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnknownDirectives",
                "shortDescription": {
                  "text": "unknown-directives clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OtherTagsInsideUnclosedScript",
                "shortDescription": {
                  "text": "Script tag errors (unclosed <script> with other tags inside)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Html.AttributeNotResolved",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeDefaultValueWhenTypeNotEvident",
                "shortDescription": {
                  "text": "Use preferred style of default value expression when type is not evident"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingVariableDeclarations",
                "shortDescription": {
                  "text": "missing-variable-declarations clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPrivateHeader",
                "shortDescription": {
                  "text": "private-header clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadSpacesAfterKeyword",
                "shortDescription": {
                  "text": "Incorrect spacing (between keyword and parenthesis)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreBuiltinNoReturnFunctions",
                "shortDescription": {
                  "text": "core.builtin.NoReturnFunctions clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertExp42C",
                "shortDescription": {
                  "text": "cert-exp42-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.StyleClassNotFound",
                "shortDescription": {
                  "text": "Style class not found"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8947",
                "shortDescription": {
                  "text": "Parameter occurs after interpolated string handler parameter in the parameter list."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppRedundantElaboratedTypeSpecifier",
                "shortDescription": {
                  "text": "Redundant elaborated type specifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBStringStartsWithIsCultureSpecific",
                "shortDescription": {
                  "text": "String.StartsWith is culture-specific (string.StartsWith(string) is culture-specific)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConstexprNotConst",
                "shortDescription": {
                  "text": "constexpr-not-const clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpInspections",
                "shortDescription": {
                  "text": "Regular Expression Inspections"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOptionIgnored",
                "shortDescription": {
                  "text": "option-ignored clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.PreferAddressByIdToGraphicsParams",
                "shortDescription": {
                  "text": "String based graphics property lookup is inefficient"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFloatConversion",
                "shortDescription": {
                  "text": "float-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0197",
                "shortDescription": {
                  "text": "Taking address of marshal-by-reference class field"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.MappedPathHighlighting",
                "shortDescription": {
                  "text": "Mapped path"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAccessSpecifierWithNoDeclarations",
                "shortDescription": {
                  "text": "Access specifier does not affect any declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StructuredMessageTemplateProblem",
                "shortDescription": {
                  "text": "Structured message template problems"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVisibility",
                "shortDescription": {
                  "text": "visibility clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDanglingGsl",
                "shortDescription": {
                  "text": "dangling-gsl clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EntityNameCapturedOnly.Global",
                "shortDescription": {
                  "text": "Entity is only used to capture its name (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaIncompatibleMethodTypes",
                "shortDescription": {
                  "text": "osx.cocoa.IncompatibleMethodTypes clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceUnnecessaryValueParam",
                "shortDescription": {
                  "text": "performance-unnecessary-value-param clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppEnforceWhileStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'while' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertToNullCoalescingCompoundAssignment",
                "shortDescription": {
                  "text": "Use compound assignment"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseStringInterpolation",
                "shortDescription": {
                  "text": "Use string interpolation expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilitySimplifySubscriptExpr",
                "shortDescription": {
                  "text": "readability-simplify-subscript-expr clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredPragmaOptimize",
                "shortDescription": {
                  "text": "ignored-pragma-optimize clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedPragma",
                "shortDescription": {
                  "text": "deprecated-pragma clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MultipleSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (multiple spaces are prohibited)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertConditionalTernaryExpressionToSwitchExpression",
                "shortDescription": {
                  "text": "Replace ternary expression with 'switch' expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleGlobalNamesInHeaders",
                "shortDescription": {
                  "text": "google-global-names-in-headers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnusedValue",
                "shortDescription": {
                  "text": "unused-value clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOdr",
                "shortDescription": {
                  "text": "odr clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BuiltInTypeReferenceStyleForMemberAccess",
                "shortDescription": {
                  "text": "Replace built-in type reference with a CLR type name or a keyword in static member access expressions"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedIncrementBool",
                "shortDescription": {
                  "text": "deprecated-increment-bool clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpecifyStringComparison",
                "shortDescription": {
                  "text": "Specify string comparison explicitly"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantAttributeOnTarget",
                "shortDescription": {
                  "text": "Redundant attribute usage (attribute is redundant when applied to this declaration type)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerSecurityInsecureAPIRand",
                "shortDescription": {
                  "text": "security.insecureAPI.rand clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantVerbatimPrefix",
                "shortDescription": {
                  "text": "Redundant verbatim prefix"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ControllerNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown controller)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantEmptySwitchSection",
                "shortDescription": {
                  "text": "Redundant empty switch section"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInfiniteRecursion",
                "shortDescription": {
                  "text": "infinite-recursion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SimplifyConditionalOperator",
                "shortDescription": {
                  "text": "Simplify conditional operator"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl51Cpp",
                "shortDescription": {
                  "text": "cert-dcl51-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegativeIndex",
                "shortDescription": {
                  "text": "Possible 'System.ArgumentOutOfRangeException'. Index must be a non-negative integer."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseEqualsDelete",
                "shortDescription": {
                  "text": "hicpp-use-equals-delete clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8971",
                "shortDescription": {
                  "text": "[InterpolatedStringHandlerArgument] has no effect when applied to lambda parameters and will be ignored at the call site."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuNullPointerArithmetic",
                "shortDescription": {
                  "text": "gnu-null-pointer-arithmetic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.MethodWithParametersAndTestAttribute",
                "shortDescription": {
                  "text": "NUnit. Values for test method parameters are not provided."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.CustomPageParserFilterType",
                "shortDescription": {
                  "text": "Unsupported pageParserFilterType"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDistributedObjectModifiers",
                "shortDescription": {
                  "text": "distributed-object-modifiers clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadGenericBracketsSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around generic brackets)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyFuchsiaHeaderAnonNamespaces",
                "shortDescription": {
                  "text": "fuchsia-header-anon-namespaces clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantOverriddenMember",
                "shortDescription": {
                  "text": "Redundant member override"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitFallthrough",
                "shortDescription": {
                  "text": "implicit-fallthrough clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NotResolvedInText",
                "shortDescription": {
                  "text": "Cannot resolve symbol in text argument"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppCompileTimeConstantCanBeReplacedWithBooleanConstant",
                "shortDescription": {
                  "text": "Compile-time constant expression can be replaced with either 'true' or 'false'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticExcessInitializers",
                "shortDescription": {
                  "text": "excess-initializers clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedImportClause",
                "shortDescription": {
                  "text": "Unused import clause"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Where",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Where() (replace with OfType<T>().Where(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8981",
                "shortDescription": {
                  "text": "The type name only contains lower-cased ASCII characters. Such names may become reserved for the language"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseImplicitlyTypedVariable",
                "shortDescription": {
                  "text": "Use implicitly typed variable declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBuiltinAssumeAlignedAlignment",
                "shortDescription": {
                  "text": "builtin-assume-aligned-alignment clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerWebkitNoUncountedMemberChecker",
                "shortDescription": {
                  "text": "webkit.NoUncountedMemberChecker clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUndef",
                "shortDescription": {
                  "text": "undef clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitlyUnsignedLiteral",
                "shortDescription": {
                  "text": "implicitly-unsigned-literal clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.RedundantCollectionProperty",
                "shortDescription": {
                  "text": "Redundant empty collection property setter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnavailableDeclarations",
                "shortDescription": {
                  "text": "unavailable-declarations clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcForbiddenSubclassing",
                "shortDescription": {
                  "text": "objc-forbidden-subclassing clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Asp.Entity",
                "shortDescription": {
                  "text": "Unknown HTML entity"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUnusedReturnValue",
                "shortDescription": {
                  "text": "bugprone-unused-return-value clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeRedundantVoidArg",
                "shortDescription": {
                  "text": "modernize-redundant-void-arg clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassCannotBeInstantiated",
                "shortDescription": {
                  "text": "Class cannot be instantiated"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8966",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8965",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute applied to parameter will have no effect because it's self-referential"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ArrangeTrailingCommaInMultilineLists",
                "shortDescription": {
                  "text": "Use preferred style for trailing comma before new line in multiline lists"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8963",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute is applied with an invalid parameter name."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyGoogleObjcAvoidNsobjectNew",
                "shortDescription": {
                  "text": "google-objc-avoid-nsobject-new clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneStringIntegerAssignment",
                "shortDescription": {
                  "text": "bugprone-string-integer-assignment clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8962",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerMemberNameAttribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseNodiscard",
                "shortDescription": {
                  "text": "modernize-use-nodiscard clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8961",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerFilePathAttribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8960",
                "shortDescription": {
                  "text": "The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerLineNumberAttribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedAnonEnumEnumConversion",
                "shortDescription": {
                  "text": "deprecated-anon-enum-enum-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatNonIso",
                "shortDescription": {
                  "text": "format-non-iso clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EnforceForStatementBraces",
                "shortDescription": {
                  "text": "Use preferred braces style (enforce braces in 'for' statement)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseAwaitUsing",
                "shortDescription": {
                  "text": "Convert into 'await using' statement or declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantRecordBody",
                "shortDescription": {
                  "text": "Redundant 'record' type declaration body"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppOutdentIsOffPrevLevel",
                "shortDescription": {
                  "text": "Incorrect indent (line indent should be restored to the previous level elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceMoveConstructorInit",
                "shortDescription": {
                  "text": "performance-move-constructor-init clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LambdaShouldNotCaptureContext",
                "shortDescription": {
                  "text": "Lambda expression/anonymous method must not have captures of the containing context"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp11Extensions",
                "shortDescription": {
                  "text": "c++11-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadColonSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around colon)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyMiscConstCorrectness",
                "shortDescription": {
                  "text": "misc-const-correctness clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSetterValueParameterDeclaration",
                "shortDescription": {
                  "text": "Explicit 'value' parameter declaration is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.FirstOrDefault.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().FirstOrDefault() (replace with OfType(Of ..)().FirstOrDefault(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithOfType.FirstOrDefault.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().FirstOrDefault() (replace with OfType(Of ..)().FirstOrDefault())"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPragmaSystemHeaderOutsideHeader",
                "shortDescription": {
                  "text": "pragma-system-header-outside-header clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Last.1",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Last()"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithOfType.Last.2",
                "shortDescription": {
                  "text": "Replace with OfType<T>().Last() (replace with OfType<T>().Last(..))"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftFlexibleArray",
                "shortDescription": {
                  "text": "microsoft-flexible-array clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnableToOpenStatsFile",
                "shortDescription": {
                  "text": "unable-to-open-stats-file clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleWriteToMe",
                "shortDescription": {
                  "text": "Possible write to 'Me'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ByRefArgumentIsVolatileField",
                "shortDescription": {
                  "text": "Captured reference to 'volatile' field will not be treated as 'volatile'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingBlankLines",
                "shortDescription": {
                  "text": "Incorrect blank lines (blank lines are missing elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticHlslExtensions",
                "shortDescription": {
                  "text": "hlsl-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilStringFindStartswith",
                "shortDescription": {
                  "text": "abseil-string-find-startswith clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.UnusedAddTag",
                "shortDescription": {
                  "text": "Redundant add element"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantCatchClause",
                "shortDescription": {
                  "text": "Redundant catch clause"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.FieldModifierRequiresNameAttribute",
                "shortDescription": {
                  "text": "x:FieldModifier attribute requires x:Name attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticArcBridgeCastsDisallowedInNonarc",
                "shortDescription": {
                  "text": "arc-bridge-casts-disallowed-in-nonarc clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyObjcSuperSelf",
                "shortDescription": {
                  "text": "objc-super-self clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4BlueprintCallableFunctionMayBeConst",
                "shortDescription": {
                  "text": "BlueprintCallable function can be made const"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAbsoluteValue",
                "shortDescription": {
                  "text": "absolute-value clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppNonExplicitConversionOperator",
                "shortDescription": {
                  "text": "Non-explicit conversion operator"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedThisCapture",
                "shortDescription": {
                  "text": "deprecated-this-capture clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNullability",
                "shortDescription": {
                  "text": "nullability clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl16C",
                "shortDescription": {
                  "text": "cert-dcl16-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticLogicalNotParentheses",
                "shortDescription": {
                  "text": "logical-not-parentheses clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAutoImport",
                "shortDescription": {
                  "text": "auto-import clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUPropertyMacroCallHasNoEffect",
                "shortDescription": {
                  "text": "UPROPERTY macro call has no effect"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyOpenmpExceptionEscape",
                "shortDescription": {
                  "text": "openmp-exception-escape clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticTautologicalPointerCompare",
                "shortDescription": {
                  "text": "tautological-pointer-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OlTagContainsNonLiElements",
                "shortDescription": {
                  "text": "Elements not allowed in context (<ol> contains elements other than <li> or <li> is unclosed)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticC99Designator",
                "shortDescription": {
                  "text": "c99-designator clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadMemberAccessSpaces",
                "shortDescription": {
                  "text": "Incorrect spacing (around member access symbols)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xunit.XunitTestWithConsoleOutput",
                "shortDescription": {
                  "text": "Console output in Xunit tests"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Xunit",
                      "index": 84,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNonnull",
                "shortDescription": {
                  "text": "nonnull clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfToOrExpression",
                "shortDescription": {
                  "text": "Convert 'if' into '||'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantInclude",
                "shortDescription": {
                  "text": "Redundant include"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInvalidInitializerFromSystemHeader",
                "shortDescription": {
                  "text": "invalid-initializer-from-system-header clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSuspiciousMemsetUsage",
                "shortDescription": {
                  "text": "bugprone-suspicious-memset-usage clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedArrayCompare",
                "shortDescription": {
                  "text": "deprecated-array-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToCount",
                "shortDescription": {
                  "text": "Replace with single call to Count(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAbstractVirtualFunctionCallInCtor",
                "shortDescription": {
                  "text": "Call to a virtual function inside a constructor/destructor will result in a pure virtual function call"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstSharedStaticCreate",
                "shortDescription": {
                  "text": "Some SharedStatic`1.GetOrCreate overloads cause compiler errors"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppStaticAssert",
                "shortDescription": {
                  "text": "hicpp-static-assert clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InvalidValueType",
                "shortDescription": {
                  "text": "Resource value type is invalid"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantPropertyParentheses",
                "shortDescription": {
                  "text": "Parameterless property parentheses are redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContainerAnnotationRedundancy",
                "shortDescription": {
                  "text": "Container nullability attribute usage with declaration of non-container type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseArrayCreationExpression.1",
                "shortDescription": {
                  "text": "Use array creation expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBUseArrayCreationExpression.2",
                "shortDescription": {
                  "text": "Use array creation expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGlobalIsel",
                "shortDescription": {
                  "text": "global-isel clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterOnlyUsedForPreconditionCheck.Local",
                "shortDescription": {
                  "text": "Parameter is only used for precondition check (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TryCastAlwaysSucceeds",
                "shortDescription": {
                  "text": "Safe cast expression always succeeds"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftCppMacro",
                "shortDescription": {
                  "text": "microsoft-cpp-macro clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedCopyWithDtor",
                "shortDescription": {
                  "text": "deprecated-copy-with-dtor clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSelfMove",
                "shortDescription": {
                  "text": "self-move clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaNSError",
                "shortDescription": {
                  "text": "osx.cocoa.NSError clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GenericEnumeratorNotDisposed",
                "shortDescription": {
                  "text": "Instance of IEnumerator is never disposed"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnreachableCode",
                "shortDescription": {
                  "text": "unreachable-code clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleInvalidCastException",
                "shortDescription": {
                  "text": "Possible 'System.InvalidCastException'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeVararg",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-vararg clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertIfDoToWhile",
                "shortDescription": {
                  "text": "Convert 'if do while' into 'while'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantToStringCall",
                "shortDescription": {
                  "text": "Redundant 'object.ToString()' call"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneUncheckedOptionalAccess",
                "shortDescription": {
                  "text": "bugprone-unchecked-optional-access clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBSimplifyLinqExpression.10",
                "shortDescription": {
                  "text": "Simplify expression"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedPositionalParameterCompiler",
                "shortDescription": {
                  "text": "Unused positional parameter"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticZeroAsNullPointerConstant",
                "shortDescription": {
                  "text": "zero-as-null-pointer-constant clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixVfork",
                "shortDescription": {
                  "text": "unix.Vfork clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.InvalidResourceType",
                "shortDescription": {
                  "text": "XAML resource of invalid type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSwitch",
                "shortDescription": {
                  "text": "switch clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeMacroToEnum",
                "shortDescription": {
                  "text": "modernize-macro-to-enum clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyNamespace",
                "shortDescription": {
                  "text": "Empty namespace declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UseEmptyTypesField",
                "shortDescription": {
                  "text": "Use 'Type.EmptyTypes'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppWrongIncludesOrder",
                "shortDescription": {
                  "text": "Use preferred include directive style (order of #include directives does not match code style settings)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Syntax Style",
                      "index": 14,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStringType",
                "shortDescription": {
                  "text": "Redundant string type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDereferenceOperatorLimitExceeded",
                "shortDescription": {
                  "text": "Dereference operator limit is exceeded"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp2aCompatPedantic",
                "shortDescription": {
                  "text": "c++2a-compat-pedantic clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedType.Local",
                "shortDescription": {
                  "text": "Type is never used (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Symbol Declarations",
                      "index": 25,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IteratorNeverReturns",
                "shortDescription": {
                  "text": "Iterator never returns"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyLlvmTwineLocal",
                "shortDescription": {
                  "text": "llvm-twine-local clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.RedundantFormerlySerializedAsAttribute",
                "shortDescription": {
                  "text": "Redundant attribute usage (redundant 'FormerlySerializedAs' attribute)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUE4CodingStandardNamingViolationWarning",
                "shortDescription": {
                  "text": "Inconsistent Unreal Engine Naming"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TabsOutsideIndent",
                "shortDescription": {
                  "text": "Incorrect spacing (tabs are prohibited here)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.BurstDebugLogInvalidArgument",
                "shortDescription": {
                  "text": "Debug logging functions accepts only strings"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity Burst Compiler Warnings",
                      "index": 34,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppExplicitSpecializationInNonNamespaceScope",
                "shortDescription": {
                  "text": "Explicit specialization in non-namespace scope"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilNoNamespace",
                "shortDescription": {
                  "text": "abseil-no-namespace clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossiblyMistakenUseOfInterpolatedStringInsert",
                "shortDescription": {
                  "text": "Possibly unintended string interpolation instead of format string template"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMain",
                "shortDescription": {
                  "text": "main clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticThreadSafetyNegative",
                "shortDescription": {
                  "text": "thread-safety-negative clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLiteralEndingLowerL",
                "shortDescription": {
                  "text": "The 'l' suffix is easily confused with the digit '1'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnclosedScript",
                "shortDescription": {
                  "text": "Script tag errors (unclosed <script>)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppTemplateArgumentsCanBeDeduced",
                "shortDescription": {
                  "text": "Template arguments can be deduced"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAlteraSingleWorkItemBarrier",
                "shortDescription": {
                  "text": "altera-single-work-item-barrier clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseBoolLiterals",
                "shortDescription": {
                  "text": "modernize-use-bool-literals clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDefaultedSpecialMemberFunctionIsImplicitlyDeleted",
                "shortDescription": {
                  "text": "Defaulted special member function is implicitly deleted"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDtorName",
                "shortDescription": {
                  "text": "dtor-name clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedVisibility",
                "shortDescription": {
                  "text": "unsupported-visibility clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuCompoundLiteralInitializer",
                "shortDescription": {
                  "text": "gnu-compound-literal-initializer clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIntToPointerCast",
                "shortDescription": {
                  "text": "int-to-pointer-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticAsmOperandWidths",
                "shortDescription": {
                  "text": "asm-operand-widths clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticHeaderHygiene",
                "shortDescription": {
                  "text": "header-hygiene clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticGnuAutoType",
                "shortDescription": {
                  "text": "gnu-auto-type clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Mvc.ViewComponentViewNotResolved",
                "shortDescription": {
                  "text": "MVC (unknown view component view)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftTemplateShadow",
                "shortDescription": {
                  "text": "microsoft-template-shadow clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixMismatchedDeallocator",
                "shortDescription": {
                  "text": "unix.MismatchedDeallocator clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppPossiblyUnintendedObjectSlicing",
                "shortDescription": {
                  "text": "Possibly unintended object slicing"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUnsignedZeroComparison",
                "shortDescription": {
                  "text": "Comparison of unsigned expression with 0"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BaseObjectEqualsIsObjectEquals",
                "shortDescription": {
                  "text": "Call to 'base.Equals(...)' is reference equality"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertFlp30C",
                "shortDescription": {
                  "text": "cert-flp30-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IdentifierTypo",
                "shortDescription": {
                  "text": "Typo in identifier"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Spelling Issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0109",
                "shortDescription": {
                  "text": "Keyword 'new' is redundant"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NUnit.IncorrectExpectedResultType",
                "shortDescription": {
                  "text": "NUnit. Incompatible expected result type or incorrect value."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "NUnit",
                      "index": 19,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppUFunctionMacroCallHasNoEffect",
                "shortDescription": {
                  "text": "UFUNCTION macro call has no effect"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityIdentifierNaming",
                "shortDescription": {
                  "text": "readability-identifier-naming clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeIntoPattern",
                "shortDescription": {
                  "text": "Merge null/pattern checks into complex pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticEmptyDecomposition",
                "shortDescription": {
                  "text": "empty-decomposition clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppExpressionWithoutSideEffects",
                "shortDescription": {
                  "text": "Possibly erroneous expression without side-effects"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SwitchExpressionHandlesSomeKnownEnumValuesWithExceptionInDefault",
                "shortDescription": {
                  "text": "Some values of the enum are not processed inside 'switch' expression and are handled via exception in default arm"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticNontrivialMemaccess",
                "shortDescription": {
                  "text": "nontrivial-memaccess clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUseEmplace",
                "shortDescription": {
                  "text": "hicpp-use-emplace clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerCoreNullDereference",
                "shortDescription": {
                  "text": "core.NullDereference clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AccessToForEachVariableInClosure",
                "shortDescription": {
                  "text": "Access to foreach variable in closure"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSerializedDiagnostics",
                "shortDescription": {
                  "text": "serialized-diagnostics clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedAttributes",
                "shortDescription": {
                  "text": "deprecated-attributes clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantStringToCharArrayCall",
                "shortDescription": {
                  "text": "Redundant 'string.ToCharArray()' call"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantRecordClassKeyword",
                "shortDescription": {
                  "text": "Redundant 'class' keyword in record declaration"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDarwinSdkSettings",
                "shortDescription": {
                  "text": "darwin-sdk-settings clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppAwaiterTypeIsNotClass",
                "shortDescription": {
                  "text": "Awaiter type is not a class"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VBReplaceWithSingleCallToSingleOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to SingleOrDefault(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpBuildCSInvalidModuleName",
                "shortDescription": {
                  "text": "Module with this name does not exist"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Build System",
                      "index": 71,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PossibleLossOfFraction",
                "shortDescription": {
                  "text": "Possible loss of fraction"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ValueRangeAttributeViolation",
                "shortDescription": {
                  "text": "Possible violation of 'ValueRange'/'NonNegativeValue' attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Constraints Violations",
                      "index": 43,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForStatementConditionIsTrue",
                "shortDescription": {
                  "text": "'true' is redundant as 'for'-statement condition"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftExpressionRightOperandNotEqualRealCount",
                "shortDescription": {
                  "text": "Suspicious shift count for this type of left operand"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnassignedField.Local",
                "shortDescription": {
                  "text": "Unassigned field (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceWithSingleCallToSingleOrDefault",
                "shortDescription": {
                  "text": "Replace with single call to SingleOrDefault(..)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProBoundsArrayToPointerDecay",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-bounds-array-to-pointer-decay clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonConstantEqualityExpressionHasConstantResult",
                "shortDescription": {
                  "text": "According to values of the bit masks, expression result will always be the same"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnalignedAccess",
                "shortDescription": {
                  "text": "unaligned-access clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantExplicitTupleComponentName",
                "shortDescription": {
                  "text": "Redundant explicit tuple component name"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBindingInCondition",
                "shortDescription": {
                  "text": "binding-in-condition clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticBindToTemporaryCopy",
                "shortDescription": {
                  "text": "bind-to-temporary-copy clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticPointerToEnumCast",
                "shortDescription": {
                  "text": "pointer-to-enum-cast clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadControlBracesIndent",
                "shortDescription": {
                  "text": "Incorrect indent (around statement braces)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedEnumCompareConditional",
                "shortDescription": {
                  "text": "deprecated-enum-compare-conditional clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredOptimizationArgument",
                "shortDescription": {
                  "text": "ignored-optimization-argument clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaSuperDealloc",
                "shortDescription": {
                  "text": "osx.cocoa.SuperDealloc clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneVirtualNearMiss",
                "shortDescription": {
                  "text": "bugprone-virtual-near-miss clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WebConfig.RedundantLocationTag",
                "shortDescription": {
                  "text": "Redundant location element"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeUseAuto",
                "shortDescription": {
                  "text": "modernize-use-auto clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceNoIntToPtr",
                "shortDescription": {
                  "text": "performance-no-int-to-ptr clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8094",
                "shortDescription": {
                  "text": "Alignment value 'value' has a magnitude greater than 'magnitude limit' and may result in a large formatted string."
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ClassCanBeSealed.Global",
                "shortDescription": {
                  "text": "Class can be made sealed (non-inheritable) (non-private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp20AttributeExtensions",
                "shortDescription": {
                  "text": "c++20-attribute-extensions clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMicrosoftAnonTag",
                "shortDescription": {
                  "text": "microsoft-anon-tag clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppMissingLinebreak",
                "shortDescription": {
                  "text": "Incorrect line breaks (line break is missing elsewhere)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Formatting",
                      "index": 17,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFinalMacro",
                "shortDescription": {
                  "text": "final-macro clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneMisplacedWideningCast",
                "shortDescription": {
                  "text": "bugprone-misplaced-widening-cast clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaUnusedIvars",
                "shortDescription": {
                  "text": "osx.cocoa.UnusedIvars clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityContainerDataPointer",
                "shortDescription": {
                  "text": "readability-container-data-pointer clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneSignedCharMisuse",
                "shortDescription": {
                  "text": "bugprone-signed-char-misuse clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedImplementations",
                "shortDescription": {
                  "text": "deprecated-implementations clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MergeAndPattern",
                "shortDescription": {
                  "text": "Merge 'and' pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConvertNullableToShortForm",
                "shortDescription": {
                  "text": "Convert 'Nullable<T>' into 'T?'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Language Usage Opportunities",
                      "index": 3,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS8073",
                "shortDescription": {
                  "text": "The result of the expression is always 'true' or 'false' since a value of value type is never equal to 'null'"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppReinterpretCastFromVoidPtr",
                "shortDescription": {
                  "text": "reinterpret_cast is used instead of a static_cast"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.MethodArgumentsWillBeIgnored",
                "shortDescription": {
                  "text": "Method arguments will be replaced by event's arguments in generated code"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedAbs",
                "shortDescription": {
                  "text": "unsupported-abs clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticUnsupportedAbi",
                "shortDescription": {
                  "text": "unsupported-abi clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticMissingConstinit",
                "shortDescription": {
                  "text": "missing-constinit clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReorderInitList",
                "shortDescription": {
                  "text": "reorder-init-list clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticVecElemSize",
                "shortDescription": {
                  "text": "vec-elem-size clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitInt",
                "shortDescription": {
                  "text": "implicit-int clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.ParentIsOutOfCurrentComponentTree",
                "shortDescription": {
                  "text": "Parent is outside the current component tree"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAbseilDurationSubtraction",
                "shortDescription": {
                  "text": "abseil-duration-subtraction clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyModernizeDeprecatedHeaders",
                "shortDescription": {
                  "text": "modernize-deprecated-headers clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyBugproneTerminatingContinue",
                "shortDescription": {
                  "text": "bugprone-terminating-continue clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PureAttributeOnVoidMethod",
                "shortDescription": {
                  "text": "'void' method is annotated by [Pure] attribute"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertDcl59Cpp",
                "shortDescription": {
                  "text": "cert-dcl59-cpp clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCertFlp37C",
                "shortDescription": {
                  "text": "cert-flp37-c clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxCocoaAutoreleaseWrite",
                "shortDescription": {
                  "text": "osx.cocoa.AutoreleaseWrite clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCompletionHandler",
                "shortDescription": {
                  "text": "completion-handler clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticInlineNamespaceReopenedNoninline",
                "shortDescription": {
                  "text": "inline-namespace-reopened-noninline clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDtorTypedef",
                "shortDescription": {
                  "text": "dtor-typedef clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticCpp98Cpp11Cpp14Cpp17Compat",
                "shortDescription": {
                  "text": "c++98-c++11-c++14-c++17-compat clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticWarnings",
                "shortDescription": {
                  "text": "#warnings clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NoSupportForVB",
                "shortDescription": {
                  "text": "Visual Basic is not supported yet"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "T4",
                      "index": 62,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PatternNeverMatches",
                "shortDescription": {
                  "text": "The source expression never matches the provided pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExtractCommonPropertyPattern",
                "shortDescription": {
                  "text": "Extract common property pattern"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConstantEvaluated",
                "shortDescription": {
                  "text": "constant-evaluated clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticOverrideModule",
                "shortDescription": {
                  "text": "override-module clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerNullabilityNullPassedToNonnull",
                "shortDescription": {
                  "text": "nullability.NullPassedToNonnull clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticDeprecatedBuiltins",
                "shortDescription": {
                  "text": "deprecated-builtins clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyHicppUppercaseLiteralSuffix",
                "shortDescription": {
                  "text": "hicpp-uppercase-literal-suffix clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0183",
                "shortDescription": {
                  "text": "Given expression is always of the provided type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFormatInsufficientArgs",
                "shortDescription": {
                  "text": "format-insufficient-args clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0184",
                "shortDescription": {
                  "text": "Given expression is never of the provided type"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.DynamicResourceError",
                "shortDescription": {
                  "text": "{DynamicResource} can only be used with dependency property"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Notification",
                      "index": 29,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIgnoredPragmas",
                "shortDescription": {
                  "text": "ignored-pragmas clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticSignCompare",
                "shortDescription": {
                  "text": "sign-compare clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticConsumed",
                "shortDescription": {
                  "text": "consumed clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyPerformanceForRangeCopy",
                "shortDescription": {
                  "text": "performance-for-range-copy clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerUnixMalloc",
                "shortDescription": {
                  "text": "unix.Malloc clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppFinalNonOverridingVirtualFunction",
                "shortDescription": {
                  "text": "Final non-overriding virtual function"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Redundancies in Code",
                      "index": 16,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyReadabilityConstReturnType",
                "shortDescription": {
                  "text": "readability-const-return-type clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Xaml.LanguageLevel",
                "shortDescription": {
                  "text": "XAML language level error"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MemberCanBePrivate.Local",
                "shortDescription": {
                  "text": "Member can be made private (private accessibility)"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Common Practices and Code Improvements",
                      "index": 9,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppDependentTypeWithoutTypenameKeyword",
                "shortDescription": {
                  "text": "Dependent type without 'typename' keyword"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Potential Code Quality Issues",
                      "index": 0,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticIncompleteImplementation",
                "shortDescription": {
                  "text": "incomplete-implementation clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangAnalyzerOsxObjCProperty",
                "shortDescription": {
                  "text": "osx.ObjCProperty clang static analyzer check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Static Analyzer Checks",
                      "index": 24,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticImplicitIntFloatConversion",
                "shortDescription": {
                  "text": "implicit-int-float-conversion clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Unity.UnresolvedComponentOrScriptableObject",
                "shortDescription": {
                  "text": "Cannot resolve component or scriptable object"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unity",
                      "index": 12,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticFinalDtorNonFinalClass",
                "shortDescription": {
                  "text": "final-dtor-non-final-class clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyClangDiagnosticReorder",
                "shortDescription": {
                  "text": "reorder clang diagnostic"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang Diagnostics",
                      "index": 1,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyAndroidCloexecCreat",
                "shortDescription": {
                  "text": "android-cloexec-creat clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CSharpWarnings__CS0162",
                "shortDescription": {
                  "text": "Code is unreachable"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Compiler Warnings",
                      "index": 20,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CppClangTidyCppcoreguidelinesProTypeConstCast",
                "shortDescription": {
                  "text": "cppcoreguidelines-pro-type-const-cast clang-tidy check"
                },
                "fullDescription": {},
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clang-Tidy Checks",
                      "index": 4,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.sass",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "SassScssResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly imported in the current file. Example: '* {\n  margin: $var-in-other-file;\n}'",
                  "markdown": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly [imported](https://sass-lang.com/documentation/at-rules/import) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: $var-in-other-file;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass/SCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS variable reference. Example: '* {\n  margin: $unknown-var;\n}'",
                  "markdown": "Reports an unresolved [Sass/SCSS variable](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      margin: $unknown-var;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass/SCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS mixin reference. Example: '* {\n  @include unknown-mixin;\n}'",
                  "markdown": "Reports an unresolved [Sass/SCSS mixin](https://sass-lang.com/documentation/at-rules/mixin) reference.\n\n**Example:**\n\n\n    * {\n      @include unknown-mixin;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass/SCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedPlaceholderSelector",
                "shortDescription": {
                  "text": "Unresolved placeholder selector"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS placeholder selector reference. Example: '* {\n  @extend %unknown-placeholder-selector;\n}'",
                  "markdown": "Reports an unresolved [Sass/SCSS placeholder selector](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      @extend %unknown-placeholder-selector;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass/SCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "231.5593.88.172",
            "rules": [
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectFormatting",
                "shortDescription": {
                  "text": "Incorrect formatting"
                },
                "fullDescription": {
                  "text": "Reports formatting issues that appear if your code doesn't follow your project's code style settings. This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled.",
                  "markdown": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'.",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports XML elements without contents. Example: '<user>\n    <name></name>\n  </user>' After the quick-fix is applied: '<user>\n    <name/>\n  </user>'",
                  "markdown": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedToPlainText",
                "shortDescription": {
                  "text": "Reassigned to plain text"
                },
                "fullDescription": {
                  "text": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically. You can dismiss this warning by removing the file type association in Settings | Editor | File Types | Text.",
                  "markdown": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports empty tags that do not work in some browsers. Example: '<html>\n    <script/>\n  </html>' After the quick-fix is applied: '<html>\n    <script></script>\n  </html>'",
                  "markdown": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'.",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets '[]' of a character class. Although unescaped opening curly braces '{' outside of character classes are allowed in some dialects (JavaScript, Python, and so on), it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters. For this reason the inspection does not report escaped opening curly braces. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' The Ignore escaped closing brackets '}' and ']' option specifies whether to report '\\}' and '\\]' outside of a character class when they are allowed to be unescaped by the RegExp dialect. New in 2017.3",
                  "markdown": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports redundant closing tags on empty elements, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 66,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 69,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n private boolean CONST = true;\n void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n     private boolean CONST = true;\n     void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomRegExpInspection",
                "shortDescription": {
                  "text": "Custom RegExp inspection"
                },
                "fullDescription": {
                  "text": "Custom Regex Inspection",
                  "markdown": "Custom Regex Inspection"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "TYPO"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 75,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSimplifiable",
                "shortDescription": {
                  "text": "Regular expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports regular expressions that can be simplified. Example: '[a] xx* [ah-hz]' After the quick-fix is applied: 'a x+ [ahz]' New in 2022.1",
                  "markdown": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Enable the Only warn on TODO comments without any details option to only warn on empty TODO comments, that don't provide any description on the task that should be done. Disable to report all TODO comments.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDirectory",
                "shortDescription": {
                  "text": "Empty directory"
                },
                "fullDescription": {
                  "text": "Reports empty directories. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Only report empty directories located under a source folder option to have only directories under source roots reported.",
                  "markdown": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SyntaxError",
                "shortDescription": {
                  "text": "Syntax error"
                },
                "fullDescription": {
                  "text": "Reports syntax errors that have been found in the result of a batch code inspection run.",
                  "markdown": "Reports syntax errors that have been found in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that use non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myСollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 66,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example:     # Output directories\n    /out/\n    /target/\n    /out/",
                  "markdown": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n```\n    # Output directories\n    /out/\n    /target/\n    /out/\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 77,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSuspiciousBackref",
                "shortDescription": {
                  "text": "Suspicious back reference"
                },
                "fullDescription": {
                  "text": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation. Example of a group defined after its back reference: '\\1(abc)' Example of a group and a back reference in different branches: 'a(b)c|(xy)\\1z' New in 2022.1",
                  "markdown": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 69,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "Line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the Hard wrap at parameter specified in Settings | Editor | Code Style | General.",
                  "markdown": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 33,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantClassElement",
                "shortDescription": {
                  "text": "Redundant '\\d', '[:digit:]', or '\\D' class elements"
                },
                "fullDescription": {
                  "text": "Reports redundant '\\d' or '[:digit:]' that are used in one class with '\\w' or '[:word:]' ('\\D' with '\\W') and can be removed. Example: '[\\w\\d]' After the quick-fix is applied: '[\\w]' New in 2022.2",
                  "markdown": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 35,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlWrongAttributeValue",
                "shortDescription": {
                  "text": "Wrong attribute value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect HTML attribute value.",
                  "markdown": "Reports an incorrect HTML attribute value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsbuildTargetFrameworkTagInspection",
                "shortDescription": {
                  "text": "TargetFramework tag checks"
                },
                "fullDescription": {
                  "text": "RIDER-83136",
                  "markdown": "[RIDER-83136](https://youtrack.jetbrains.com/issue/RIDER-83136/)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MSBuild",
                      "index": 81,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports contents of 'script' tags that are invalid XML. Example: '<script type=\"text/javascript\">\n    console.log('<');\n  </script>' After the quick-fix is applied: '<script type=\"text/javascript\">\n    console.log('&lt;');\n  </script>'",
                  "markdown": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports problems that are found by language annotators in the result of a batch code inspection run.",
                  "markdown": "Reports problems that are found by language annotators in the result of a batch code inspection run."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 41,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "JavaScript",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "FlowJSError",
                "shortDescription": {
                  "text": "Flow type checker"
                },
                "fullDescription": {
                  "text": "Reports errors from Flow.",
                  "markdown": "Reports errors from [Flow](https://flowtype.org/)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftOutOfRangeJS",
                "shortDescription": {
                  "text": "Shift operation by possibly wrong constant"
                },
                "fullDescription": {
                  "text": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range '0..31', shifting by negative or overly large values.",
                  "markdown": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range `0..31`, shifting by negative or overly large values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClosureCompilerSyntax",
                "shortDescription": {
                  "text": "Incorrect usage of JSDoc tags"
                },
                "fullDescription": {
                  "text": "Reports warnings implied by Google Closure Compiler annotations including correct use of '@abstract', '@interface', and '@implements' tags.",
                  "markdown": "Reports warnings implied by *Google Closure Compiler* annotations including correct use of `@abstract`, `@interface`, and `@implements` tags."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionStatementJS",
                "shortDescription": {
                  "text": "Expression statement which is not assignment or call"
                },
                "fullDescription": {
                  "text": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error.",
                  "markdown": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementJS",
                "shortDescription": {
                  "text": "'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'continue' statement.",
                  "markdown": "Reports a `continue` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXSyntaxUsed",
                "shortDescription": {
                  "text": "JSX syntax used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX tag in JavaScript code.",
                  "markdown": "Reports a usage of a JSX tag in JavaScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJoinVariableDeclarationAndAssignment",
                "shortDescription": {
                  "text": "Variable declaration can be merged with the first assignment to the variable"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.",
                  "markdown": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertModuleExportToExport",
                "shortDescription": {
                  "text": "'module.exports' is used instead of 'export'"
                },
                "fullDescription": {
                  "text": "Reports a 'module.export' statement. Suggests replacing it with an 'export' or 'export default' statement. Please note that the quick-fix for converting 'module.export' into 'export' is not available for 'module.export' inside functions or statements because 'export' statements can only be at the top level of a module.",
                  "markdown": "Reports a `module.export` statement. Suggests replacing it with an `export` or `export default` statement.   \n\nPlease note that the quick-fix for converting `module.export` into `export` is not available for `module.export` inside functions or statements because `export` statements can only be at the top level of a module."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DocumentWriteJS",
                "shortDescription": {
                  "text": "Call to 'document.write()'"
                },
                "fullDescription": {
                  "text": "Reports a method call to 'document.write()' or 'document.writeln()'. Most usages of such calls are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, the 'write()' and 'writeln()' calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs.",
                  "markdown": "Reports a method call to `document.write()` or `document.writeln()`. Most usages of such calls are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, the `write()` and `writeln()` calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncompatibleMaskJS",
                "shortDescription": {
                  "text": "Incompatible bitwise mask operation"
                },
                "fullDescription": {
                  "text": "Reports a bitwise mask expression which for sure evaluates to 'true' or 'false'. Expressions are of the form '(var & constant1) == constant2' or '(var | constant1) == constant2', where 'constant1' and 'constant2' are incompatible bitmask constants. Example: // Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask & 0xFF00) == 0x1234) {...}",
                  "markdown": "Reports a bitwise mask expression which for sure evaluates to `true` or `false`. Expressions are of the form `(var & constant1) == constant2` or `(var | constant1) == constant2`, where `constant1` and `constant2` are incompatible bitmask constants.\n\nExample:\n\n```\n// Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask & 0xFF00) == 0x1234) {...}\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved JavaScript variable"
                },
                "fullDescription": {
                  "text": "Reports an unresolved referenced variable or field. TypeScript code is ignored.",
                  "markdown": "Reports an unresolved referenced variable or field.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicatedDeclaration",
                "shortDescription": {
                  "text": "Duplicate declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple declarations in a scope.",
                  "markdown": "Reports multiple declarations in a scope."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateGenericTypes",
                "shortDescription": {
                  "text": "Incorrect generic type argument"
                },
                "fullDescription": {
                  "text": "Reports an invalid type argument in a function, interface, or class declaration.",
                  "markdown": "Reports an invalid type argument in a function, interface, or class declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFileReferences",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.",
                  "markdown": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithInconsistentReturnsJS",
                "shortDescription": {
                  "text": "Function with inconsistent returns"
                },
                "fullDescription": {
                  "text": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error. Example: 'function foo() {\n  if (true)\n    return 3;\n  return;\n}'",
                  "markdown": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error.\n\nExample:\n\n\n    function foo() {\n      if (true)\n        return 3;\n      return;\n    }\n\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ClassMemberInitializationOrder",
                "shortDescription": {
                  "text": "Use of possibly unassigned property in a static initializer"
                },
                "fullDescription": {
                  "text": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet. Initialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.",
                  "markdown": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.   \n\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionJS",
                "shortDescription": {
                  "text": "Nested function"
                },
                "fullDescription": {
                  "text": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing. Use the checkbox below to ignore anonymous nested functions.",
                  "markdown": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing.\n\n\nUse the checkbox below to ignore anonymous nested functions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUMDGlobal",
                "shortDescription": {
                  "text": "Referenced UMD global variable"
                },
                "fullDescription": {
                  "text": "Reports a usage of a UMD global variable if the current file is a module (EcmaScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly.",
                  "markdown": "Reports a usage of a UMD global variable if the current file is a module (EcmaScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryReturnJS",
                "shortDescription": {
                  "text": "Unnecessary 'return' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'return' statement, that is, a 'return' statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed.",
                  "markdown": "Reports an unnecessary `return` statement, that is, a `return` statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StandardJS",
                "shortDescription": {
                  "text": "Standard code style"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the JavaScript Standard Style linter. The highlighting severity in the editor is based on the severity level the linter reports.",
                  "markdown": "Reports a discrepancy detected by the [JavaScript Standard Style](https://standardjs.com/) linter.   \n\nThe highlighting severity in the editor is based on the severity level the linter reports."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCommentMatchesSignature",
                "shortDescription": {
                  "text": "Mismatched JSDoc and function signature"
                },
                "fullDescription": {
                  "text": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment. Example: '/**\n * @param height Height in pixels\n */\nfunction sq(height, width) {} // width is not documented' After the quick-fix is applied: '/**\n * @param height Height in pixels\n * @param width\n */\nfunction sq(height, width) {}'",
                  "markdown": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment.\n\n**Example:**\n\n\n    /**\n     * @param height Height in pixels\n     */\n    function sq(height, width) {} // width is not documented\n\nAfter the quick-fix is applied:\n\n\n    /**\n     * @param height Height in pixels\n     * @param width\n     */\n    function sq(height, width) {}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleReturnPointsJS",
                "shortDescription": {
                  "text": "Function with multiple return points"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple return points. Such functions are hard to understand and maintain.",
                  "markdown": "Reports a function with multiple return points. Such functions are hard to understand and maintain."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRemoveUnnecessaryParentheses",
                "shortDescription": {
                  "text": "Unnecessary parentheses"
                },
                "fullDescription": {
                  "text": "Reports redundant parentheses. In expressions: 'var x = ((1) + 2) + 3' In arrow function argument lists: 'var incrementer = (x) => x + 1' In TypeScript and Flow type declarations: 'type Card = (Suit & Rank) | (Suit & Number)'",
                  "markdown": "Reports redundant parentheses.\n\nIn expressions:\n`var x = ((1) + 2) + 3`\n\nIn arrow function argument lists:\n`var incrementer = (x) => x + 1`\n\nIn TypeScript and Flow type declarations:\n`type Card = (Suit & Rank) | (Suit & Number)`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommaExpressionJS",
                "shortDescription": {
                  "text": "Comma expression"
                },
                "fullDescription": {
                  "text": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of 'for' loops are ignored.",
                  "markdown": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of `for` loops are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6BindWithArrowFunction",
                "shortDescription": {
                  "text": "Suspicious usage of 'bind' with arrow function"
                },
                "fullDescription": {
                  "text": "Reports 'bind' used together with an arrow function. Because arrow functions use lexical 'this', a 'bind' call will have no effect on them. See here for details.",
                  "markdown": "Reports `bind` used together with an arrow function.  \nBecause arrow functions use lexical `this`, a `bind` call will have no effect on them.  \nSee [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this) for details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSBitwiseOperatorUsage",
                "shortDescription": {
                  "text": "Bitwise operator usage"
                },
                "fullDescription": {
                  "text": "Reports a suspicious usage of a bitwise AND (\"'&'\") or OR (\"'|'\") operator. Usually it is a typo and the result of applying boolean operations AND (\"'&&'\") and OR (\"'||'\") is expected.",
                  "markdown": "Reports a suspicious usage of a bitwise AND (\"`&`\") or OR (\"`|`\") operator. Usually it is a typo and the result of applying boolean operations AND (\"`&&`\") and OR (\"`||`\") is expected."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with identical branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with identical 'then' and 'else' branches. Such statements are almost certainly an error.",
                  "markdown": "Reports an `if` statement with identical `then` and `else` branches. Such statements are almost certainly an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConsecutiveCommasInArrayLiteral",
                "shortDescription": {
                  "text": "Consecutive commas in array literal"
                },
                "fullDescription": {
                  "text": "Reports a consecutive comma in an array literal. The skipped element accepts the 'undefined' value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.",
                  "markdown": "Reports a consecutive comma in an array literal. The skipped element accepts the `undefined` value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports incorrect type of: a parameter in a function call a return value an assigned expression TypeScript code is ignored.",
                  "markdown": "Reports incorrect type of:\n\n* a parameter in a function call\n* a return value\n* an assigned expression\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfClassThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' of a class from closure"
                },
                "fullDescription": {
                  "text": "Reports an attempt to reference a member of an ECMAScript class via the 'this.' qualifier in a nested function that is not a lambda. 'this' in a nested function that is not a lambda is the function's own 'this' and doesn't relate to the outer class.",
                  "markdown": "Reports an attempt to reference a member of an ECMAScript class via the `this.` qualifier in a nested function that is not a lambda.  \n`this` in a nested function that is not a lambda is the function's own `this` and doesn't relate to the outer class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryContinueJS",
                "shortDescription": {
                  "text": "Unnecessary 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'continue' statement at the end of a loop. Suggests removing such statements.",
                  "markdown": "Reports an unnecessary `continue` statement at the end of a loop. Suggests removing such statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementWithLabelJS",
                "shortDescription": {
                  "text": "'break' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement.",
                  "markdown": "Reports a labeled `break` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeclarationsAtScopeStart",
                "shortDescription": {
                  "text": "'var' declared not at the beginning of a function"
                },
                "fullDescription": {
                  "text": "Checks that declarations of local variables declared with var are at the top of a function scope. By default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code.",
                  "markdown": "Checks that declarations of local variables declared with **var** are at the top of a function scope.   \n\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertIndexedForToForOf",
                "shortDescription": {
                  "text": "Indexed 'for' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports an indexed 'for' loop used on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops are introduced in ECMAScript 6 and iterate over 'iterable' objects.",
                  "markdown": "Reports an indexed [for](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop used on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops are introduced in ECMAScript 6 and iterate over `iterable` objects."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertVarToLetConst",
                "shortDescription": {
                  "text": "'var' is used instead of 'let' or 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'var' declaration that is used instead of 'let' or 'const'. Both 'let' and 'const' are block-scoped and behave more strictly. Suggests replacing all 'var' declarations with 'let' or 'const' declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors. Select the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action.",
                  "markdown": "Reports a `var` declaration that is used instead of `let` or `const`.  \nBoth `let` and `const` are block-scoped and behave more strictly.   \n\nSuggests replacing all `var` declarations with `let` or `const` declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.   \nSelect the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DynamicallyGeneratedCodeJS",
                "shortDescription": {
                  "text": "Execution of dynamically generated code"
                },
                "fullDescription": {
                  "text": "Reports a call of the 'eval()', 'setTimeout()', or 'setInterval()' function or an allocation of a 'Function' object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk. Ignores the cases when a callback function is provided to these methods statically, without code generation.",
                  "markdown": "Reports a call of the `eval()`, `setTimeout()`, or `setInterval()` function or an allocation of a `Function` object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk.   \n\nIgnores the cases when a callback function is provided to these methods statically, without code generation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedCatchParameterJS",
                "shortDescription": {
                  "text": "Unused 'catch' parameter"
                },
                "fullDescription": {
                  "text": "Reports a 'catch' parameter that is not used in the corresponding block. The 'catch' parameters named 'ignore' or 'ignored' are ignored. Use the checkbox below to disable this inspection for 'catch' blocks with comments.",
                  "markdown": "Reports a `catch` parameter that is not used in the corresponding block. The `catch` parameters named `ignore` or `ignored` are ignored.\n\n\nUse the checkbox below to disable this inspection for `catch`\nblocks with comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousFunctionJS",
                "shortDescription": {
                  "text": "Anonymous function"
                },
                "fullDescription": {
                  "text": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a 'name' property specified in the ECMAScript 6 standard. For example, 'var bar = function() {};' is not reported.",
                  "markdown": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a `name` property specified in the ECMAScript 6 standard. For example, `var bar = function() {};` is not reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyCatchBlockJS",
                "shortDescription": {
                  "text": "Empty 'catch' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'catch' block. This indicates that errors are simply ignored instead of handling them. Any comment in a 'catch' block mutes the inspection.",
                  "markdown": "Reports an empty `catch` block. This indicates that errors are simply ignored instead of handling them.   \n\nAny comment in a `catch` block mutes the inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'throw' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports s 'throw' statement inside a 'finally' block. Such 'throw' statements may mask exceptions thrown, and complicate debugging.",
                  "markdown": "Reports s `throw` statement inside a `finally` block. Such `throw` statements may mask exceptions thrown, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' from closure"
                },
                "fullDescription": {
                  "text": "Reports a 'this' in closure that is used for referencing properties of outer context. Example: 'function Outer() {\n  this.outerProp = 1;\n  function inner() {\n    // bad, because 'outerProp' of Outer\n    // won't be updated here\n    // on calling 'new Outer()' as may be expected\n    this.outerProp = 2;\n  }\n  inner();\n}'",
                  "markdown": "Reports a `this` in closure that is used for referencing properties of outer context.\n\nExample:\n\n\n    function Outer() {\n      this.outerProp = 1;\n      function inner() {\n        // bad, because 'outerProp' of Outer\n        // won't be updated here\n        // on calling 'new Outer()' as may be expected\n        this.outerProp = 2;\n      }\n      inner();\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedLibraryURL",
                "shortDescription": {
                  "text": "Missed locally stored library for HTTP link"
                },
                "fullDescription": {
                  "text": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation.",
                  "markdown": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptFieldCanBeMadeReadonly",
                "shortDescription": {
                  "text": "Field can be readonly"
                },
                "fullDescription": {
                  "text": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor).",
                  "markdown": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedIfStatementJS",
                "shortDescription": {
                  "text": "Negated 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports if statements which have an else branch and a negated condition. Flipping the order of the if and else branches will usually increase the clarity of such statements.",
                  "markdown": "Reports **if** statements which have an **else** branch and a negated condition. Flipping the order of the **if** and **else** branches will usually increase the clarity of such statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "Conditional expression with identical branches"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression with identical 'then' and 'else' branches.",
                  "markdown": "Reports a ternary conditional expression with identical `then` and `else` branches."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIncompatibleTypesComparison",
                "shortDescription": {
                  "text": "Comparison of expressions having incompatible types"
                },
                "fullDescription": {
                  "text": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values.",
                  "markdown": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6TopLevelAwaitExpression",
                "shortDescription": {
                  "text": "Top-level 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a usage of a top-level 'await' expression. While the new 'top-level async' proposal is on its way, using 'await' outside async functions is not allowed.",
                  "markdown": "Reports a usage of a top-level `await` expression. While the new 'top-level async' proposal is on its way, using `await` outside async functions is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterNamingConventionJS",
                "shortDescription": {
                  "text": "Function parameter naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions.",
                  "markdown": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length and regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParametersPerFunctionJS",
                "shortDescription": {
                  "text": "Function with too many parameters"
                },
                "fullDescription": {
                  "text": "Reports a function with too many parameters. Such functions often indicate problems with design. Use the field below to specify the maximum acceptable number of parameters for a function.",
                  "markdown": "Reports a function with too many parameters. Such functions often indicate problems with design.\n\n\nUse the field below to specify the maximum acceptable number of parameters for a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousNameCombination",
                "shortDescription": {
                  "text": "Suspicious variable/parameter name combination"
                },
                "fullDescription": {
                  "text": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it. Example: 'var x = 0;\n  var y = x;' or 'var x = 0, y = 0;\n  var rc = new Rectangle(y, x, 20, 20);' Specify the names that should not be used together. An error is reported if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed variable contains words from another group.",
                  "markdown": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample:\n\n\n      var x = 0;\n      var y = x;\n\nor\n\n\n      var x = 0, y = 0;\n      var rc = new Rectangle(y, x, 20, 20);\n\nSpecify the names that should not be used together. An error is reported\nif a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\nvariable contains words from another group."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedFunction",
                "shortDescription": {
                  "text": "Unresolved JavaScript function"
                },
                "fullDescription": {
                  "text": "Reports an unresolved function in a call. TypeScript code is ignored.",
                  "markdown": "Reports an unresolved function in a call.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedFunctionCallJS",
                "shortDescription": {
                  "text": "Chained function call"
                },
                "fullDescription": {
                  "text": "Reports a function call whose target is another function call, for example, 'foo().bar()'",
                  "markdown": "Reports a function call whose target is another function call, for example, `foo().bar()`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnLHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on left side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons.",
                  "markdown": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCheckFunctionSignatures",
                "shortDescription": {
                  "text": "Signature mismatch"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types. TypeScript code is ignored.",
                  "markdown": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantAwait",
                "shortDescription": {
                  "text": "Redundant 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a redundant usage of 'await', such as 'await await', or awaiting a non-promise result. When the 'Report for promises' option is selected, suggests removing 'await' before promises when applicable (in 'return' statements, and with 'Promise.resolve/reject'). Removing 'await' in such contexts causes two problems. Surrounding your code with 'try-catch' and forgetting to add 'await' will change code semantics while you may fail to notice that. Having an explicit 'await' may prevent the V8 runtime from providing async stack traces.",
                  "markdown": "Reports a redundant usage of `await`, such as `await await`, or awaiting a non-promise result.\n\n\nWhen the 'Report for promises' option is selected, suggests removing `await` before promises when applicable\n(in `return` statements, and with `Promise.resolve/reject`).\n\nRemoving `await` in such contexts causes two problems.\n\n* Surrounding your code with `try-catch` and forgetting to add `await` will change code semantics while you may fail to notice that.\n* Having an explicit `await` may prevent the V8 runtime from providing [async stack traces](http://bit.ly/v8-zero-cost-async-stack-traces)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToFunctionParameterJS",
                "shortDescription": {
                  "text": "Assignment to function parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.",
                  "markdown": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FallThroughInSwitchStatementJS",
                "shortDescription": {
                  "text": "Fallthrough in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing 'break' or 'return'.",
                  "markdown": "Reports a `switch` statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing `break` or `return`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallerJS",
                "shortDescription": {
                  "text": "Use of 'caller' property"
                },
                "fullDescription": {
                  "text": "Reports a usage of the 'caller' property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.",
                  "markdown": "Reports a usage of the `caller` property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSwitchVariableDeclarationIssue",
                "shortDescription": {
                  "text": "Variable is declared and being used in different 'case' clauses"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared in one 'case' clause of a 'switch' statement but is used in another 'case' clause of the same statement. For block-scoped variables, this results in throwing a 'ReferenceError'. For 'var' variables, it indicates a potential error. Disable the inspection for 'var' variables if this pattern is used intentionally.",
                  "markdown": "Reports a variable that is declared in one `case` clause of a `switch` statement but is used in another `case` clause of the same statement. For block-scoped variables, this results in throwing a `ReferenceError`. For `var` variables, it indicates a potential error.\n\nDisable the inspection for `var` variables if this pattern is used intentionally."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReuseOfLocalVariableJS",
                "shortDescription": {
                  "text": "Reuse of local variable"
                },
                "fullDescription": {
                  "text": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.",
                  "markdown": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 57,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertLetToConst",
                "shortDescription": {
                  "text": "'let' is used instead of 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'let' declaration that can be made 'const'.",
                  "markdown": "Reports a `let` declaration that can be made `const`.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6CheckImport",
                "shortDescription": {
                  "text": "Unresolved imported name"
                },
                "fullDescription": {
                  "text": "Reports an unresolved name or binding in an 'import' declaration. TypeScript code is ignored.",
                  "markdown": "Reports an unresolved name or binding in an `import` declaration.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSReferencingMutableVariableFromClosure",
                "shortDescription": {
                  "text": "Referencing mutable variable from closure"
                },
                "fullDescription": {
                  "text": "Reports access to outer mutable variables from functions. Example: 'for (var i = 1; i <= 3; i++) {\n    setTimeout(function() {\n        console.log(i); // bad\n    }, 0);\n  }'",
                  "markdown": "Reports access to outer mutable variables from functions.\n\nExample:\n\n\n      for (var i = 1; i <= 3; i++) {\n        setTimeout(function() {\n            console.log(i); // bad\n        }, 0);\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertRequireIntoImport",
                "shortDescription": {
                  "text": "'require()' is used instead of 'import'"
                },
                "fullDescription": {
                  "text": "Reports a 'require()' statement. Suggests converting it to a 'require()' call with an 'import' statement. Enable 'Convert require() inside inner scopes with Fix all action' to convert all 'require()' calls inside the nested functions and statements when using the 'Fix all' action. Please note that converting 'require()' statements inside inner scopes to 'import' statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. 'require()' calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used. Clear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action.",
                  "markdown": "Reports a `require()` statement. Suggests converting it to a `require()` call with an `import` statement.   \n\nEnable 'Convert require() inside inner scopes with Fix all action' to convert all `require()` calls inside the nested functions and statements when using the 'Fix all' action.   \n\nPlease note that converting `require()` statements inside inner scopes to `import` statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. `require()` calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used.   \nClear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedGlobalSymbols",
                "shortDescription": {
                  "text": "Unused global symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused globally accessible public function, variable, class, or property.",
                  "markdown": "Reports an unused globally accessible public function, variable, class, or property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 63,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Nested conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic.",
                  "markdown": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PossiblyAsyncFunction",
                "shortDescription": {
                  "text": "'await' in non-async function"
                },
                "fullDescription": {
                  "text": "Reports a usage of 'await' in a function that was possibly intended to be async but is actually missing the 'async' modifier. Although 'await' can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made 'async'.",
                  "markdown": "Reports a usage of `await` in a function that was possibly intended to be async but is actually missing the `async` modifier. Although `await` can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made `async`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSFlagCommentPlacement",
                "shortDescription": {
                  "text": "Misplaced @flow flag"
                },
                "fullDescription": {
                  "text": "Reports a '@flow' flag comment that is not located at the top of a file.",
                  "markdown": "Reports a `@flow` flag comment that is not located at the top of a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchDefault",
                "shortDescription": {
                  "text": "'switch' statement has no 'default' branch"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement without a 'default' clause when some possible values are not enumerated.",
                  "markdown": "Reports a `switch` statement without a `default` clause when some possible values are not enumerated."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXNamespaceValidation",
                "shortDescription": {
                  "text": "Missing JSX namespace"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation.",
                  "markdown": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReservedWordUsedAsNameJS",
                "shortDescription": {
                  "text": "Reserved word used as name"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords.",
                  "markdown": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncrementDecrementResultUsedJS",
                "shortDescription": {
                  "text": "Result of increment or decrement used"
                },
                "fullDescription": {
                  "text": "Reports an increment ('++') or decrement ('--') expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: 'var a = b++'",
                  "markdown": "Reports an increment (`++`) or decrement (`--`) expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: `var a = b++`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousTypeOfGuard",
                "shortDescription": {
                  "text": "Unsound type guard check"
                },
                "fullDescription": {
                  "text": "Reports a 'typeof' or 'instanceof' unsound type guard check. The 'typeof x' type guard can be unsound in one of the following two cases: 'typeof x' never corresponds to the specified value (for example, 'typeof x === 'number'' when 'x' is of the type 'string | boolean') 'typeof x' always corresponds to the specified value (for example, 'typeof x === 'string'' when 'x' is of the type 'string') The 'x instanceof A' type guard can be unsound in one of the following two cases: The type of 'x' is not related to 'A' The type of 'x' is 'A' or a subtype of 'A'",
                  "markdown": "Reports a `typeof` or `instanceof` unsound type guard check. The `typeof x` type guard can be unsound in one of the following two cases:\n\n* `typeof x` never corresponds to the specified value (for example, `typeof x === 'number'` when `x` is of the type 'string \\| boolean')\n* `typeof x` always corresponds to the specified value (for example, `typeof x === 'string'` when `x` is of the type 'string')\n\n<br />\n\nThe `x instanceof A` type guard can be unsound in one of the following two cases:\n\n* The type of `x` is not related to `A`\n* The type of `x` is `A` or a subtype of `A`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopStatementThatDoesntLoopJS",
                "shortDescription": {
                  "text": "Loop statement that doesn't loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error.",
                  "markdown": "Reports a `for`, `while`, or `do` statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonASCIINames",
                "shortDescription": {
                  "text": "Identifiers with non-ASCII symbols"
                },
                "fullDescription": {
                  "text": "Reports a non-ASCII symbol in a name. If the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols. Otherwise reports all names that contain both ASCII and non-ASCII symbols.",
                  "markdown": "Reports a non-ASCII symbol in a name.  \n\nIf the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.  \nOtherwise reports all names that contain both ASCII and non-ASCII symbols."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6MissingAwait",
                "shortDescription": {
                  "text": "Missing await for an async function call"
                },
                "fullDescription": {
                  "text": "Reports an 'async' function call without an expected 'await' prefix inside an 'async' function. Such call returns a 'Promise' and control flow is continued immediately. Example: 'async function bar() { /* ... */ }\nasync function foo() {\n    bar(); // bad\n}' After the quick-fix is applied, the 'await' prefix is added: 'async function bar() { /* ... */ }\nasync function foo() {\n    await bar(); // good\n}' When the 'Report for promises in return statements' checkbox is selected, also suggests adding 'await' in return statements. While this is generally not necessary, it gives two main benefits. You won't forget to add 'await' when surrounding your code with 'try-catch'. An explicit 'await' helps V8 runtime to provide async stack traces.",
                  "markdown": "Reports an `async` function call without an expected `await` prefix inside an `async` function. Such call returns a `Promise` and control flow is continued immediately.\n\nExample:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        bar(); // bad\n    }\n\n\nAfter the quick-fix is applied, the `await` prefix is added:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        await bar(); // good\n    }\n\n<br />\n\nWhen the 'Report for promises in return statements' checkbox is selected, also suggests adding `await` in return statements.  \nWhile this is generally not necessary, it gives two main benefits.  \n\n* You won't forget to add `await` when surrounding your code with `try-catch`.\n* An explicit `await` helps V8 runtime to provide [async stack traces](https://bit.ly/v8-zero-cost-async-stack-traces)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TailRecursionJS",
                "shortDescription": {
                  "text": "Tail recursion"
                },
                "fullDescription": {
                  "text": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments.",
                  "markdown": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingPlusesOrMinusesJS",
                "shortDescription": {
                  "text": "Confusing sequence of '+' or '-'"
                },
                "fullDescription": {
                  "text": "Reports a suspicious combination of '+' or '-' characters in JavaScript code (for example, 'a+++b'. Such sequences are confusing, and their semantics may change through changes in the whitespace.",
                  "markdown": "Reports a suspicious combination of `+` or `-` characters in JavaScript code (for example, `a+++b`. Such sequences are confusing, and their semantics may change through changes in the whitespace."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptConfig",
                "shortDescription": {
                  "text": "Inconsistent tsconfig.json properties"
                },
                "fullDescription": {
                  "text": "Reports inconsistency of a 'paths', 'checkJs', or 'extends' property in a tsconfig.json file. The 'checkJs' property requires 'allowJs'. The 'extends' property should be a valid file reference.",
                  "markdown": "Reports inconsistency of a `paths`, `checkJs`, or `extends` property in a tsconfig.json file.   \nThe `checkJs` property requires `allowJs`.   \nThe `extends` property should be a valid file reference."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexBooleanExpressionJS",
                "shortDescription": {
                  "text": "Overly complex boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression.",
                  "markdown": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Overly complex arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression.",
                  "markdown": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateConditionJS",
                "shortDescription": {
                  "text": "Duplicate condition in 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports duplicate conditions in different branches of an 'if' statement. Duplicate conditions usually represent programmer oversight. Example: 'if (a) {\n    ...\n  } else if (a) {\n    ...\n  }'",
                  "markdown": "Reports duplicate conditions in different branches of an `if` statement. Duplicate conditions usually represent programmer oversight.\n\nExample:\n\n\n      if (a) {\n        ...\n      } else if (a) {\n        ...\n      }\n\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelJS",
                "shortDescription": {
                  "text": "Unnecessary label"
                },
                "fullDescription": {
                  "text": "Reports an unused label.",
                  "markdown": "Reports an unused label."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUnresolvedFunction",
                "shortDescription": {
                  "text": "Unresolved TypeScript function"
                },
                "fullDescription": {
                  "text": "Reports a call of a function that is not resolved.",
                  "markdown": "Reports a call of a function that is not resolved."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6UnusedImports",
                "shortDescription": {
                  "text": "Unused import"
                },
                "fullDescription": {
                  "text": "Reports a redundant 'import' statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import 'import 'packageName'' instead of the regular one.",
                  "markdown": "Reports a redundant `import` statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import `import 'packageName'` instead of the regular one."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerHTMLJS",
                "shortDescription": {
                  "text": "Use of 'innerHTML' property"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript access to DOM nodes as text using the 'innerHTML' property. Most usages of 'innerHTML' are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, 'innerHTML' will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs.",
                  "markdown": "Reports a JavaScript access to DOM nodes as text using the `innerHTML` property. Most usages of `innerHTML` are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, `innerHTML` will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAssignmentUsedAsCondition",
                "shortDescription": {
                  "text": "Assignment used as condition"
                },
                "fullDescription": {
                  "text": "Reports an assignment that is used as the condition of an 'if', 'while', 'for', or 'do' statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, '=' instead of '==').",
                  "markdown": "Reports an assignment that is used as the condition of an `if`, `while`, `for`, or `do` statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, `=` instead of `==`)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopReplaceableByWhileJS",
                "shortDescription": {
                  "text": "'for' loop may be replaced by 'while' loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler 'while' statement. Example: 'for(; exitCondition(); ) {\n    process();\n  }' After the quick-fix is applied the result looks like: 'while(exitCondition()) {\n    process();\n  }' Use the checkbox below if you wish this inspection to ignore for loops with trivial or non-existent conditions.",
                  "markdown": "Reports a `for` loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler `while` statement.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nUse the checkbox below if you wish this inspection to ignore **for** loops with trivial or non-existent conditions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantConditionalExpressionJS",
                "shortDescription": {
                  "text": "Constant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression in the format 'true? result1: result2' or 'false? result1: result2. Suggests simplifying the expression.'",
                  "markdown": "Reports a conditional expression in the format `true? result1: result2` or `false? result1: result2``.\nSuggests simplifying the expression.\n`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved TypeScript variable"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a variable or field.",
                  "markdown": "Reports an unresolved reference to a variable or field."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonBlockStatementBodyJS",
                "shortDescription": {
                  "text": "Statement body without braces"
                },
                "fullDescription": {
                  "text": "Reports a 'if', 'while', 'for', or 'with' statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance.",
                  "markdown": "Reports a `if`, `while`, `for`, or `with` statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateJSDoc",
                "shortDescription": {
                  "text": "Syntax errors and unresolved references in JSDoc"
                },
                "fullDescription": {
                  "text": "Reports a syntax discrepancy in a documentation comment.",
                  "markdown": "Reports a syntax discrepancy in a documentation comment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSConfig",
                "shortDescription": {
                  "text": "Missing .flowconfig"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file with a '@flow' flag that doesn't have an associated '.flowconfig' file in the project.",
                  "markdown": "Reports a JavaScript file with a `@flow` flag that doesn't have an associated `.flowconfig` file in the project."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a parameter, return value, or assigned expression of incorrect type.",
                  "markdown": "Reports a parameter, return value, or assigned expression of incorrect type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSObjectNullOrUndefined",
                "shortDescription": {
                  "text": "Object is 'null' or 'undefined'"
                },
                "fullDescription": {
                  "text": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is 'undefined' or 'null'.",
                  "markdown": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is `undefined` or `null`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Pointless arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.",
                  "markdown": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSmartCast",
                "shortDescription": {
                  "text": "Narrowed type"
                },
                "fullDescription": {
                  "text": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection.",
                  "markdown": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAccessibilityCheck",
                "shortDescription": {
                  "text": "Inaccessible @private and @protected members referenced"
                },
                "fullDescription": {
                  "text": "Reports a reference to a JavaScript member that is marked with a '@private' or '@protected' tag but does not comply with visibility rules that these tags imply.",
                  "markdown": "Reports a reference to a JavaScript member that is marked with a `@private` or `@protected` tag but does not comply with visibility rules that these tags imply."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleLoopsJS",
                "shortDescription": {
                  "text": "Function with multiple loops"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple loop statements.",
                  "markdown": "Reports a function with multiple loop statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NpmUsedModulesInstalled",
                "shortDescription": {
                  "text": "Missing module dependency"
                },
                "fullDescription": {
                  "text": "Reports a module from a 'require()' call or an 'import' statement that is not installed or is not listed in package.json dependencies. Suggests installing the module and/or including it into package.json. For 'require()' calls, works only in the files from the scope of Node.js Core JavaScript library.",
                  "markdown": "Reports a module from a `require()` call or an `import` statement that is not installed or is not listed in package.json dependencies.\n\nSuggests installing the module and/or including it into package.json.\n\nFor `require()` calls, works only in the files from the scope of *Node.js Core* JavaScript library."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionNamingConventionJS",
                "shortDescription": {
                  "text": "Function naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression for function names. Use the standard 'java.util.regex' format for regular expressions.",
                  "markdown": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard `java.util.regex` format for regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectAllocationIgnoredJS",
                "shortDescription": {
                  "text": "Result of object allocation ignored"
                },
                "fullDescription": {
                  "text": "Reports object allocation where the result of the allocated object is ignored, for example, 'new Error();' as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy.",
                  "markdown": "Reports object allocation where the result of the allocated object is ignored, for example, `new Error();` as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSHint",
                "shortDescription": {
                  "text": "JSHint"
                },
                "fullDescription": {
                  "text": "Reports a problem detected by the JSHint linter.",
                  "markdown": "Reports a problem detected by the [JSHint](https://jshint.com/) linter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExceptionCaughtLocallyJS",
                "shortDescription": {
                  "text": "Exception used for local control-flow"
                },
                "fullDescription": {
                  "text": "Reports a 'throw' statement whose exceptions are always caught by the containing 'try' statement. Using 'throw' statements as a 'goto' to change the local flow of control is confusing.",
                  "markdown": "Reports a `throw` statement whose exceptions are always caught by the containing `try` statement. Using `throw` statements as a `goto` to change the local flow of control is confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclomaticComplexityJS",
                "shortDescription": {
                  "text": "Overly complex function"
                },
                "fullDescription": {
                  "text": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test. Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function.",
                  "markdown": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test.\n\n\nUse the field provided below to specify the maximum acceptable cyclomatic complexity for a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Stylelint",
                "shortDescription": {
                  "text": "Stylelint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the Stylelint linter. The highlighting is based on the rule severity specified in the Stylelint configuration file for each individual rule.",
                  "markdown": "Reports a discrepancy detected by the [Stylelint](http://stylelint.io) linter.   \n\nThe highlighting is based on the rule severity specified in the [Stylelint configuration file](https://stylelint.io/user-guide/configure) for each individual rule."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code quality tools",
                      "index": 68,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptJSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name. The template for a new component can be modified in Editor | File and Code Templates.",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnfilteredForInLoop",
                "shortDescription": {
                  "text": "Unfiltered for..in loop"
                },
                "fullDescription": {
                  "text": "Reports unfiltered 'for-in' loops. The use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when 'Object''s prototype may be incorrectly modified. For example, the following code will print 42 and myMethod: 'Object.prototype.myMethod = function myMethod() {};\nlet a = { foo: 42 };\nfor (let i in a) {\n  console.log(a[i]);\n}' Suggests replacing the whole loop with a 'Object.keys()' method or adding a 'hasOwnProperty()' check. After applying the quick-fix the code looks as follows: 'for (let i in a) {\n  if (a.hasOwnProperty(i)) {\n    console.log(a[i]);\n  }\n}'",
                  "markdown": "Reports unfiltered `for-in` loops.   \n\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when `Object`'s prototype may be incorrectly modified. For example, the following code will print **42** and **myMethod** :   \n\n\n    Object.prototype.myMethod = function myMethod() {};\n    let a = { foo: 42 };\n    for (let i in a) {\n      console.log(a[i]);\n    }\n\nSuggests replacing the whole loop with a `Object.keys()` method or adding a `hasOwnProperty()` check. After applying the quick-fix the code looks as follows:\n\n\n    for (let i in a) {\n      if (a.hasOwnProperty(i)) {\n        console.log(a[i]);\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFunctionExpressionToArrowFunction",
                "shortDescription": {
                  "text": "Function expression is used instead of arrow function"
                },
                "fullDescription": {
                  "text": "Reports a function expression. Suggests converting it to an arrow function. Example: 'arr.map(function(el) {return el + 1})' After applying the quick-fix the code looks as follows: 'arr.map(el => el + 1)'",
                  "markdown": "Reports a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) expression. Suggests converting it to an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nExample:\n\n    arr.map(function(el) {return el + 1})\n\nAfter applying the quick-fix the code looks as follows:\n\n    arr.map(el => el + 1)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UpdateDependencyToLatestVersion",
                "shortDescription": {
                  "text": "Update package.json dependencies to latest versions"
                },
                "fullDescription": {
                  "text": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.",
                  "markdown": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentResultUsedJS",
                "shortDescription": {
                  "text": "Result of assignment used"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, '=' instead of '=='. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Expressions in parentheses are ignored.",
                  "markdown": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, `=` instead of `==`. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways.\n\nExpressions in parentheses are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnRHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on right side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons.",
                  "markdown": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnnecessarySemicolon",
                "shortDescription": {
                  "text": "Unnecessary semicolon"
                },
                "fullDescription": {
                  "text": "Reports an unneeded semicolon.",
                  "markdown": "Reports an unneeded semicolon."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousEqPlus",
                "shortDescription": {
                  "text": "Suspicious '=+' assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'a =+ b'. Suggests replacing with 'a += b'.",
                  "markdown": "Reports an assignment in the form `a =+ b`. Suggests replacing with `a += b`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedAssignment",
                "shortDescription": {
                  "text": "Unused assignment"
                },
                "fullDescription": {
                  "text": "Reports a variable whose value is never used after assignment. Suggests removing the unused variable to shorten the code and to avoid redundant allocations. The following cases are reported: A variable is never read after assignment. The value of a variable is always overwritten with another assignment before the variable is read next time. The initializer of a variable is redundant (for one of the above-mentioned reasons).",
                  "markdown": "Reports a variable whose value is never used after assignment.  \nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\nThe following cases are reported:\n\n* A variable is never read after assignment.\n* The value of a variable is always overwritten with another assignment before the variable is read next time.\n* The initializer of a variable is redundant (for one of the above-mentioned reasons)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 63,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingFloatingPointLiteralJS",
                "shortDescription": {
                  "text": "Confusing floating point literal"
                },
                "fullDescription": {
                  "text": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.",
                  "markdown": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueOrBreakFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'continue' or 'break' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'break' or 'continue' statement inside a 'finally' block. Such statements are very confusing, may hide exceptions, and complicate debugging.",
                  "markdown": "Reports a `break` or `continue` statement inside a `finally` block. Such statements are very confusing, may hide exceptions, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMethodCanBeStatic",
                "shortDescription": {
                  "text": "Method can be made 'static'"
                },
                "fullDescription": {
                  "text": "Reports a class method that can be safely made 'static'. A method can be 'static' if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass. Use the first checkbox below to inspect only 'private' methods.",
                  "markdown": "Reports a class method that can be safely made `static`. A method can be `static` if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass.\n\n\nUse the first checkbox below to inspect only `private` methods."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndeclaredVariable",
                "shortDescription": {
                  "text": "Implicitly declared global JavaScript variable"
                },
                "fullDescription": {
                  "text": "Reports an implicit declaration of a global variable. Example: 'var aaa = 1; // good\n  bbb = 2; // bad, if bbb is not declared with 'var' somewhere'",
                  "markdown": "Reports an implicit declaration of a global variable.\n\nExample:\n\n\n      var aaa = 1; // good\n      bbb = 2; // bad, if bbb is not declared with 'var' somewhere\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SillyAssignmentJS",
                "shortDescription": {
                  "text": "Variable is assigned to itself"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'x = x'.",
                  "markdown": "Reports an assignment in the form `x = x`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptCheckImport",
                "shortDescription": {
                  "text": "Unresolved imported name"
                },
                "fullDescription": {
                  "text": "Reports an unresolved name or binding in an 'import' declaration in TypeScript code.",
                  "markdown": "Reports an unresolved name or binding in an `import` declaration in TypeScript code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteRecursionJS",
                "shortDescription": {
                  "text": "Infinite recursion"
                },
                "fullDescription": {
                  "text": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally.",
                  "markdown": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMismatchedCollectionQueryUpdate",
                "shortDescription": {
                  "text": "Mismatched query and update of collection"
                },
                "fullDescription": {
                  "text": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error. Query methods are automatically detected, based on whether they return something, or a callback is passed to them. Use the table below to specify which methods are update methods.",
                  "markdown": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error.\n\n\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PreferShortImport",
                "shortDescription": {
                  "text": "Import can be shortened"
                },
                "fullDescription": {
                  "text": "Reports an ES6 import whose 'from' part can be shortened. Suggests importing the parent directory.",
                  "markdown": "Reports an ES6 import whose `from` part can be shortened. Suggests importing the parent directory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBitwiseExpressionJS",
                "shortDescription": {
                  "text": "Bitwise expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports an expression that includes 'and' with zero, 'or' by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings.",
                  "markdown": "Reports an expression that includes `and` with zero, `or` by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 10,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSStringConcatenationToES6Template",
                "shortDescription": {
                  "text": "String concatenation is used instead of template literal"
                },
                "fullDescription": {
                  "text": "Reports a string concatenation. Suggests replacing it with a template literal Example '\"result: \" + a + \".\"' After applying the quick-fix the code looks as follows: '`result: ${a}.`'",
                  "markdown": "Reports a string concatenation. Suggests replacing it with a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nExample\n\n     \"result: \" + a + \".\" \n\nAfter applying the quick-fix the code looks as follows:\n\n     `result: ${a}.` \n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAssignmentWithOperatorAssignmentJS",
                "shortDescription": {
                  "text": "Assignment could be replaced with operator assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer. Example: 'x = x + 3;'\n  'x = x / 3;'\n After the quick fix is applied the result looks like:   'x += 3;'\n  'x /= 3;'",
                  "markdown": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\n\nExample:\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied the result looks like:\n\n      x += 3;\n      x /= 3;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6DestructuringVariablesMerge",
                "shortDescription": {
                  "text": "Destructuring properties with the same key"
                },
                "fullDescription": {
                  "text": "Reports multiple destructuring properties with identical keys. Suggests merging the properties.",
                  "markdown": "Reports multiple destructuring properties with identical keys. Suggests merging the properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptRedundantGenericType",
                "shortDescription": {
                  "text": "Redundant type arguments"
                },
                "fullDescription": {
                  "text": "Reports a type argument that is equal to the default one and can be removed. Example: type Foo<T=number> = T;\nlet z: Foo<number>;",
                  "markdown": "Reports a type argument that is equal to the default one and can be removed.\n\n\nExample:\n\n```\ntype Foo<T=number> = T;\nlet z: Foo<number>;\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInObjectLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in object literal"
                },
                "fullDescription": {
                  "text": "Reports usages of a trailing comma in object literals. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Trailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation.",
                  "markdown": "Reports usages of a trailing comma in object literals.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedAssignmentJS",
                "shortDescription": {
                  "text": "Nested assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression nested inside another expression, for example, 'a = b = 1'. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.",
                  "markdown": "Reports an assignment expression nested inside another expression, for example, `a = b = 1`. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultNotLastCaseInSwitchJS",
                "shortDescription": {
                  "text": "'default' not last case in 'switch'"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where the 'default' case comes before another case instead of being the very last case, which may cause confusion.",
                  "markdown": "Reports a `switch` statement where the `default` case comes before another case instead of being the very last case, which may cause confusion."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyFinallyBlockJS",
                "shortDescription": {
                  "text": "Empty 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'finally' block, which usually indicates an error.",
                  "markdown": "Reports an empty `finally` block, which usually indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopThatDoesntUseLoopVariableJS",
                "shortDescription": {
                  "text": "'for' loop where update or condition does not use loop variable"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop where the condition or update does not use the 'for' loop variable.",
                  "markdown": "Reports a `for` loop where the condition or update does not use the `for` loop variable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                "shortDescription": {
                  "text": "Abstract class constructor can be made protected"
                },
                "fullDescription": {
                  "text": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).",
                  "markdown": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreeNegationsPerFunctionJS",
                "shortDescription": {
                  "text": "Function with more than three negations"
                },
                "fullDescription": {
                  "text": "Reports a function with three or more negation operations ('!' or '!='). Such functions may be unnecessarily confusing.",
                  "markdown": "Reports a function with three or more negation operations (`!` or `!=`). Such functions may be unnecessarily confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialIfJS",
                "shortDescription": {
                  "text": "Redundant 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement that can be simplified to a single assignment or a 'return' statement. Example: 'if(foo())\n {\n  return true;\n }\n else\n {\n   return false;\n }' After applying the quick-fix the code looks as follows:  'return foo();'",
                  "markdown": "Reports an `if` statement that can be simplified to a single assignment or a `return` statement.\n\nExample:\n\n\n    if(foo())\n     {\n      return true;\n     }\n     else\n     {\n       return false;\n     }\n\nAfter applying the quick-fix the code looks as follows:\n\n     return foo();\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnterminatedStatementJS",
                "shortDescription": {
                  "text": "Unterminated statement"
                },
                "fullDescription": {
                  "text": "Reports a statement without a semicolon or a newline at the end. Select the 'Terminate statements with semicolons' option in Editor | Code Style | JavaScript or TypeScript - Punctuation to report any statement that doesn't end with a semicolon, even if a newline is used. According to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.",
                  "markdown": "Reports a statement without a semicolon or a newline at the end.\n\nSelect the 'Terminate statements with semicolons' option in *Editor \\| Code Style \\| JavaScript or TypeScript - Punctuation* to report any statement that doesn't end with a semicolon, even if a newline is used.\nAccording to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnreachableSwitchBranches",
                "shortDescription": {
                  "text": "Unreachable 'case' branch of a 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports an unreachable 'case' branch of a 'switch' statement. Example: '/**\n * @param {('foo' | 'bar')} p\n */\nfunction foo(p) {\n    switch (p) {\n        case 'foo': break;\n        case 'bar': break;\n        case 'baz': break; // unreachable\n    }\n}'",
                  "markdown": "Reports an unreachable `case` branch of a `switch` statement.\n\nExample:\n\n\n    /**\n     * @param {('foo' | 'bar')} p\n     */\n    function foo(p) {\n        switch (p) {\n            case 'foo': break;\n            case 'bar': break;\n            case 'baz': break; // unreachable\n        }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialConditionalJS",
                "shortDescription": {
                  "text": "Redundant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression of the form 'condition ? true : false\ncondition ? false : true' These expressions may be safely converted to 'condition\n!condition'",
                  "markdown": "Reports a conditional expression of the form\n\n\n    condition ? true : false\n    condition ? false : true\n\n\nThese expressions may be safely converted to\n\n\n    condition\n    !condition\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTestFailedLine",
                "shortDescription": {
                  "text": "Highlight failure line in test code"
                },
                "fullDescription": {
                  "text": "Reports a failed method call or an assertion in a test.",
                  "markdown": "Reports a failed method call or an assertion in a test."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 70,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithTooManyBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with too many branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction. Use the field below to specify the maximum number of branches expected.",
                  "markdown": "Reports an `if` statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction.\n\n\nUse the field below to specify the maximum number of branches expected."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementJS",
                "shortDescription": {
                  "text": "'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'break' statements. Ignores 'break' statements that end case blocks.",
                  "markdown": "Reports a `break` statements. Ignores `break` statements that end case blocks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DebuggerStatementJS",
                "shortDescription": {
                  "text": "'debugger' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'debugger' statement used for interaction with the Javascript debuggers. Such statements should not appear in production code.",
                  "markdown": "Reports a `debugger` statement used for interaction with the Javascript debuggers. Such statements should not appear in production code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToForLoopParameterJS",
                "shortDescription": {
                  "text": "Assignment to 'for' loop parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a variable declared as a 'for' loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.",
                  "markdown": "Reports an assignment to a variable declared as a `for` loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 54,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionJS",
                "shortDescription": {
                  "text": "Conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit 'if' statements.",
                  "markdown": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit `if` statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBooleanExpressionJS",
                "shortDescription": {
                  "text": "Pointless statement or boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a pointless or pointlessly complicated boolean expression or statement. Example: 'let a = !(false && x);\n  let b = false || x;' After the quick fix is applied the result looks like: 'let a = true;\n  let b = x;'",
                  "markdown": "Reports a pointless or pointlessly complicated boolean expression or statement.\n\nExample:\n\n\n      let a = !(false && x);\n      let b = false || x;\n\nAfter the quick fix is applied the result looks like:\n\n\n      let a = true;\n      let b = x;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUrlImportUsage",
                "shortDescription": {
                  "text": "URL import is used"
                },
                "fullDescription": {
                  "text": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation. URLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.",
                  "markdown": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation.   \n\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnContinueStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement whose labels may be removed without changing the flow of control.",
                  "markdown": "Reports a labeled `continue` statement whose labels may be removed without changing the flow of control."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                "shortDescription": {
                  "text": "Possibly incorrect target of indexed property access"
                },
                "fullDescription": {
                  "text": "Reports a potentially invalid indexed property access, for example, 'Array[1]'.",
                  "markdown": "Reports a potentially invalid indexed property access, for example, `Array[1]`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTypeOfValues",
                "shortDescription": {
                  "text": "'typeof' comparison with non-standard value"
                },
                "fullDescription": {
                  "text": "Reports a comparison of a 'typeof' expression with a literal string which is not one of the standard types: 'undefined', 'object', 'boolean', 'number', 'string', 'function', or 'symbol'. Such comparisons always return 'false'.",
                  "markdown": "Reports a comparison of a `typeof` expression with a literal string which is not one of the standard types: `undefined`, `object`, `boolean`, `number`, `string`, `function`, or `symbol`. Such comparisons always return `false`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateJSTypes",
                "shortDescription": {
                  "text": "Type mismatch in 'any' type"
                },
                "fullDescription": {
                  "text": "Reports a function call with a parameter, return value, or assigned expression or incorrect type, if the context symbol can be implicitly resolved to the 'any' type. declare var test: any;\ntest.hasOwnProperty(true); //reports 'true'",
                  "markdown": "Reports a function call with a parameter, return value, or assigned expression or incorrect type, if the context symbol can be implicitly resolved to the `any` type.\n\n```\ndeclare var test: any;\ntest.hasOwnProperty(true); //reports 'true'\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XHTMLIncompatabilitiesJS",
                "shortDescription": {
                  "text": "Incompatible XHTML usages"
                },
                "fullDescription": {
                  "text": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include document.body, document.images, document.applets, document.links, document.forms, and document.anchors.",
                  "markdown": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include **document.body** , **document.images** , **document.applets** , **document.links** , **document.forms** , and **document.anchors**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAnnotator",
                "shortDescription": {
                  "text": "ECMAScript specification is not followed"
                },
                "fullDescription": {
                  "text": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters. Generally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.",
                  "markdown": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.   \nGenerally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertToForOf",
                "shortDescription": {
                  "text": "'for..in' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports a usage of a 'for..in' loop on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops, which are introduced in ECMAScript 6, iterate over 'iterable' objects. For arrays, this structure is preferable to 'for..in', because it works only with array values but not with array object's properties.",
                  "markdown": "Reports a usage of a [for..in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops, which are introduced in ECMAScript 6, iterate over `iterable` objects. For arrays, this structure is preferable to `for..in`, because it works only with array values but not with array object's properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThisExpressionReferencesGlobalObjectJS",
                "shortDescription": {
                  "text": "'this' expression which references the global object"
                },
                "fullDescription": {
                  "text": "Reports a 'this' expression outside an object literal or a constructor body. Such 'this' expressions reference the top-level \"global\" JavaScript object, but are mostly useless.",
                  "markdown": "Reports a `this` expression outside an object literal or a constructor body. Such `this` expressions reference the top-level \"global\" JavaScript object, but are mostly useless."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionCallJS",
                "shortDescription": {
                  "text": "Nested function call"
                },
                "fullDescription": {
                  "text": "Reports a function call that is used as an argument in another function call, for example, 'foo(bar())'",
                  "markdown": "Reports a function call that is used as an argument in another function call, for example, `foo(bar())`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing '==' and '!=' with type-safe equality operators '===' and '!=='. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'.",
                  "markdown": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing `==` and `!=` with type-safe equality operators `===` and `!==`.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonStrictModeUsed",
                "shortDescription": {
                  "text": "Non-strict mode used"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file that is not in the 'strict' mode.",
                  "markdown": "Reports a JavaScript file that is not in the `strict` mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptExplicitMemberType",
                "shortDescription": {
                  "text": "Explicit types"
                },
                "fullDescription": {
                  "text": "Reports a type annotation that doesn't match the current code style for explicit types. Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example: 'var pi: number = 3.14' In some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.",
                  "markdown": "Reports a type annotation that doesn't match the current code style for explicit types.\n\n\nType declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\n\n`\nvar pi: number = 3.14\n`\n\nIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicateCaseLabel",
                "shortDescription": {
                  "text": "Duplicate 'case' label"
                },
                "fullDescription": {
                  "text": "Reports a duplicated 'case' label on a 'switch' statement, which normally indicates an error.",
                  "markdown": "Reports a duplicated `case` label on a `switch` statement, which normally indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXDomNesting",
                "shortDescription": {
                  "text": "Invalid DOM element nesting"
                },
                "fullDescription": {
                  "text": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements.",
                  "markdown": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/React",
                      "index": 80,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLocalVariableJS",
                "shortDescription": {
                  "text": "Redundant local variable"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary local variable that does not make a function more comprehensible: a local variable that is immediately returned a local variable that is immediately assigned to another variable and is not used anymore a local variable that always has the same value as another local variable or parameter. Use the checkbox below to have this inspection ignore variables that are immediately returned or thrown. Some coding styles suggest using such variables for clarity and ease of debugging.",
                  "markdown": "Reports an unnecessary local variable that does not make a function more comprehensible:\n\n* a local variable that is immediately returned\n* a local variable that is immediately assigned to another variable and is not used anymore\n* a local variable that always has the same value as another local variable or parameter.\n\n\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 57,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name. The template for a new component can be modified in Editor | File and Code Templates.",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnBreakStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement whose labels may be removed without changing the flow of control.",
                  "markdown": "Reports a labeled `break` statement whose labels may be removed without changing the flow of control."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DivideByZeroJS",
                "shortDescription": {
                  "text": "Division by zero"
                },
                "fullDescription": {
                  "text": "Reports division by zero or a remainder by zero.",
                  "markdown": "Reports division by zero or a remainder by zero."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedEqualityJS",
                "shortDescription": {
                  "text": "Chained equality"
                },
                "fullDescription": {
                  "text": "Reports a chained equality comparison (i.e. 'a==b==c'). Such comparisons are confusing.",
                  "markdown": "Reports a chained equality comparison (i.e. `a==b==c`). Such comparisons are confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRedundantSwitchStatement",
                "shortDescription": {
                  "text": "'switch' statement is redundant and can be replaced"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement with an empty body, or with only one 'case' branch, or with a 'default' branch only.",
                  "markdown": "Reports a `switch` statement with an empty body, or with only one `case` branch, or with a `default` branch only."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BlockStatementJS",
                "shortDescription": {
                  "text": "Unnecessary block statement"
                },
                "fullDescription": {
                  "text": "Reports a block statement that is not used as the body of 'if', 'for', 'while', 'do', 'with', or 'try' statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for 'let' and 'const' variables, but still free-standing block statements may be confusing and result in subtle bugs when used with 'var' variables.",
                  "markdown": "Reports a block statement that is not used as the body of `if`, `for`, `while`, `do`, `with`, or `try` statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for `let` and `const` variables, but still free-standing block statements may be confusing and result in subtle bugs when used with `var` variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TextLabelInSwitchStatementJS",
                "shortDescription": {
                  "text": "Text label in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement inside a 'switch' statement, which often results from a typo. Example: 'switch(x)\n    {\n        case 1:\n        case2:   //typo!\n        case 3:\n            break;\n    }'",
                  "markdown": "Reports a labeled statement inside a `switch` statement, which often results from a typo.\n\nExample:\n\n\n        switch(x)\n        {\n            case 1:\n            case2:   //typo!\n            case 3:\n                break;\n        }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSOctalInteger",
                "shortDescription": {
                  "text": "Octal integer"
                },
                "fullDescription": {
                  "text": "Reports a deprecated octal integer literal prefixed with '0' instead of '0o'. Such literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error. To force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below.",
                  "markdown": "Reports a deprecated octal integer literal prefixed with `0` instead of `0o`.  \nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.  \nTo force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyTryBlockJS",
                "shortDescription": {
                  "text": "Empty 'try' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'try' block, which usually indicates an error.",
                  "markdown": "Reports an empty `try` block, which usually indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSCoverage",
                "shortDescription": {
                  "text": "Code is not covered by Flow"
                },
                "fullDescription": {
                  "text": "Reports JavaScript code fragments that are not covered by the Flow type checker. To use this inspection, configure the Flow executable in Settings | Languages & Frameworks | JavaScript.",
                  "markdown": "Reports JavaScript code fragments that are not covered by the Flow type checker. To use this inspection, configure the Flow executable in [Settings \\| Languages \\& Frameworks \\| JavaScript](settings://Settings.JavaScript)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 8,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIgnoredPromiseFromCall",
                "shortDescription": {
                  "text": "Result of method call returning a promise is ignored"
                },
                "fullDescription": {
                  "text": "Reports a function call that returns a 'Promise' that is not used later. Such calls are usually unintended and indicate an error.",
                  "markdown": "Reports a function call that returns a `Promise` that is not used later. Such calls are usually unintended and indicate an error."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 52,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralBreaksHTMLJS",
                "shortDescription": {
                  "text": "String literal which breaks HTML parsing"
                },
                "fullDescription": {
                  "text": "Reports a string literal that contains a '</' sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded.",
                  "markdown": "Reports a string literal that contains a `</` sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSComparisonWithNaN",
                "shortDescription": {
                  "text": "Comparison with NaN"
                },
                "fullDescription": {
                  "text": "Reports a comparison with NaN. Comparisons like 'expr == NaN' or 'expr === NaN' are always evaluated to 'false'.",
                  "markdown": "Reports a comparison with NaN. Comparisons like `expr == NaN` or `expr === NaN` are always evaluated to `false`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConstructorReturnsPrimitive",
                "shortDescription": {
                  "text": "Constructor returns primitive value"
                },
                "fullDescription": {
                  "text": "Reports a constructor function that returns a primitive value. When called with 'new', this value will be lost and an object will be returned instead. To avoid warnings, use the '@return' tag to specify the return of the function.",
                  "markdown": "Reports a constructor function that returns a primitive value. When called with `new`, this value will be lost and an object will be returned instead. To avoid warnings, use the `@return` tag to specify the return of the function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PlatformDetectionJS",
                "shortDescription": {
                  "text": "Inaccurate platform detection"
                },
                "fullDescription": {
                  "text": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform. Patterns detected include: 'document.all' 'document.layers' 'navigator.userAgent' 'navigator.oscpu' 'navigator.appName' 'navigator.appCodeName' 'navigator.platform'",
                  "markdown": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform.\n\nPatterns detected include:\n\n* `document.all`\n* `document.layers`\n* `navigator.userAgent`\n* `navigator.oscpu`\n* `navigator.appName`\n* `navigator.appCodeName`\n* `navigator.platform`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 31,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptDuplicateUnionOrIntersectionType",
                "shortDescription": {
                  "text": "Duplicate union or intersection type component"
                },
                "fullDescription": {
                  "text": "Reports a duplicate type inside a union or intersection.",
                  "markdown": "Reports a duplicate type inside a union or intersection."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VoidExpressionJS",
                "shortDescription": {
                  "text": "'void' expression"
                },
                "fullDescription": {
                  "text": "Reports a 'void' expression.",
                  "markdown": "Reports a `void` expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSVoidFunctionReturnValueUsed",
                "shortDescription": {
                  "text": "Void function return value used"
                },
                "fullDescription": {
                  "text": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an 'undefined' value and such assignment may indicate an error. Example: 'let a = console.log('foo');' The following usages are ignored: Inside a return statement In some binary operations For overridden non-void functions",
                  "markdown": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an `undefined` value and such assignment may indicate an error.\n\nExample:\n\n\n    let a = console.log('foo');\n\n<br />\n\nThe following usages are ignored:\n\n* Inside a return statement\n* In some binary operations\n* For overridden non-void functions"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'return' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'return' statement inside a 'finally' block. Such 'return' statements may mask exceptions thrown, and complicate debugging.",
                  "markdown": "Reports a `return` statement inside a `finally` block. Such `return` statements may mask exceptions thrown, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 50,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StatementsPerFunctionJS",
                "shortDescription": {
                  "text": "Overly long function"
                },
                "fullDescription": {
                  "text": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test. Use the field below to specify the maximum acceptable number of statements in a function.",
                  "markdown": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test.\n\n\nUse the field below to specify the maximum acceptable number of statements in a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementWithLabelJS",
                "shortDescription": {
                  "text": "'continue' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement.",
                  "markdown": "Reports a labeled `continue` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingConfigOption",
                "shortDescription": {
                  "text": "Missing tsconfig.json option "
                },
                "fullDescription": {
                  "text": "Reports a usage that requires an explicit option in 'tsconfig.json'. For example, to use JSX in '.tsx' files, 'tsconfig.json' must contain '\"jsx\"' property.",
                  "markdown": "Reports a usage that requires an explicit option in `tsconfig.json`. For example, to use JSX in `.tsx` files, `tsconfig.json` must contain `\"jsx\"` property."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ShorthandObjectProperty",
                "shortDescription": {
                  "text": "Property can be replaced with shorthand"
                },
                "fullDescription": {
                  "text": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it. Example: 'var obj = {foo:foo}' After applying the quick-fix the code looks as follows: 'var obj = {foo}'",
                  "markdown": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\nExample:\n\n\n    var obj = {foo:foo}\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    var obj = {foo}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidConstructorUsage",
                "shortDescription": {
                  "text": "Potentially invalid constructor usage"
                },
                "fullDescription": {
                  "text": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after 'new', using a constructor's prototype or calling a constructor without 'new'. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc '@constructor' tag.",
                  "markdown": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after `new`, using a constructor's prototype or calling a constructor without `new`. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc `@constructor` tag."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NodeCoreCodingAssistance",
                "shortDescription": {
                  "text": "Unresolved Node.js APIs"
                },
                "fullDescription": {
                  "text": "Suggests configuring coding assistance for Node.js, for example, 'require' and/or core modules ('path', 'http', 'fs', etc.). See https://nodejs.org/api/ for the complete list.",
                  "markdown": "Suggests configuring coding assistance for Node.js, for example, `require` and/or core modules ('path', 'http', 'fs', etc.).\n\n\nSee <https://nodejs.org/api/> for the complete list."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Node.js",
                      "index": 83,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPrimitiveTypeWrapperUsage",
                "shortDescription": {
                  "text": "Primitive type object wrapper used"
                },
                "fullDescription": {
                  "text": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost.",
                  "markdown": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInArrayLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in array literal"
                },
                "fullDescription": {
                  "text": "Reports a usage of a trailing comma in an array literal. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Although trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation.",
                  "markdown": "Reports a usage of a trailing comma in an array literal.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Negated conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: '!condition ? 2 : 1'",
                  "markdown": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: `!condition ? 2 : 1`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LabeledStatementJS",
                "shortDescription": {
                  "text": "Labeled statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement.",
                  "markdown": "Reports a labeled statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithStatementJS",
                "shortDescription": {
                  "text": "'with' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'with' statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables.",
                  "markdown": "Reports a `with` statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 23,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConstantReassignment",
                "shortDescription": {
                  "text": "Attempt to assign to const or readonly variable"
                },
                "fullDescription": {
                  "text": "Reports reassigning a value to a constant or a readonly variable.",
                  "markdown": "Reports reassigning a value to a constant or a readonly variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 15,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MagicNumberJS",
                "shortDescription": {
                  "text": "Magic number"
                },
                "fullDescription": {
                  "text": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored.",
                  "markdown": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptLibrary",
                "shortDescription": {
                  "text": "Missing global library"
                },
                "fullDescription": {
                  "text": "Reports a TypeScript library file that is required for a symbol but is not listed under the 'lib' compiler option in 'tsconfig.json'.",
                  "markdown": "Reports a TypeScript library file that is required for a symbol but is not listed under the `lib` compiler option in `tsconfig.json`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingAugmentationImport",
                "shortDescription": {
                  "text": "Missing augmentation import"
                },
                "fullDescription": {
                  "text": "Reports a usage from augmentation module without an explicit import.",
                  "markdown": "Reports a usage from [augmentation module](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) without an explicit import."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Eslint",
                "shortDescription": {
                  "text": "ESLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the ESLint linter. The highlighting is based on the rule severity specified in the ESLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules.",
                  "markdown": "Reports a discrepancy detected by the [ESLint](https://eslint.org) linter.   \n\nThe highlighting is based on the rule severity specified in the [ESLint configuration file](https://eslint.org/docs/user-guide/configuring) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion.TS",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing '==' or '!=' equality operators with type-safe '===' or '!==' operators. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'.",
                  "markdown": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing `==` or `!=` equality operators with type-safe `===` or `!==` operators.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageJsonMismatchedDependency",
                "shortDescription": {
                  "text": "Mismatched dependencies in package.json"
                },
                "fullDescription": {
                  "text": "Reports a dependency from package.json that is not installed or doesn't match the specified version range.",
                  "markdown": "Reports a dependency from package.json that is not installed or doesn't match the specified [version range](https://docs.npmjs.com/about-semantic-versioning)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 60,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteLoopJS",
                "shortDescription": {
                  "text": "Infinite loop statement"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement which can only exit by throwing an exception. Such statements often indicate coding errors.",
                  "markdown": "Reports a `for`, `while`, or `do` statement which can only exit by throwing an exception. Such statements often indicate coding errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 46,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSArrowFunctionBracesCanBeRemoved",
                "shortDescription": {
                  "text": "Redundant braces around arrow function body"
                },
                "fullDescription": {
                  "text": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces. 'let incrementer = (x) => {return x + 1};' After the quick-fix is applied, the code fragment looks as follows: 'let incrementer = (x) => x + 1;'",
                  "markdown": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces.\n\n\n`\nlet incrementer = (x) => {return x + 1};\n`\n\nAfter the quick-fix is applied, the code fragment looks as follows:\n\n\n`\nlet incrementer = (x) => x + 1;\n`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClassNamingConvention",
                "shortDescription": {
                  "text": "Class naming convention"
                },
                "fullDescription": {
                  "text": "Reports a class or a function that is annotated with a JSDoc '@constructor' or '@class' tag whose names are too short, too long, or do not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for classes names. Use the standard 'java.util.regex' format for regular expressions.",
                  "markdown": "Reports a class or a function that is annotated with a JSDoc `@constructor` or `@class` tag whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for classes names. Use the standard `java.util.regex` format for regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndefinedPropertyAssignment",
                "shortDescription": {
                  "text": "Undefined property assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a property that is not defined in the type of a variable. Example: '/**\n * @type {{ property1: string, property2: number }}\n */\nlet myVariable = create();\n\nmyVariable.newProperty = 3; // bad'",
                  "markdown": "Reports an assignment to a property that is not defined in the type of a variable.\n\nExample:\n\n\n    /**\n     * @type {{ property1: string, property2: number }}\n     */\n    let myVariable = create();\n\n    myVariable.newProperty = 3; // bad\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeprecatedSymbols",
                "shortDescription": {
                  "text": "Deprecated symbol used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a deprecated function variable.",
                  "markdown": "Reports a usage of a deprecated function variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableNamingConventionJS",
                "shortDescription": {
                  "text": "Local variable naming convention"
                },
                "fullDescription": {
                  "text": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions.",
                  "markdown": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 53,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedExtXType",
                "shortDescription": {
                  "text": "Unresolved Ext JS xtype"
                },
                "fullDescription": {
                  "text": "Reports an Ext JS 'xtype' reference that doesn't have a corresponding class.",
                  "markdown": "Reports an Ext JS `xtype` reference that doesn't have a corresponding class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantNestingInTemplateLiteral",
                "shortDescription": {
                  "text": "Redundant nesting in template literal"
                },
                "fullDescription": {
                  "text": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string. Example: 'let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`' After applying the quick-fix the code looks as follows: 'let a = `Hello, Brave New World!`'",
                  "markdown": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\nExample:\n\n\n    let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    let a = `Hello, Brave New World!`\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestingDepthJS",
                "shortDescription": {
                  "text": "Overly nested function"
                },
                "fullDescription": {
                  "text": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary. Use the field provided below to specify the maximum acceptable nesting depth allowed in a function.",
                  "markdown": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary.\n\n\nUse the field provided below to specify the maximum acceptable nesting depth allowed in a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 40,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSuspiciousConstructorParameterAssignment",
                "shortDescription": {
                  "text": "Assigned constructor field parameter"
                },
                "fullDescription": {
                  "text": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned. In this case, the corresponding field won't be assigned, only the local parameter value is modified. class Foo {\n  constructor(private p: number) {\n    p = 1; //must be this.p = 1;\n  }\n}",
                  "markdown": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.  \nIn this case, the corresponding field *won't* be assigned, only the local parameter value is modified.\n\n```\nclass Foo {\n  constructor(private p: number) {\n    p = 1; //must be this.p = 1;\n  }\n}\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 32,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedSwitchStatementJS",
                "shortDescription": {
                  "text": "Nested 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement that is nested in another 'switch' statement. Nested 'switch' statements may be very confusing, particularly if indenting is inconsistent.",
                  "markdown": "Reports a `switch` statement that is nested in another `switch` statement. Nested `switch` statements may be very confusing, particularly if indenting is inconsistent."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchBranches",
                "shortDescription": {
                  "text": "'switch' statement has missing branches"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement on a variable of the type 'enum' or 'union' when the statement doesn't cover some value options from the type.",
                  "markdown": "Reports a `switch` statement on a variable of the type `enum` or `union` when the statement doesn't cover some value options from the type."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 55,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJQueryEfficiency",
                "shortDescription": {
                  "text": "JQuery selector can be optimized"
                },
                "fullDescription": {
                  "text": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).",
                  "markdown": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableCodeJS",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code that can never be executed, which almost certainly indicates an error",
                  "markdown": "Reports code that can never be executed, which almost certainly indicates an error"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 37,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatementBodyJS",
                "shortDescription": {
                  "text": "Statement with empty body"
                },
                "fullDescription": {
                  "text": "Reports an 'if', 'while', 'for', or 'with' statement with an empty body. Such statements often result from typos, and may cause confusion. Use the checkbox below to specify whether the statements with empty block statements as bodies should be reported.",
                  "markdown": "Reports an `if`, `while`, `for`, or `with` statement with an empty body. Such statements often result from typos, and may cause confusion.\n\n\nUse the checkbox below to specify whether the statements with empty block statements as bodies\nshould be reported."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 36,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedLocalSymbols",
                "shortDescription": {
                  "text": "Unused local symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration.",
                  "markdown": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 63,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.editorconfig.editorconfigjetbrains",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "EditorConfigNumerousWildcards",
                "shortDescription": {
                  "text": "Too many wildcards"
                },
                "fullDescription": {
                  "text": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues.",
                  "markdown": "Reports sections that contain too many wildcards. Using a lot of wildcards may lead to performance issues."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigKeyCorrectness",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not supported by the IDE. Note: some “ij” domain properties may require specific language plugins.",
                  "markdown": "Reports properties that are not supported by the IDE. Note: some \"ij\" domain properties may require specific language plugins."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEncoding",
                "shortDescription": {
                  "text": "File encoding doesn't match EditorConfig charset"
                },
                "fullDescription": {
                  "text": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file.",
                  "markdown": "Checks that current file encoding matches the encoding defined in \"charset\" property of .editorconfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptyHeader",
                "shortDescription": {
                  "text": "Empty header"
                },
                "fullDescription": {
                  "text": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by 'gitignore'.",
                  "markdown": "Reports sections with an empty header. Section header must contain file path globs in the format similar to one supported by `gitignore`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigSpaceInHeader",
                "shortDescription": {
                  "text": "Space in file pattern"
                },
                "fullDescription": {
                  "text": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed.",
                  "markdown": "Reports space characters in wildcard patterns that affect pattern matching. If these characters are not intentional, they should be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigOptionRedundancy",
                "shortDescription": {
                  "text": "Redundant property"
                },
                "fullDescription": {
                  "text": "Reports properties that are redundant when another applicable section already contains the same property and value. For example: '[*]\nindent_size=4\n[*.java]\nindent_size=4' are both applicable to '*.java' files and define the same 'indent_size' value.",
                  "markdown": "Reports properties that are redundant when another applicable section already contains the same property and value.\n\n\nFor example:\n\n\n    [*]\n    indent_size=4\n    [*.java]\n    indent_size=4\n\nare both applicable to `*.java` files and define the same `indent_size` value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigWildcardRedundancy",
                "shortDescription": {
                  "text": "Redundant wildcard"
                },
                "fullDescription": {
                  "text": "Reports wildcards that become redundant when the “**” wildcard is used in the same section. The “**” wildcard defines a broader set of files than any other wildcard. That is why, any other wildcard used in the same section has no affect and can be removed.",
                  "markdown": "Reports wildcards that become redundant when the \"\\*\\*\" wildcard is used in the same section.\n\n\nThe \"\\*\\*\" wildcard defines a broader set of files than any other wildcard.\nThat is why, any other wildcard used in the same section has no affect and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused declaration"
                },
                "fullDescription": {
                  "text": "Reports unused declarations. Such declarations can be removed.",
                  "markdown": "Reports unused declarations. Such declarations can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationUniqueness",
                "shortDescription": {
                  "text": "Extra top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple top-level declarations. There can be only one optional “root=true” top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed.",
                  "markdown": "Reports multiple top-level declarations. There can be only one optional \"root=true\" top-level declaration in the EditorConfig file. Using multiple top-level declarations is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowedOption",
                "shortDescription": {
                  "text": "Overridden property"
                },
                "fullDescription": {
                  "text": "Reports properties that are already defined in other sections. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes all '*.java' files too but it also redefines indent_size. As a result the value 2 will be used for files matching '*.java'.",
                  "markdown": "Reports properties that are already defined in other sections.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes all `*.java` files too but it also redefines indent_size. As a result the value 2 will be used for files matching `*.java`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueUniqueness",
                "shortDescription": {
                  "text": "Non-unique list value"
                },
                "fullDescription": {
                  "text": "Reports duplicates in lists of values.",
                  "markdown": "Reports duplicates in lists of values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigUnexpectedComma",
                "shortDescription": {
                  "text": "Unexpected comma"
                },
                "fullDescription": {
                  "text": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists.",
                  "markdown": "Reports commas that cannot be used in the current context. Commas are allowed only as separators for values in lists."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigShadowingOption",
                "shortDescription": {
                  "text": "Overriding property"
                },
                "fullDescription": {
                  "text": "Reports properties that override the same properties defined earlier in the file. For example: '[*.java]\nindent_size=4\n[{*.java,*.js}]\nindent_size=2' The second section includes the same files as '[*.java]' but also sets indent_size to value 2. Thus the first declaration 'indent_size=4'will be ignored.",
                  "markdown": "Reports properties that override the same properties defined earlier in the file.\n\nFor example:\n\n\n    [*.java]\n    indent_size=4\n    [{*.java,*.js}]\n    indent_size=2\n\nThe second section includes the same files as `[*.java]` but also sets indent_size to value 2. Thus the first declaration `indent_size=4`will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigReferenceCorrectness",
                "shortDescription": {
                  "text": "Invalid reference"
                },
                "fullDescription": {
                  "text": "Reports identifiers that are either unknown or have a wrong type.",
                  "markdown": "Reports identifiers that are either unknown or have a wrong type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassLetterRedundancy",
                "shortDescription": {
                  "text": "Duplicate character class letter"
                },
                "fullDescription": {
                  "text": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example '[aa]'.",
                  "markdown": "Reports wildcard patterns in the EditorConfig section that contain a duplicate character in the character class, for example `[aa]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigMissingRequiredDeclaration",
                "shortDescription": {
                  "text": "Required declarations are missing"
                },
                "fullDescription": {
                  "text": "Reports properties that miss the required declarations. Refer to the documentation for more information.",
                  "markdown": "Reports properties that miss the required declarations. Refer to the documentation for more information."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPartialOverride",
                "shortDescription": {
                  "text": "Overlapping sections"
                },
                "fullDescription": {
                  "text": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: '[{foo,bar}]' and '[{foo,bas}]' both contain “foo”.",
                  "markdown": "Reports subsets of files specified in the current section that overlap with other subsets in other sections. For example: `[{foo,bar}]` and `[{foo,bas}]` both contain \"foo\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigListAcceptability",
                "shortDescription": {
                  "text": "Unexpected value list"
                },
                "fullDescription": {
                  "text": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified.",
                  "markdown": "Reports lists of values that are used in properties in which lists are not supported. In this case, only a single value can be specified."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternEnumerationRedundancy",
                "shortDescription": {
                  "text": "Unnecessary braces"
                },
                "fullDescription": {
                  "text": "Reports pattern lists that are either empty '{}' or contain just one pattern, for example '{foo}' in contrast to a list containing multiple patterns, for example '{foo,bar}'. In this case braces are handled as a part of the name. For example, the pattern '*.{a}' will match the file 'my.{a}' but not 'my.a'.",
                  "markdown": "Reports pattern lists that are either empty `{}` or contain just one pattern, for example `{foo}` in contrast to a list containing multiple patterns, for example `{foo,bar}`. In this case braces are handled as a part of the name. For example, the pattern `*.{a}` will match the file `my.{a}` but not `my.a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPairAcceptability",
                "shortDescription": {
                  "text": "Unexpected key-value pair"
                },
                "fullDescription": {
                  "text": "Reports key-value pairs that are not allowed in the current context.",
                  "markdown": "Reports key-value pairs that are not allowed in the current context."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigNoMatchingFiles",
                "shortDescription": {
                  "text": "No matching files"
                },
                "fullDescription": {
                  "text": "Reports sections with wildcard patterns that do not match any files under the directory in which the '.editorconfig' file is located.",
                  "markdown": "Reports sections with wildcard patterns that do not match any files under the directory in which the `.editorconfig` file is located."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigHeaderUniqueness",
                "shortDescription": {
                  "text": "EditorConfig section is not unique"
                },
                "fullDescription": {
                  "text": "Reports sections that define the same file pattern as other sections.",
                  "markdown": "Reports sections that define the same file pattern as other sections."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigValueCorrectness",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports property values that do not meet value restrictions. For example, some properties may be only “true” or “false”, others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them.",
                  "markdown": "Reports property values that do not meet value restrictions. For example, some properties may be only \"true\" or \"false\", others contain only integer numbers etc. If a value has a limited set of variants, use code completion to see all of them."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigRootDeclarationCorrectness",
                "shortDescription": {
                  "text": "Unexpected top-level declaration"
                },
                "fullDescription": {
                  "text": "Reports unexpected top-level declarations. Top-level declarations other than “root=true” are not allowed in the EditorConfig file.",
                  "markdown": "Reports unexpected top-level declarations. Top-level declarations other than \"root=true\" are not allowed in the EditorConfig file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigPatternRedundancy",
                "shortDescription": {
                  "text": "Duplicate or redundant pattern"
                },
                "fullDescription": {
                  "text": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in '[{*.java,*}]' the first '*.java' pattern defines a narrower scope compared to '*'. That is why it is redundant and can be removed.",
                  "markdown": "Reports file patterns that are redundant as there already are other patterns that define the same scope of files or even a broader one. For example, in `[{*.java,*}]` the first `*.java` pattern defines a narrower scope compared to `*`. That is why it is redundant and can be removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigDeprecatedDescriptor",
                "shortDescription": {
                  "text": "Deprecated property"
                },
                "fullDescription": {
                  "text": "Reports EditorConfig properties that are no longer supported.",
                  "markdown": "Reports EditorConfig properties that are no longer supported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigCharClassRedundancy",
                "shortDescription": {
                  "text": "Unnecessary character class"
                },
                "fullDescription": {
                  "text": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example '[a]'→'a'.",
                  "markdown": "Reports character classes that consist of a single character. Such classes can be simplified to a character, for example `[a]`→`a`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EditorConfigEmptySection",
                "shortDescription": {
                  "text": "Empty section"
                },
                "fullDescription": {
                  "text": "Reports sections that do not contain any EditorConfig properties.",
                  "markdown": "Reports sections that do not contain any EditorConfig properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "EditorConfig",
                      "index": 13,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.database",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "SqlMissingReturnInspection",
                "shortDescription": {
                  "text": "Missing return statement"
                },
                "fullDescription": {
                  "text": "Reports functions that have no RETURN statements. Example (Oracle): 'CREATE FUNCTION foo RETURN int AS\nBEGIN\nEND;' The 'foo' function must return the integer value but the function body returns nothing. To fix the error, add a RETURN statement (for example, 'return 1;'). 'CREATE FUNCTION foo RETURN int AS\nBEGIN\n RETURN 1;\nEND;'",
                  "markdown": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsIfInspection",
                "shortDescription": {
                  "text": "Using CASE instead of conditional function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and IF are interchangeable. Example (MySQL): 'SELECT CASE\nWHEN C1 IS NULL THEN 1\nELSE 0\nEND\nFROM dual;' To keep your code short, you can replace the CASE structure with IF. You can do that by applying the Replace with 'IF' call intention action. The example code will look as follows: 'SELECT IF(C1 IS NULL, 1, 0)\nFROM dual;' To revert IF to CASE, click IF and apply the Replace with CASE expression intention action.",
                  "markdown": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShouldBeInGroupByInspection",
                "shortDescription": {
                  "text": "Column should be in group by clause"
                },
                "fullDescription": {
                  "text": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call. Example (Microsoft SQL Server): 'CREATE TABLE t1 (a INT, b INT);\nSELECT a, b FROM t1 GROUP BY a;' If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the 'b' column in GROUP BY or used inside an aggregate function. The following two examples will fix the error. 'SELECT a, b FROM t1 GROUP BY a, b;\nSELECT a, max(b) max_b FROM t1 GROUP BY a;'",
                  "markdown": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMisleadingReferenceInspection",
                "shortDescription": {
                  "text": "Misleading references"
                },
                "fullDescription": {
                  "text": "Reports ambiguous references in SQL code. For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority. Example (PostgreSQL): 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\nDECLARE\n    b INT;\nBEGIN\n      -- `name` is ambiguous as it is used as a column name and a parameter\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;' In PostgreSQL, you can use the '#variable_conflict' directives to explicitly specify a correct reference. For example, use '#variable_conflict use_column' to refer to a column name, or '#variable_conflict use_variable' to refer to a parameter. 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\n    #variable_conflict use_column\nDECLARE\n    b INT;\nBEGIN\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;'",
                  "markdown": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantAliasInspection",
                "shortDescription": {
                  "text": "Redundant alias expressions"
                },
                "fullDescription": {
                  "text": "Reports alias expressions that duplicate names of columns in tables and might be redundant. Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT * FROM foo foo(a, b);\nSELECT * FROM foo foo(a);\nSELECT * FROM foo foo(x);\nSELECT * FROM foo foo(x, y);' The first two aliases use the same column names as in the 'foo' table. They are considered redundant because they column names are identical.",
                  "markdown": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedCteInspection",
                "shortDescription": {
                  "text": "Unused common table expression"
                },
                "fullDescription": {
                  "text": "Reports unused common table expressions (CTE) inside the query. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nWITH a AS (SELECT 1 AS x FROM foo)\nSELECT 1 + 2 FROM foo;' By using WITH, we create a temporary named result set with the name 'a', also known as a common table expression (CTE). But we do not use this CTE later in the code. The unused CTE is greyed out.",
                  "markdown": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code. Example: 'db\nuse foo\n  -- a reference to a non-existing collection\ndb.non_existing_collection\ndb['non_existing_collection']\ndb['non_existing_collection'].find().hasNext()' The 'non_existing_collection' collection does not exist in the database and will be reported.",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code.\n\nExample:\n\n    db\n    use foo\n      -- a reference to a non-existing collection\n    db.non_existing_collection\n    db['non_existing_collection']\n    db['non_existing_collection'].find().hasNext()\n\nThe `non_existing_collection` collection does not exist in the database and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDialectInspection",
                "shortDescription": {
                  "text": "SQL dialect detection"
                },
                "fullDescription": {
                  "text": "Reports situations when a dialect is not assigned to an SQL file. For example, when you open a new SQL file without assigning a dialect to it, you see a notification where the best matching dialect is advised. Click the Use <dialect> link to use the advised dialect. Alternatively, click the Change dialect to link to select the other dialect.",
                  "markdown": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()'",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n\n      db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n\n      db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()'",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n    db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsBuiltinInspection",
                "shortDescription": {
                  "text": "Builtin functions"
                },
                "fullDescription": {
                  "text": "Reports truncations of string arguments in ISNULL functions. The ISNULL syntax is 'ISNULL(check_expression, replacement_value)'. According to ISNULL at docs.microsoft.com, 'replacement_value' will be truncated if 'replacement_value' is longer than 'check_expression'. Example (Microsoft SQL Server): 'DECLARE @name1 VARCHAR(2) = NULL;\nDECLARE @name2 VARCHAR(10) = 'Example';\nDECLARE @name3 VARCHAR(2) = 'Hi';\n\n  -- `@name2` is VARCHAR(10) and will be truncated\nSELECT ISNULL(@name1, @name2);\n\n  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\nSELECT ISNULL(@name1, @name3);'",
                  "markdown": "Reports truncations of string arguments in ISNULL functions.\n\nThe ISNULL syntax is `ISNULL(check_expression, replacement_value)`.\n\nAccording to [ISNULL at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql), `replacement_value` will be truncated if `replacement_value` is longer than\n`check_expression`.\n\nExample (Microsoft SQL Server):\n\n    DECLARE @name1 VARCHAR(2) = NULL;\n    DECLARE @name2 VARCHAR(10) = 'Example';\n    DECLARE @name3 VARCHAR(2) = 'Hi';\n\n      -- `@name2` is VARCHAR(10) and will be truncated\n    SELECT ISNULL(@name1, @name2);\n\n      -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\n    SELECT ISNULL(@name1, @name3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMultipleLimitClausesInspection",
                "shortDescription": {
                  "text": "Multiple row limiting/offset clauses in queries"
                },
                "fullDescription": {
                  "text": "Reports usages of multiple row limiting clauses in a single query. Example (Microsoft SQL Server): 'create table foo(a int);\nselect top 1 * from foo order by a offset 10 rows fetch next 20 rows only;' The SELECT TOP clause is used to specify that only 1 record must be returned. The FETCH clause specifies the number of rows to return after the OFFSET clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.",
                  "markdown": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAmbiguousColumnInspection",
                "shortDescription": {
                  "text": "Ambiguous reference"
                },
                "fullDescription": {
                  "text": "Reports columns that have identical names but belong to different tables. Example (MySQL): 'CREATE TABLE foo(id INT PRIMARY KEY);\nCREATE TABLE bar(id INT PRIMARY KEY);\n\nSELECT foo.id, bar.id FROM foo, bar WHERE id > 0;' The 'id' column appears in 'foo' and 'bar' tables. You need to qualify the column name to make the query correct. 'SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;'",
                  "markdown": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNullComparisonInspection",
                "shortDescription": {
                  "text": "Null comparison"
                },
                "fullDescription": {
                  "text": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators. Example (Microsoft SQL Server): 'CREATE TABLE foo ( id int );\n\nSELECT * FROM foo WHERE NULL = NULL;\nSELECT * FROM foo WHERE NULL != NULL;' The 'NULL = NULL' can be replaced with 'IS NULL', the 'NULL != NULL' comparison with 'IS NOT NULL'. To do this replacement, you can use Use IS NULL operator or Use IS NOT NULL operator quick-fixes. 'SELECT * FROM foo WHERE NULL IS NULL;\nSELECT * FROM foo WHERE NULL IS NOT NULL;'",
                  "markdown": "Reports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo ( id int );\n\n    SELECT * FROM foo WHERE NULL = NULL;\n    SELECT * FROM foo WHERE NULL != NULL;\n\nThe `NULL = NULL` can be replaced with `IS NULL`, the `NULL != NULL` comparison\nwith `IS NOT NULL`. To do this replacement, you can use **Use IS NULL operator** or **Use IS NOT NULL operator**\nquick-fixes.\n\n    SELECT * FROM foo WHERE NULL IS NULL;\n    SELECT * FROM foo WHERE NULL IS NOT NULL;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertValuesInspection",
                "shortDescription": {
                  "text": "VALUES clause cardinality"
                },
                "fullDescription": {
                  "text": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\n\nINSERT INTO foo VALUES (1,2,3,4)' The 'foo' table has three columns but in the INSERT INTO statement we pass four.",
                  "markdown": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantElseNullInspection",
                "shortDescription": {
                  "text": "Redundant ELSE NULL clause"
                },
                "fullDescription": {
                  "text": "Reports redundant ELSE NULL clauses. Example (MySQL): 'SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;' The 'ELSE NULL' part will never be executed and may be omitted.",
                  "markdown": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCurrentSchemaInspection",
                "shortDescription": {
                  "text": "Current console schema introspected"
                },
                "fullDescription": {
                  "text": "Reports schemas and databases in the current session that are not introspected. For example, this warning might occur when you try to create a table in the schema that is not introspected. Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is inspected to detect tables, columns, functions, and other elements with their attributes.",
                  "markdown": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertNullIntoNotNullInspection",
                "shortDescription": {
                  "text": "Insert NULL into NOT NULL column"
                },
                "fullDescription": {
                  "text": "Reports cases when you insert NULL values into columns that accept only NOT NULL values. Example (Microsoft SQL Server): 'CREATE TABLE br2 (\nid INT NOT NULL,\ncol1 NVARCHAR (20) NOT NULL,\ncol2 NVARCHAR (20) NOT NULL,\n);\n--\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, NULL, NULL);' You cannot insert NULL values in 'col1' and 'col2' because they are defined as NOT NULL. If you run the script as is, you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, '42' and ''bird''). INSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');",
                  "markdown": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTriggerTransitionInspection",
                "shortDescription": {
                  "text": "Suspicious code in triggers"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of transition table variables in triggers. Example (HSQLDB): 'CREATE TABLE foo(a INT);\n\nCREATE TRIGGER trg\n AFTER DELETE ON foo\nBEGIN\n   SELECT * FROM NEW;\nEND;\n\nCREATE TRIGGER trig AFTER INSERT ON foo\n   REFERENCING OLD ROW AS newrow\n   FOR EACH ROW WHEN (a > 1)\n   INSERT INTO foo VALUES (1)' In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous example, NEW in 'SELECT * FROM NEW;' will be highlighted as well as OLD in 'REFERENCING OLD ROW AS newrow'.",
                  "markdown": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNamedArgumentsInspection",
                "shortDescription": {
                  "text": "Named arguments should be used"
                },
                "fullDescription": {
                  "text": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled. For more information about the difference between named and unnamed parameters, see Binding Parameters by Name (Named Parameters) at docs.microsoft.com . Example (Microsoft SQL Server): 'CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\nBEGIN\n    RETURN n + m;\nEND;\n\nCREATE PROCEDURE test AS\nBEGIN\n    foo n = 1, m = 2;\n\n--- The following call misses parameter names and will be highlighted\n    foo 1, 2;\nEND;' Parameters '1, 2' in the 'foo 1, 2;' call are highlighted because they miss names.",
                  "markdown": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTransactionStatementInTriggerInspection",
                "shortDescription": {
                  "text": "Use of transaction management statements in triggers"
                },
                "fullDescription": {
                  "text": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies. With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile. The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As COMMIT terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception. Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger. Example (Oracle): 'CREATE TABLE employee_audit\n(\n    id          INT  NOT NULL,\n    update_date DATE NOT NULL,\n    old_name    VARCHAR2(100),\n    new_name    VARCHAR2(100)\n);\n\nCREATE TABLE employees\n(\n    id   INT           NOT NULL,\n    name VARCHAR2(100) NOT NULL\n);\n\nCREATE OR REPLACE TRIGGER trig_commit\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    COMMIT;\nEND;\n\nCREATE OR REPLACE TRIGGER trig_rollback\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    ROLLBACK;\nEND;'",
                  "markdown": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraMissingBodyInspection",
                "shortDescription": {
                  "text": "Missing body for package/object type specification"
                },
                "fullDescription": {
                  "text": "Reports package and object type specifications that are missing body declarations. Package specifications and object types that declare routines as well as package specifications with cursors must have body declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are invoked in program code. Example (Oracle): 'CREATE OR REPLACE PACKAGE ppp IS\n    FUNCTION foo(a INT) RETURN INT;\nEND;'",
                  "markdown": "Reports package and object type specifications that are missing body declarations.\n\nPackage specifications and object types that declare routines as well as package specifications with cursors must have body\ndeclarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\ninvoked in program code.\n\nExample (Oracle):\n\n    CREATE OR REPLACE PACKAGE ppp IS\n        FUNCTION foo(a INT) RETURN INT;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 65,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCheckUsingColumnsInspection",
                "shortDescription": {
                  "text": "Check using clause columns"
                },
                "fullDescription": {
                  "text": "Reports columns in the USING clause that does not exist in both tables. Example (MySQL): 'CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, l INT);\nSELECT * FROM t1 JOIN t2 USING (j);' In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join those tables by using the given column name. As we do not have the 'j' column in 't2', we can rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables. 'SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;'",
                  "markdown": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantConditionInspection",
                "shortDescription": {
                  "text": "Constant condition"
                },
                "fullDescription": {
                  "text": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';' The ''Cat' = 'Cat'' is always true and will be reported.",
                  "markdown": "Reports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n\nThe `'Cat' = 'Cat'` is always true and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertIntoGeneratedColumnInspection",
                "shortDescription": {
                  "text": "Insertion into generated columns"
                },
                "fullDescription": {
                  "text": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written. Example (PostgreSQL): 'CREATE TABLE foo\n(\n   col1 INT,\n   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n);\nINSERT INTO foo(col1, col2) VALUES (1, 2);'\n You cannot insert '2' into the 'col2' column because this column is generated. For this script to work, you can change '2' to DEFAULT. 'INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);'",
                  "markdown": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsOrderByInspection",
                "shortDescription": {
                  "text": "ORDER BY in queries"
                },
                "fullDescription": {
                  "text": "Reports usages when the 'ORDER BY' clause is used without 'TOP', 'OFFSET', or 'FOR XML' in views, inline functions, derived tables, subqueries, and common table expressions. For more information about usages of 'ORDER BY', see SELECT - ORDER BY Clause (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL server): 'CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\nSELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89\nORDER BY b) ALIAS;' In a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery. Alternatively, use the Delete element quick-fix to delete the ORDER BY section. After the quick-fix is applied: 'SELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89) ALIAS;'",
                  "markdown": "Reports usages when the `ORDER BY` clause is used without `TOP`, `OFFSET`, or `FOR XML` in views, inline functions, derived tables, subqueries, and common table expressions.\n\nFor more information about usages of `ORDER BY`, see [SELECT - ORDER BY Clause (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql).\n\nExample (Microsoft SQL server):\n\n    CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89\n    ORDER BY b) ALIAS;\n\nIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\nAlternatively, use the **Delete element** quick-fix to delete the ORDER BY section.\n\nAfter the quick-fix is applied:\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89) ALIAS;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 51,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDeprecateTypeInspection",
                "shortDescription": {
                  "text": "Deprecated type"
                },
                "fullDescription": {
                  "text": "Reports usages of types that are deprecated and might disappear in future versions of DBMS. Reported types: LONG in Oracle (see Deprecated and Desupported Features at docs.oracle.com). TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com). Example (Oracle): 'CREATE TABLE ot.foo(\na NUMBER GENERATED BY DEFAULT AS IDENTITY,\nb LONG NOT NULL\n);'",
                  "markdown": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlGotoInspection",
                "shortDescription": {
                  "text": "Usages of GOTO statements"
                },
                "fullDescription": {
                  "text": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop. The extensive use of GOTO statements is generally not recommended. For details, see GOTO statement in SQL procedures at ibm.com. Instead of jumping back to a previous statement using GOTO, consider using a loop. Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK). Example (Oracle): 'CREATE PROCEDURE test(n INT) AS\nDECLARE\n    x INT;\nBEGIN\n    x := 0;\n    GOTO a;\n    <<a>> x := 1;\n    IF (n = 0) THEN\n        GOTO a;\n    END IF;\n    WHILE TRUE\n        LOOP\n            GOTO b;\n        END LOOP;\n    <<b>> x := 3;\nEND;'",
                  "markdown": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlLoadDataPathInspection",
                "shortDescription": {
                  "text": "LOAD statement path"
                },
                "fullDescription": {
                  "text": "Reports paths that start with the tilde character in LOAD statements. Example (MySQL): 'CREATE TABLE table_name (id int);\nLOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\nINTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\nIGNORE 1 LINES;' Instead of the tilde character, use a full path to the file.",
                  "markdown": "Reports paths that start with the tilde character in LOAD statements.\n\nExample (MySQL):\n\n    CREATE TABLE table_name (id int);\n    LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\n    INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\n    IGNORE 1 LINES;\n\nInstead of the tilde character, use a full path to the file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 72,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDtInspection",
                "shortDescription": {
                  "text": "Ill-formed date/time literals"
                },
                "fullDescription": {
                  "text": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2. Example (MySQL): 'SELECT TIME '10 -12:13:14' FROM dual;\nSELECT TIME ' 12 : 13 : 14 ' FROM dual;\nSELECT TIME '12 13 14' FROM dual;\nSELECT TIME '12-13-14' FROM dual;\nSELECT TIME '12.13.14' FROM dual;\nSELECT TIME '12:13:' FROM dual;\nSELECT TIME '12:13' FROM dual;\nSELECT TIME '12:' FROM dual;' In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted. For more information about date and time literals in MySQL, see Date and Time Literals at dev.mysql.com. The following date and type literals are valid for MySQL. 'SELECT TIME '12:13:14' FROM dual;\nSELECT TIME '12:13:14.555' FROM dual;\nSELECT TIME '12:13:14.' FROM dual;\nSELECT TIME '-12:13:14' FROM dual;\nSELECT TIME '10 12:13:14' FROM dual;\nSELECT TIME '-10 12:13:14' FROM dual;'",
                  "markdown": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNoDataSourceInspection",
                "shortDescription": {
                  "text": "No data sources configured"
                },
                "fullDescription": {
                  "text": "Reports the absence of data sources in the Database tool window (View | Tool Windows | Database).",
                  "markdown": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database**)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantExpressionInspection",
                "shortDescription": {
                  "text": "Constant expression"
                },
                "fullDescription": {
                  "text": "Reports conditions and expressions that are always true, false or null. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';\nSELECT a FROM t1 WHERE 'Cat' = null;' The ''Cat' = 'Cat'' is always true and will be reported. The ''Cat' = null' is always null and will be reported.",
                  "markdown": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraUnmatchedForwardDeclarationInspection",
                "shortDescription": {
                  "text": "Forward declaration without definition"
                },
                "fullDescription": {
                  "text": "Reports declarations of procedures and functions that are missing their implementation in code. In Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names of such procedures or functions that are left without implementation. Example (Oracle): 'DECLARE PROCEDURE foo(a int, b varchar2);\nBEGIN\n    NULL;\nEND;' The 'foo' procedure is declared but is missing implementation. We can add the implementation to get rid of the error. 'DECLARE PROCEDURE foo(a int, b varchar2);\n  PROCEDURE foo(a int, b varchar2) IS\nBEGIN\n    NULL;\nEND;\nBEGIN\n    NULL;\nEND;'",
                  "markdown": "Reports declarations of procedures and functions that are missing their implementation in code.\n\nIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\n\nExample (Oracle):\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n    BEGIN\n        NULL;\n    END;\n\nThe `foo` procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n      PROCEDURE foo(a int, b varchar2) IS\n    BEGIN\n        NULL;\n    END;\n    BEGIN\n        NULL;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 65,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlWithoutWhereInspection",
                "shortDescription": {
                  "text": "Delete or update statement without where clauses"
                },
                "fullDescription": {
                  "text": "Reports usages of DELETE or UPDATE statements without WHERE clauses. Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nupdate t1 set  a = 'Smith';\ndelete from t1;'",
                  "markdown": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that can cause side effects while the data source is in read-only mode. For more information about enabling read-only mode, see Enable read-only mode for a connection in the IDE documentation. The Disable read-only mode quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()'",
                  "markdown": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that may cause side effects while the data source is in read-only mode. The quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()'",
                  "markdown": "Reports statements that may cause side effects while the data source is in read-only mode.\n\nThe quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedSubqueryItemInspection",
                "shortDescription": {
                  "text": "Unused subquery item"
                },
                "fullDescription": {
                  "text": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression. Example (PostgreSQL): 'CREATE TABLE for_subquery(id INT);\nSELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n      FROM for_subquery) x;' We reference 'a' and 'q' aliases from a subquery. But the 'b' alias and the 'id' column are not referenced in the outer SELECT statement. Therefore, 'b' and 'id' are grayed out.",
                  "markdown": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that might lead to modification of a database during a read-only connection. To enable read-only mode for a connection, right-click a data source in the Database tool window (View | Tool Windows | Database) and select Properties. In the Data Sources and Drivers dialog, click the Options tab and select the Read-only checkbox. Example (MySQL): 'CREATE TABLE foo(a INT);\nINSERT INTO foo VALUES (1);' As 'CREATE TABLE' and 'INSERT INTO' statements lead to a database modification, these statements will be highlighted in read-only connection mode.",
                  "markdown": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlJoinWithoutOnInspection",
                "shortDescription": {
                  "text": "Unsafe 'join' clause in 'delete' statement"
                },
                "fullDescription": {
                  "text": "Reports missing conditional checks for statements that might modify the whole database. For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops contents of the entire table. Example (MySQL): 'CREATE TABLE foo (a INT,b INT,c INT);\nCREATE TABLE bar (a INT,b INT,c INT);\n\nDELETE table1 FROM foo table1  INNER JOIN bar table2;'",
                  "markdown": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDropIndexedColumnInspection",
                "shortDescription": {
                  "text": "Index is dependent on column"
                },
                "fullDescription": {
                  "text": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE. Example (Microsoft SQL Server): 'CREATE TABLE test_index\n(\ncol  INT NOT NULL,\ncol2 INT NOT NULL,\ncol3 INT NOT NULL UNIQUE,\ncol4 VARCHAR(200)\n);\n\nCREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\nALTER TABLE test_index\nDROP COLUMN col;' You cannot delete the 'col' column because it is in the indexed table. To delete the column, you need to delete the 'aaaa' index first (for example, DROP INDEX aaaa).",
                  "markdown": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTypeInspection",
                "shortDescription": {
                  "text": "Types compatibility"
                },
                "fullDescription": {
                  "text": "Reports type-related errors.",
                  "markdown": "Reports type-related errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnicodeStringLiteralInspection",
                "shortDescription": {
                  "text": "Unicode usage in SQL"
                },
                "fullDescription": {
                  "text": "Reports string literals that use national characters without the 'N' prefix. Without the N prefix, the string is converted to the default code page of the database. This default code page may not recognize certain characters. For more information, see nchar and nvarchar (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL Server): 'SELECT 'abcde' AS a;\nSELECT N'abcde' AS b;\nSELECT 'абвгд' AS c;\nSELECT N'абвгд' AS d;' The 'SELECT 'абвгд' AS c;' does not have the 'N' prefix, the ''абвгд'' part will be highlighted.",
                  "markdown": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'абвгд' AS c;\n    SELECT N'абвгд' AS d;\n\nThe `SELECT 'абвгд' AS c;` does not have the `N` prefix, the `'абвгд'` part will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedVariableInspection",
                "shortDescription": {
                  "text": "Unused variable"
                },
                "fullDescription": {
                  "text": "Reports unused arguments, variables, or parameters. Example (PostgreSQL): 'CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n$$\nBEGIN\n    RETURN PARAMUSED;\nEND\n$$ LANGUAGE plpgsql;' The 'PARAMUNUSED' parameter is not used in the function and might be deleted.",
                  "markdown": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PgSelectFromProcedureInspection",
                "shortDescription": {
                  "text": "Postgres: Select from procedure call"
                },
                "fullDescription": {
                  "text": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, 'AS t1(s VARCHAR)'). This requirement does not apply to scalar functions. Example (PostgreSQL): 'CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\nSELECT 1;\n$$ LANGUAGE sql;\nSELECT * FROM produce_a_table() AS s (c1 INT);\nSELECT * FROM produce_a_table() AS s (c1);\nSELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;' The 'AS s (c1 INT)' has a typed alias, while 'AS s (c1)' and 'AS t1' do not. In this case, the second call of 'produce_a_table()' and 'DBLINK()' will be highlighted.",
                  "markdown": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, `AS t1(s VARCHAR)`).\n\nThis requirement does not apply to scalar functions.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\n    SELECT 1;\n    $$ LANGUAGE sql;\n    SELECT * FROM produce_a_table() AS s (c1 INT);\n    SELECT * FROM produce_a_table() AS s (c1);\n    SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;\n\nThe `AS s (c1 INT)` has a typed alias, while `AS s (c1)` and `AS t1` do not.\nIn this case, the second call of `produce_a_table()` and `DBLINK()` will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostgreSQL",
                      "index": 78,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStorageInspection",
                "shortDescription": {
                  "text": "SQL source modification detection"
                },
                "fullDescription": {
                  "text": "Reports situations when source code of a database object has been changed. The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an object, run statements, and perform code refactoring. Also, you can run introspection by right-clicking an object and selecting Refresh. The inspection covers the following situations: Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE. You changed the object source code, introspected the database, but source code has been already changed by someone else. The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version.",
                  "markdown": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSignatureInspection",
                "shortDescription": {
                  "text": "Function signature"
                },
                "fullDescription": {
                  "text": "Reports signature issues for built-in functions. The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT)\n\nSELECT IFNULL() FROM foo; -- error\nSELECT IFNULL(a) FROM foo; -- error\nSELECT IFNULL(a, b) FROM foo; -- OK\nSELECT IFNULL(a, b, c) FROM foo; -- error' In MySQL, the 'IFNULL()' function accepts strictly two arguments. So, only the 'SELECT IFNULL(a, b) FROM foo;' query is correct.",
                  "markdown": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantOrderingDirectionInspection",
                "shortDescription": {
                  "text": "Redundant ordering direction"
                },
                "fullDescription": {
                  "text": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\nSELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;' The ORDER BY keyword sorts the records in the ascending order by default. So, the 'ASC' keyword for 'a' and 'c' columns is redundant.",
                  "markdown": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraOverloadInspection",
                "shortDescription": {
                  "text": "Overloading errors"
                },
                "fullDescription": {
                  "text": "Reports invalid cases of subprogram overloading in Oracle. Example (Oracle): 'DECLARE\n    SUBTYPE fff IS BINARY_INTEGER;\n    SUBTYPE ggg IS NATURAL;\n    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\nBEGIN\n    NULL;\nEND;' You cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading, see Restrictions on Overloading at docs.oracle.com.",
                  "markdown": "Reports invalid cases of subprogram overloading in Oracle.\n\nExample (Oracle):\n\n    DECLARE\n        SUBTYPE fff IS BINARY_INTEGER;\n        SUBTYPE ggg IS NATURAL;\n        PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n        PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\n    BEGIN\n        NULL;\n    END;\n\nYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\nBINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee [Restrictions on Overloading at docs.oracle.com](https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 65,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlSpaceAfterFunctionNameInspection",
                "shortDescription": {
                  "text": "Whitespace between the function name and the open parenthesis"
                },
                "fullDescription": {
                  "text": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default. Example (MySQL): 'SELECT MAX (qty) FROM orders;'",
                  "markdown": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.\n\nExample (MySQL):\n\n    SELECT MAX (qty) FROM orders;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 72,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAutoIncrementDuplicateInspection",
                "shortDescription": {
                  "text": "Auto-increment duplicate"
                },
                "fullDescription": {
                  "text": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key. Example (MySQL): 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT,\n    c2 INT AUTO_INCREMENT,\n);' The AUTO_INCREMENT constraint for 'c2' will be highlighted as 'c1' already has this constraint. To fix the warning, you can make 'id' a primary key and delete AUTO_INCREMENT for 'c2'. 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    c2 INT,\n);'",
                  "markdown": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStringLengthExceededInspection",
                "shortDescription": {
                  "text": "Implicit string truncation"
                },
                "fullDescription": {
                  "text": "Reports variables that exceed the defined length in characters. Example (Microsoft SQL Server): 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;' The 'myVarExceeded' variable is defined as 'VARCHAR(5)' but both assigned values (''abcde12345'' and ''123456789'') exceed this limitation. You can truncate assigned values or increase the defined length. To increase the length, use the Increase type length quick-fix. After the quick-fix is applied: 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;'",
                  "markdown": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCallNotationInspection",
                "shortDescription": {
                  "text": "Using of named and positional arguments"
                },
                "fullDescription": {
                  "text": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2. Example (In PostgreSQL): 'CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    RETURN a + b + c;\nEND\n$$;\nSELECT foo(a => 1, b => 2, c => 3);\n  -- `3` goes after the named argument\nSELECT foo(1, b => 2, 3);\n  -- `1` and `3` go after the named argument\nSELECT foo(b => 2, 1, 3);'",
                  "markdown": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlParsingInspection",
                "shortDescription": {
                  "text": "Unsupported syntax in pre-8.0 versions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of UNION in queries. The inspection works in MySQL versions that are earlier than 8.0. Example (MySQL): 'SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;'",
                  "markdown": "Reports invalid usages of UNION in queries.\n\nThe inspection works in MySQL versions that are earlier than 8.0.\n\nExample (MySQL):\n\n\n    SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 72,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShadowingAliasInspection",
                "shortDescription": {
                  "text": "Column is shadowed by alias"
                },
                "fullDescription": {
                  "text": "Reports SELECT aliases with names that match column names in the FROM clause. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT);\nSELECT a b, c FROM foo;' The 'a' column uses the 'b' alias but the 'b' name is also used by the column from the 'foo' table.",
                  "markdown": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports unreachable statements inside SQL routines. Example (Microsoft SQL Server): 'CREATE FUNCTION foo() RETURNS INT AS\nBEGIN\n    THROW;\n    RETURN 1;\nEND;' In Microsoft SQL Server, the 'THROW' statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH construct. Therefore, the 'RETURN 1;' part will never be executed.",
                  "markdown": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlResolveInspection",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved SQL references. Example (MySQL): 'CREATE TABLE users(id INT, name VARCHAR(40));\nCREATE TABLE admins(id INT, col1 INT);\n\nSELECT users.id, admins.id FROM admins WHERE admins.id > 1;' The 'users.id' column is unresolved because the 'users' table is missing in the FROM clause.",
                  "markdown": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantLimitInspection",
                "shortDescription": {
                  "text": "Redundant row limiting in queries"
                },
                "fullDescription": {
                  "text": "Reports redundant row limiting clauses like FETCH and LIMIT in queries. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);' To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because the usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first 'N' rows and this will influence the output. 'SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);'",
                  "markdown": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDerivedTableAliasInspection",
                "shortDescription": {
                  "text": "Each derived table should have alias"
                },
                "fullDescription": {
                  "text": "Reports derived tables without aliases. Example (MySQL): 'CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\nCREATE TABLE table2 (id INT, age INTEGER);\n\nSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);' According to Derived Tables at dev.mysql.com, an alias is mandatory. You can add the alias by using the Introduce alias quick-fix. After the quick-fix is applied: 'SELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);'",
                  "markdown": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsCoalesceInspection",
                "shortDescription": {
                  "text": "Using CASE instead of COALESCE function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: Replace with 'COALESCE' call and the opposite one Replace with CASE expression. Example (MySQL): 'SELECT\n  -- this CASE may be replaced by COALESCE\n\tCASE\n\t\tWHEN C1 IS NOT NULL THEN C1\n\t\tELSE 0\n\t\tEND\nFROM dual;' In the example, the CASE statement can be replaced with 'SELECT COALESCE(C1, 0)' that produces the same output. If you prefer using CASE expressions, select the Prefer CASE expressions over COALESCE function option on the inspection page.",
                  "markdown": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantCodeInCoalesceInspection",
                "shortDescription": {
                  "text": "Redundant code in COALESCE call"
                },
                "fullDescription": {
                  "text": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions. Example (MySQL): 'SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;' The first NOT NULL argument is '42', all other arguments will be grayed out.",
                  "markdown": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAggregatesInspection",
                "shortDescription": {
                  "text": "Aggregate-related problems"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of SQL aggregate functions. The following situations are considered: Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses. 'CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\nSELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\nSELECT * FROM foo GROUP BY a ORDER BY b;' This rule does not apply when grouping is made by the primary key. 'SELECT * FROM foo GROUP BY id ORDER BY b;' Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error. 'SELECT a FROM foo WHERE MAX(b) > 0;\nSELECT a FROM foo GROUP BY MAX(a);' Nested calls of aggregate functions. 'SELECT MAX(SUM(a)) FROM foo GROUP BY a;' This rule does not apply to analytic functions. The following query is valid and correct. 'SELECT MAX(SUM(a) OVER ()) FROM foo;' Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section. 'SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;'",
                  "markdown": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingColumnAliasesInspection",
                "shortDescription": {
                  "text": "Missing column aliases"
                },
                "fullDescription": {
                  "text": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement). Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT 1, a + 1 AS A2, MAX(b) AS M\nFROM foo;'",
                  "markdown": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAddNotNullColumnInspection",
                "shortDescription": {
                  "text": "Adding not null column without default value"
                },
                "fullDescription": {
                  "text": "Reports attempts to create NOT NULL columns without DEFAULT values. Example (Microsoft SQL Server): 'CREATE TABLE foo (a INT, b  INT)\n\nALTER TABLE foo ADD c INT NOT NULL;' By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values. If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record. 'ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;' You can quickly add the DEFAULT value by using the Add DEFAULT value quick-fix.",
                  "markdown": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code.",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 48,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIllegalCursorStateInspection",
                "shortDescription": {
                  "text": "Illegal cursor state"
                },
                "fullDescription": {
                  "text": "Reports illegal cursor states inside SQL routines. A routine has CLOSE or FETCH statements but a cursor might be closed. A routine has the OPEN statement but a cursor might be opened. Example (Microsoft SQL Server): 'CREATE TABLE t(col INT);\n\nCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;' According to CLOSE (Transact-SQL) at docs.microsoft.com, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are already closed. So, we need to open the cursor to fix the warning. 'CREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nOPEN my_cursor;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;'",
                  "markdown": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDuplicateColumnInspection",
                "shortDescription": {
                  "text": "Duplicating column name in SELECT"
                },
                "fullDescription": {
                  "text": "Reports duplicated names of column aliases in SELECT lists. Example (Sybase ASE): 'CREATE TABLE t1 (a TEXT, b INT, c INT);\n\nSELECT a AS x, b AS x FROM t1;' The 'x' alias name is used for 'a' and 'b' columns. These assignments are highlighted as errors because you cannot use identical alias names for columns in Sybase ASE.",
                  "markdown": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIdentifierInspection",
                "shortDescription": {
                  "text": "Identifier should be quoted"
                },
                "fullDescription": {
                  "text": "Reports situations when you use SQL reserved keywords as identifier names in your query. Example (Microsoft SQL Server): 'CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);' We use 'select', 'identity', and 'order' as table and column names. But they are also reserved keywords in Microsoft SQL Server. Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the Quote identifier quick-fix. After the quick-fix is applied: 'CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);'",
                  "markdown": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 18,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.css",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "CssInvalidFunction",
                "shortDescription": {
                  "text": "Invalid function"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS function or an incorrect function parameter.",
                  "markdown": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToRgbInspection",
                "shortDescription": {
                  "text": "Color could be replaced with rgb()"
                },
                "fullDescription": {
                  "text": "Reports an 'hsl()' or 'hwb()' color function or a hexadecimal color notation. Suggests replacing such color value with an equivalent 'rgb()' or 'rgba()' color function. Example: '#0c0fff' After the quick-fix is applied: 'rgb(12, 15, 255)'.",
                  "markdown": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssOverwrittenProperties",
                "shortDescription": {
                  "text": "Overwritten property"
                },
                "fullDescription": {
                  "text": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties. Example: '.foo {\n  margin-bottom: 1px;\n  margin-bottom: 1px; /* duplicates margin-bottom */\n  margin: 0; /* overrides margin-bottom */\n}'",
                  "markdown": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidHtmlTagReference",
                "shortDescription": {
                  "text": "Invalid type selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS type selector that matches an unknown HTML element.",
                  "markdown": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingSemicolon",
                "shortDescription": {
                  "text": "Missing semicolon"
                },
                "fullDescription": {
                  "text": "Reports a missing semicolon at the end of a declaration.",
                  "markdown": "Reports a missing semicolon at the end of a declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 59,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference, for example, an incorrect path in an '@import' statement.",
                  "markdown": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCharsetRule",
                "shortDescription": {
                  "text": "Misplaced or incorrect @charset"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@charset' at-rule or an incorrect charset value.",
                  "markdown": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPseudoSelector",
                "shortDescription": {
                  "text": "Invalid pseudo-selector"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS pseudo-class pseudo-element.",
                  "markdown": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssBrowserCompatibilityForProperties",
                "shortDescription": {
                  "text": "Property is incompatible with selected browsers"
                },
                "fullDescription": {
                  "text": "Reports a CSS property that is not supported by the specified browsers. Based on the MDN Compatibility Data.",
                  "markdown": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidMediaFeature",
                "shortDescription": {
                  "text": "Invalid media feature"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS media feature or an incorrect media feature value.",
                  "markdown": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedCustomProperty",
                "shortDescription": {
                  "text": "Unresolved custom property"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a custom property among the arguments of the 'var()' function.",
                  "markdown": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownProperty",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS property or a property used in a wrong context. Add the unknown property to the 'Custom CSS properties' list to skip validation.",
                  "markdown": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingComma",
                "shortDescription": {
                  "text": "Missing comma in selector list"
                },
                "fullDescription": {
                  "text": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines. Example: 'input /* comma has probably been forgotten */\n.button {\n  margin: 1px;\n}'",
                  "markdown": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 74,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnusedSymbol",
                "shortDescription": {
                  "text": "Unused selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML. Note that complete inspection results are available only when running it via Code | Inspect Code or Code | Analyze Code | Run Inspection by Name. Due to performance reasons, style sheet files are not inspected on the fly.",
                  "markdown": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNonIntegerLengthInPixels",
                "shortDescription": {
                  "text": "Non-integer length in pixels"
                },
                "fullDescription": {
                  "text": "Reports a non-integer length in pixels. Example: 'width: 3.14px'",
                  "markdown": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 74,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToHexInspection",
                "shortDescription": {
                  "text": "Color could be replaced with #-hex"
                },
                "fullDescription": {
                  "text": "Reports an 'rgb()', 'hsl()', or other color function. Suggests replacing a color function with an equivalent hexadecimal notation. Example: 'rgb(12, 15, 255)' After the quick-fix is applied: '#0c0fff'.",
                  "markdown": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidAtRule",
                "shortDescription": {
                  "text": "Unknown at-rule"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS at-rule.",
                  "markdown": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNegativeValue",
                "shortDescription": {
                  "text": "Negative property value"
                },
                "fullDescription": {
                  "text": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.",
                  "markdown": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNoGenericFontName",
                "shortDescription": {
                  "text": "Missing generic font family name"
                },
                "fullDescription": {
                  "text": "Verifies that the 'font-family' property contains a generic font family name as a fallback alternative. Generic font family names are: 'serif', 'sans-serif', 'cursive', 'fantasy', and 'monospace'.",
                  "markdown": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 74,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssRedundantUnit",
                "shortDescription": {
                  "text": "Redundant measure unit"
                },
                "fullDescription": {
                  "text": "Reports a measure unit of a zero value where units are not required by the specification. Example: 'width: 0px'",
                  "markdown": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 59,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPropertyValue",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS property value.",
                  "markdown": "Reports an incorrect CSS property value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandUnsafely",
                "shortDescription": {
                  "text": "Properties may probably be replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case. For example, 2 properties: 'outline-color' and 'outline-style' may be replaced with a single 'outline'. Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states. In this example, switching to the 'outline' shorthand means that 'outline-width' is also set to its initial value, which is 'medium'. This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.",
                  "markdown": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidImport",
                "shortDescription": {
                  "text": "Misplaced @import"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@import' statement. According to the specification, '@import' rules must precede all other types of rules, except '@charset' rules.",
                  "markdown": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedClassInComposesRule",
                "shortDescription": {
                  "text": "Unresolved class in 'composes' rule"
                },
                "fullDescription": {
                  "text": "Reports a CSS class reference in the 'composes' rule that cannot be resolved to any valid target. Example: '.className {/* ... */}\n\n  .otherClassName {\n    composes: className;\n  }'",
                  "markdown": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 22,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandSafely",
                "shortDescription": {
                  "text": "Properties may be safely replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form. For example, 4 properties: 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' can be safely replaced with a single 'padding' property. Note that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 'padding-xxx' properties in a ruleset) because switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection.",
                  "markdown": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 21,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.properties",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "UseEllipsisInPropertyInspection",
                "shortDescription": {
                  "text": "Three dot characters instead of the ellipsis"
                },
                "fullDescription": {
                  "text": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files.",
                  "markdown": "Reports three \"dot\" characters which are used instead of the ellipsis character for UTF-8 properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AlphaUnsortedPropertiesFile",
                "shortDescription": {
                  "text": "Properties file or resource bundle is alphabetically unsorted"
                },
                "fullDescription": {
                  "text": "Reports alphabetically unsorted resource bundles or .properties files.",
                  "markdown": "Reports alphabetically unsorted resource bundles or .properties files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFO"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedProperty",
                "shortDescription": {
                  "text": "Unused property"
                },
                "fullDescription": {
                  "text": "Reports properties that are not referenced outside of the .properties file they are contained in.",
                  "markdown": "Reports properties that are not referenced outside of the .properties file they are contained in."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrailingSpacesInProperty",
                "shortDescription": {
                  "text": "Trailing spaces in property"
                },
                "fullDescription": {
                  "text": "Reports properties whose keys or values end with a whitespace.",
                  "markdown": "Reports properties whose keys or values end with a whitespace."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WrongPropertyKeyValueDelimiter",
                "shortDescription": {
                  "text": "Property key/value delimiter doesn't match code style settings"
                },
                "fullDescription": {
                  "text": "Reports properties in which key or value delimiters do not match code style settings.",
                  "markdown": "Reports properties in which key or value delimiters do not match code style settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatePropertyInspection",
                "shortDescription": {
                  "text": "Duplicate property"
                },
                "fullDescription": {
                  "text": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values. Example: 'property1=value;\nproperty2=value;' The Options list allows selecting the area in which the inspection should search for duplicates.",
                  "markdown": "Reports duplicate property keys with different values, duplicate keys, or duplicate property values.\n\nExample:\n\n\n    property1=value;\n    property2=value;\n\nThe **Options** list allows selecting the area in which the inspection should search for duplicates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Properties files",
                      "index": 26,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "XPathView",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "XsltUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused variable or parameter"
                },
                "fullDescription": {
                  "text": "Reports local variables and parameters that are never used.",
                  "markdown": "Reports local variables and parameters that are never used."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTypeConversion",
                "shortDescription": {
                  "text": "Redundant type conversion"
                },
                "fullDescription": {
                  "text": "Reports unnecessary type conversions. Type conversions are unnecessary when the argument type of a 'string()', 'number()', or 'boolean()' function is already the same as the function's return type or if the expected expression type is 'any'. Suggests removing the unnecessary conversion.",
                  "markdown": "Reports unnecessary type conversions. Type conversions are unnecessary when the argument type of a `string()`, `number()`, or `boolean()` function is already the same as the function's return type or if the expected expression type is `any`. Suggests removing the unnecessary conversion."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckNodeTest",
                "shortDescription": {
                  "text": "Unknown element or attribute name"
                },
                "fullDescription": {
                  "text": "Reports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not defined in the referenced schemas. Such names are often the result of typos and would otherwise probably only be discovered at runtime. Example: '<xsl:template match=\"h:txtarea\" />' If the 'h' is bound to the XHTML namespace, the inspection will report this part of the 'match' expression as an unknown element name because the correct name of the element is \"textarea\".",
                  "markdown": "Reports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not defined in the referenced schemas. Such names are often the result of typos and would otherwise probably only be discovered at runtime.\n\n**Example:**\n\n\n      <xsl:template match=\"h:txtarea\" />\n\n\nIf the `h` is bound to the XHTML namespace, the inspection will report this part of the `match` expression as an\nunknown element name because the correct name of the element is \"textarea\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltDeclarations",
                "shortDescription": {
                  "text": "Incorrect declaration"
                },
                "fullDescription": {
                  "text": "Reports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:",
                  "markdown": "Reports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HardwiredNamespacePrefix",
                "shortDescription": {
                  "text": "Hardcoded namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports comparisons of the 'name()' function with a string that contains a colon (':'). Such usages usually indicate a hardcoded namespace prefix in the comparison. As a result, the code will break when run against XML that uses another prefix for the same namespace. Example: '<xsl:if test=\"name() = 'xlink:href'\">...<xsl:if>'",
                  "markdown": "Reports comparisons of the `name()` function with a string that contains a colon (`:`). Such usages usually indicate a hardcoded namespace prefix in the comparison. As a result, the code will break when run against XML that uses another prefix for the same namespace.\n\n**Example:**\n\n\n      <xsl:if test=\"name() = 'xlink:href'\">...<xsl:if>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ImplicitTypeConversion",
                "shortDescription": {
                  "text": "Implicit type conversion"
                },
                "fullDescription": {
                  "text": "Reports implicit conversions between the predefined XPath-types 'STRING', 'NUMBER', 'BOOLEAN', and 'NODESET'. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs: Example: '<xsl:if test=\"foo\" />' is not the same as '<xsl:if test=\"string(foo)\" />' The first test checks whether the element \"foo\" exists ('count(foo) > 0)'; the latter one however is only true if the element actually contains any text ('string-length(foo) > 0'). Suggests making the type conversion more explicit. Use the following options to configure the inspection: Enable or disable implicit conversions between certain types Always report explicit conversions that do not result in the actually expected type, for example, '<xsl:if test=\"number(foo)\" />' Ignore conversion from 'NODESET' to 'BOOLEAN' by using the 'string()' function as a shortcut for writing 'string-length() > 0'.",
                  "markdown": "Reports implicit conversions between the predefined XPath-types `STRING`, `NUMBER`, `BOOLEAN`, and `NODESET`. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs:\n\n**Example:**\n\n\n      <xsl:if test=\"foo\" />\n\nis not the same as\n\n\n      <xsl:if test=\"string(foo)\" />\n\n\nThe first test checks whether the element \"foo\" exists (`count(foo) > 0)`; the latter one however is only\ntrue if the element actually contains any text (`string-length(foo) > 0`). Suggests making\nthe type conversion more explicit.\n\n\nUse the following options to configure the inspection:\n\n* Enable or disable implicit conversions between certain types\n* Always report explicit conversions that do not result in the actually expected type, for example, `<xsl:if test=\"number(foo)\" />`\n* Ignore conversion from `NODESET` to `BOOLEAN` by using the `string()` function as a shortcut for writing `string-length() > 0`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IndexZeroUsage",
                "shortDescription": {
                  "text": "XPath predicate with index 0"
                },
                "fullDescription": {
                  "text": "Reports usages of '0' in a predicate index or in a comparison with the function 'position()'. Such usage is almost always a bug because in XPath, the index starts at '1', not at '0'. Example: '//someelement[position() = 0]' or '//something[0]'",
                  "markdown": "Reports usages of `0` in a predicate index or in a comparison with the function `position()`. Such usage is almost always a bug because in XPath, the index starts at `1`, *not* at `0`.\n\n**Example:**\n\n\n      //someelement[position() = 0] or //something[0]\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 45,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltTemplateInvocation",
                "shortDescription": {
                  "text": "Incorrect template invocation"
                },
                "fullDescription": {
                  "text": "Reports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once in named XSLT template invocations. Parameters declared with a default value are optional and will not be reported as missing.",
                  "markdown": "Reports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once in named XSLT template invocations.\n\n\nParameters declared with a default value are optional and will not be reported as missing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltVariableShadowing",
                "shortDescription": {
                  "text": "Shadowed variable"
                },
                "fullDescription": {
                  "text": "Reports shadowed XSLT variables.",
                  "markdown": "Reports shadowed XSLT variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 27,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.plugins.jade",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "JadeTabsAndSpaces",
                "shortDescription": {
                  "text": "Tabs and spaces both used"
                },
                "fullDescription": {
                  "text": "Reports use of spaces and tabs for indentation in a Pug file.",
                  "markdown": "Reports use of spaces and tabs for indentation in a Pug file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Pug/Jade",
                      "index": 39,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "HtmlTools",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "HtmlRequiredSummaryAttribute",
                "shortDescription": {
                  "text": "Missing required 'summary' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'summary' attribute in a 'table' tag. Suggests adding a'summary' attribute. Based on WCAG 2.0: H73.",
                  "markdown": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlNonExistentInternetResource",
                "shortDescription": {
                  "text": "Unresolved web link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved web link. Works by making network requests in the background.",
                  "markdown": "Reports an unresolved web link. Works by making network requests in the background."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleAttribute",
                "shortDescription": {
                  "text": "Missing required 'title' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing title attribute 'frame', 'iframe', 'dl', and 'a' tags. Suggests adding a title attribute. Based on WCAG 2.0: H33, H40, and H64.",
                  "markdown": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "INFORMATION"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredAltAttribute",
                "shortDescription": {
                  "text": "Missing required 'alt' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'alt' attribute in a 'img' or 'applet' tag or in a 'area' element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: H24, H35, H36, H37.",
                  "markdown": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlPresentationalElement",
                "shortDescription": {
                  "text": "Presentational tag"
                },
                "fullDescription": {
                  "text": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.",
                  "markdown": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedTag",
                "shortDescription": {
                  "text": "Obsolete tag"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.",
                  "markdown": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlFormInputWithoutLabel",
                "shortDescription": {
                  "text": "Missing associated label"
                },
                "fullDescription": {
                  "text": "Reports a form element ('input', 'textarea', or 'select') without an associated label. Suggests creating a new label. Based on WCAG 2.0: H44.",
                  "markdown": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleElement",
                "shortDescription": {
                  "text": "Missing required 'title' element"
                },
                "fullDescription": {
                  "text": "Reports a missing 'title' element inside a 'head' section. Suggests adding a 'title' element. The title should describe the document. Based on WCAG 2.0: H25.",
                  "markdown": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedAttribute",
                "shortDescription": {
                  "text": "Obsolete attribute"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 attribute.",
                  "markdown": "Reports an obsolete HTML5 attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckImageSize",
                "shortDescription": {
                  "text": "Mismatched image size"
                },
                "fullDescription": {
                  "text": "Reports a 'width' and 'height' attribute value of a 'img' tag that is different from the actual width and height of the referenced image.",
                  "markdown": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 6,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredLangAttribute",
                "shortDescription": {
                  "text": "Missing required 'lang' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'lang' (or 'xml:lang') attribute in a 'html' tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: H57.",
                  "markdown": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 44,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.vue",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "VueMissingComponentImportInspection",
                "shortDescription": {
                  "text": "Missing component import"
                },
                "fullDescription": {
                  "text": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import.",
                  "markdown": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDeprecatedSymbol",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated Vue symbol.",
                  "markdown": "Reports a deprecated Vue symbol."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueUnrecognizedDirective",
                "shortDescription": {
                  "text": "Unrecognized directive"
                },
                "fullDescription": {
                  "text": "Reports an unrecognized Vue directive.",
                  "markdown": "Reports an unrecognized Vue directive."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDuplicateTag",
                "shortDescription": {
                  "text": "Duplicate template/script tag"
                },
                "fullDescription": {
                  "text": "Reports multiple usages of the 'template' or 'script' tag in a Vue file. Vue Component specification indicates that each '*.vue' file can contain at most one 'template' or 'script' block at a time.",
                  "markdown": "Reports multiple usages of the `template` or `script` tag in a Vue file.\n\n[Vue Component specification](https://vue-loader.vuejs.org/spec.html) indicates that each `*.vue` file can contain at most one `template` or `script` block at a time."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDataFunction",
                "shortDescription": {
                  "text": "Data function"
                },
                "fullDescription": {
                  "text": "Reports a Vue component data property that is not a function. Suggests wrapping an object literal with a function. When defining a component, 'data' must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for 'data', that very object will be shared by reference across all instances created! With a 'data' function, every time a new instance is created we can simply call it to return a fresh copy of the initial data.",
                  "markdown": "Reports a Vue component [data](https://vuejs.org/v2/api/#data) property that is not a function. Suggests wrapping an object literal with a function.\n\nWhen defining a component, `data` must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for `data`, that very object will be shared by reference across all instances created! With a `data` function, every time a new instance is created we can simply call it to return a fresh copy of the initial data."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueUnrecognizedSlot",
                "shortDescription": {
                  "text": "Unrecognized slot"
                },
                "fullDescription": {
                  "text": "Reports an unrecognized Vue slot.",
                  "markdown": "Reports an unrecognized Vue slot."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 47,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "intellij.webpack",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "WebpackConfigHighlighting",
                "shortDescription": {
                  "text": "Webpack config compliance with JSON Schema"
                },
                "fullDescription": {
                  "text": "Validates options in webpack config files (which name should start with `webpack`, e.g. `webpack.config.js`) against webpack options schema. Disable this inspection to turn off validation and code completion inside the configuration object.",
                  "markdown": "Validates options in webpack config files (which name should start with \\`webpack\\`, e.g. \\`webpack.config.js\\`) against [webpack options schema](https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json).   \n\nDisable this inspection to turn off validation and code completion inside the configuration object."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 11,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.sh",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "ShellCheck",
                "shortDescription": {
                  "text": "ShellCheck"
                },
                "fullDescription": {
                  "text": "Reports shell script bugs detected by the integrated ShellCheck static analysis tool.",
                  "markdown": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Shell script",
                      "index": 56,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.yaml",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "YAMLUnresolvedAlias",
                "shortDescription": {
                  "text": "Unresolved alias"
                },
                "fullDescription": {
                  "text": "Reports unresolved aliases in YAML files. Example: 'some_key: *unknown_alias'",
                  "markdown": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLDuplicatedKeys",
                "shortDescription": {
                  "text": "Duplicated YAML keys"
                },
                "fullDescription": {
                  "text": "Reports duplicated keys in YAML files. Example: 'same_key: some value\n  same_key: another value'",
                  "markdown": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaValidation",
                "shortDescription": {
                  "text": "Validation by JSON Schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified. Scheme example: '{\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeNumberProperty: hello world'",
                  "markdown": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated YAML key"
                },
                "fullDescription": {
                  "text": "Reports deprecated keys in YAML files. Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file. Note that the deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard 'deprecationMessage' extension. Scheme deprecation example: '{\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeDeprecatedProperty: some value'",
                  "markdown": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLRecursiveAlias",
                "shortDescription": {
                  "text": "Recursive alias"
                },
                "fullDescription": {
                  "text": "Reports recursion in YAML aliases. Alias can't be recursive and be used inside the data referenced by a corresponding anchor. Example: 'some_key: &some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor'",
                  "markdown": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnusedAnchor",
                "shortDescription": {
                  "text": "Unused anchor"
                },
                "fullDescription": {
                  "text": "Reports unused anchors. Example: 'some_key: &some_anchor\n    key1: value1'",
                  "markdown": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 61,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.less",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "LessResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly imported in the current file. Example: '* {\n  margin: @var-in-other-file;\n}'",
                  "markdown": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly [imported](http://lesscss.org/features/#import-atrules-feature) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: @var-in-other-file;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 64,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less variable that is not resolved. Example: '* {\n  margin: @unknown-var;\n}'",
                  "markdown": "Reports a reference to a [Less variable](http://lesscss.org/features/#variables-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      margin: @unknown-var;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 64,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less mixin that is not resolved. Example: '* {\n  .unknown-mixin();\n}'",
                  "markdown": "Reports a reference to a [Less mixin](http://lesscss.org/features/#mixins-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      .unknown-mixin();\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 64,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.rider-cpp",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "UnrealJsonLocalInspectionTool",
                "shortDescription": {
                  "text": "Unreal Engine json inspection"
                },
                "fullDescription": {
                  "text": "RIDER-83134",
                  "markdown": "[RIDER-83134](https://youtrack.jetbrains.com/issue/RIDER-83134/)"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Unreal Engine",
                      "index": 2,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Karma",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "KarmaConfigFile",
                "shortDescription": {
                  "text": "Invalid Karma configuration file"
                },
                "fullDescription": {
                  "text": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, 'karma.conf.js'.",
                  "markdown": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, `karma.conf.js`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 70,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.plugins.ini4idea",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "DuplicateSectionInFile",
                "shortDescription": {
                  "text": "Duplicate section in file"
                },
                "fullDescription": {
                  "text": "Reports duplicate sections in the 'ini' file.",
                  "markdown": "Reports duplicate sections in the `ini` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 76,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateKeyInSection",
                "shortDescription": {
                  "text": "Duplicate directive in section"
                },
                "fullDescription": {
                  "text": "Reports duplicate properties in the 'ini' file section.",
                  "markdown": "Reports duplicate properties in the `ini` file section."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 76,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tslint",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "TsLint",
                "shortDescription": {
                  "text": "TSLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the TSLint linter. The highlighting is based on the rule severity specified in the TSLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules.",
                  "markdown": "Reports a discrepancy detected by the [TSLint](https://github.com/palantir/tslint) linter.   \n\nThe highlighting is based on the rule severity specified in the [TSLint configuration file](https://palantir.github.io/tslint/usage/configuration/) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 38,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example:     @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n```\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "W3Validators",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "W3CssValidation",
                "shortDescription": {
                  "text": "W3C CSS validator"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the W3C CSS Validator.",
                  "markdown": "Reports a discrepancy detected by the [W3C CSS Validator](https://jigsaw.w3.org/css-validator/)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code quality tools",
                      "index": 68,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.qodana",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "QodanaServiceMessage",
                "shortDescription": {
                  "text": "Qodana service message"
                },
                "fullDescription": {
                  "text": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems.",
                  "markdown": "Reports the Qodana service messages such as suspending a particular inspection due to a large number of reported problems."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "ideaSeverity": "ERROR"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 28,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.plugins.watcher",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "TaskProblemsInspection",
                "shortDescription": {
                  "text": "File watcher problems"
                },
                "fullDescription": {
                  "text": "Reports an error detected by the output filters from a File Watcher. A File Watcher tracks changes in files and executes the configured command when a change is detected.",
                  "markdown": "Reports an error detected by the output filters from a File Watcher.\n\n\nA File Watcher tracks changes in files and executes the configured command when a change is detected."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "ideaSeverity": "WEAK WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "File Watchers",
                      "index": 79,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.dmarcotte.handlebars",
            "version": "231.5593.88",
            "rules": [
              {
                "id": "HbEmptyBlock",
                "shortDescription": {
                  "text": "Missing block helper argument"
                },
                "fullDescription": {
                  "text": "Reports an 'if', 'each', or 'with' block helper without an argument.",
                  "markdown": "Reports an `if`, `each`, or `with` block helper without an argument."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "ideaSeverity": "WARNING"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Handlebars/Mustache",
                      "index": 82,
                      "toolComponent": {
                        "name": "QDNET"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "exitCode": 0,
          "toolExecutionNotifications": [],
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "results": [
        {
          "ruleId": "NotAccessedVariable.Compiler",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Local variable 'a' is only assigned but its value is never used",
            "markdown": "Local variable 'a' is only assigned but its value is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Lifetimes/Core/Maybe.cs",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 11,
                  "charOffset": 1424,
                  "charLength": 1,
                  "snippet": {
                    "text": "a"
                  },
                  "sourceLanguage": "C#"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1364,
                  "charLength": 146,
                  "snippet": {
                    "text": "    public override bool Equals(object obj)\n    {\n      var a = 5;\n      if (!(obj is Maybe<T>)) return false;\n      return Equals((Maybe<T>)obj);"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "Lifetimes..NETStandard,Version=v2.0",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "6e419846ef49dc07d0b3189aa9d195014ad85f8bb93f0e42fa5d39570d974ed1"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "tags": [
              "C#",
              ".NETStandard 2.0"
            ]
          }
        },
        {
          "ruleId": "NotAccessedVariable.Compiler",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Local variable 'a' is only assigned but its value is never used",
            "markdown": "Local variable 'a' is only assigned but its value is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Lifetimes/Core/Maybe.cs",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 11,
                  "charOffset": 1424,
                  "charLength": 1,
                  "snippet": {
                    "text": "a"
                  },
                  "sourceLanguage": "C#"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1364,
                  "charLength": 146,
                  "snippet": {
                    "text": "    public override bool Equals(object obj)\n    {\n      var a = 5;\n      if (!(obj is Maybe<T>)) return false;\n      return Equals((Maybe<T>)obj);"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "Lifetimes..NETFramework,Version=v3.5",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "e0e1beda3cfeca2632bd89ad814a2f4806810a33905d74cdf83b89895611f0ac"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "tags": [
              "C#",
              ".NETFramework 3.5"
            ]
          }
        },
        {
          "ruleId": "NotAccessedVariable.Compiler",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "Local variable 'a' is only assigned but its value is never used",
            "markdown": "Local variable 'a' is only assigned but its value is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Lifetimes/Core/Maybe.cs",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 11,
                  "charOffset": 1424,
                  "charLength": 1,
                  "snippet": {
                    "text": "a"
                  },
                  "sourceLanguage": "C#"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1364,
                  "charLength": 146,
                  "snippet": {
                    "text": "    public override bool Equals(object obj)\n    {\n      var a = 5;\n      if (!(obj is Maybe<T>)) return false;\n      return Equals((Maybe<T>)obj);"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "Lifetimes..NETFramework,Version=v4.6.1",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c4bf4e16f66cbdd86e69106e46b125079dd2820174a05e4c587534e01f2d54aa"
          },
          "properties": {
            "ideaSeverity": "ERROR",
            "tags": [
              "C#",
              ".NETFramework 4.6.1"
            ]
          }
        },
        {
          "ruleId": "StructCanBeMadeReadOnly",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Struct can be made readonly",
            "markdown": "Struct can be made readonly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Lifetimes/Core/Maybe.cs",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 17,
                  "charOffset": 383,
                  "charLength": 5,
                  "snippet": {
                    "text": "Maybe"
                  },
                  "sourceLanguage": "C#"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 311,
                  "charLength": 161,
                  "snippet": {
                    "text": "  /// </summary>\n  /// <typeparam name=\"T\"></typeparam>\n  public struct Maybe<T> : IEquatable<Maybe<T>>\n  {\n    [PublicAPI] public static readonly Maybe<T> None;"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "Lifetimes..NETStandard,Version=v2.0",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "3253c3075362861c40c8fe7a29d142110bc234ce040b7279cf5c6e62d828a288"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "C#",
              ".NETStandard 2.0"
            ]
          }
        },
        {
          "ruleId": "StructCanBeMadeReadOnly",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Struct can be made readonly",
            "markdown": "Struct can be made readonly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Lifetimes/Core/Maybe.cs",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 17,
                  "charOffset": 383,
                  "charLength": 5,
                  "snippet": {
                    "text": "Maybe"
                  },
                  "sourceLanguage": "C#"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 311,
                  "charLength": 161,
                  "snippet": {
                    "text": "  /// </summary>\n  /// <typeparam name=\"T\"></typeparam>\n  public struct Maybe<T> : IEquatable<Maybe<T>>\n  {\n    [PublicAPI] public static readonly Maybe<T> None;"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "Lifetimes..NETFramework,Version=v3.5",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c1fd7e42354348c5796d10f6a660c7e090eeedd1199f9ca62a8a1e22256a5642"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "C#",
              ".NETFramework 3.5"
            ]
          }
        },
        {
          "ruleId": "StructCanBeMadeReadOnly",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Struct can be made readonly",
            "markdown": "Struct can be made readonly"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "Lifetimes/Core/Maybe.cs",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 17,
                  "charOffset": 383,
                  "charLength": 5,
                  "snippet": {
                    "text": "Maybe"
                  },
                  "sourceLanguage": "C#"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 311,
                  "charLength": 161,
                  "snippet": {
                    "text": "  /// </summary>\n  /// <typeparam name=\"T\"></typeparam>\n  public struct Maybe<T> : IEquatable<Maybe<T>>\n  {\n    [PublicAPI] public static readonly Maybe<T> None;"
                  }
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "Lifetimes..NETFramework,Version=v4.6.1",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v1": "c012d67caedebe68e558aa0f6ef462ae27521a8217b171e5fd14bbdf2e3fb569"
          },
          "properties": {
            "ideaSeverity": "WEAK WARNING",
            "tags": [
              "C#",
              ".NETFramework 4.6.1"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "Rd/qodana/2023-01-23",
        "guid": "3e6535a5-3707-40b9-a620-c700d483aaff",
        "properties": {
          "jobUrl": "https://github.com/hybloid/rd/actions/runs/3987802828"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "configProfile": "absent",
        "deviceId": "200820300000000-0000-0000-0000-000000000001"
      }
    }
  ]
}